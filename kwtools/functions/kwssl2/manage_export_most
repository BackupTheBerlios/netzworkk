# Funktion (manage_export_most), managed das exportieren ins# {{{
# DER,TAR,TXT,ZIP Format.
#
manage_export_most() {
	#
	if [[ ${#argv} == 2 ]] && [[ -f $1 ]] ; then
		unset -- CA_CAPASSWORD
		# Export Dateiname und FORMAT erst einmal festlegen
		export_filename_format "$1" "$2"
		# Funktion (export_most_menu)# {{{
		#
		export_most_menu() {
			if [[ $ExportName == crl.pem ]] ; then
				EXPORT_MOST_MENU=(\"$lv_ExportFilename\" \"$Export_FileName\"
				\"$lv_Ssl_CA_Password\" \"$CA_CAPASSWORD\"
				$lv_Ssl_Validity \"$DEFAULT_REVOKE_DAYS\"
				$gv_Create \"\" $gv_Back \"\")
			else
				EXPORT_MOST_MENU=(\"$lv_ExportFilename\" \"$Export_FileName\"
				$gv_Create \"\" $gv_Back \"\")
			fi
			#
			if [[ ${#argv} == 1 ]] ; then
				menubox -d "$1" "$CERT_EXPORT_TITLE" "$gv_Menupoint" "$EXPORT_MOST_MENU"
			else
				menubox "$CERT_EXPORT_TITLE" "$gv_Menupoint" "$EXPORT_MOST_MENU"
			fi
		}
		## }}}
		export_most_menu
		while [ "$gv_Auswahl" ] ; do
			case $gv_Auswahl in
				HELP*)
		    	    # Hilfe Messagebox
					script_help export_cert_help
					export_most_menu
					;;
				"$lv_ExportFilename")
					# Dateiname fuer den Export eingeben# {{{
					export_filename $FORMAT
					## }}}
					export_most_menu $lv_ExportFilename
					;;
				$lv_Ssl_CA_Password)
					# CA Passwort eingeben
					ca_passwd_input
					export_most_menu $lv_Ssl_CA_Password
					;;
				$lv_Ssl_Validity)
					# Gueltigkeitseingabe
					revoke_days_input
					export_most_menu $lv_Ssl_Validity
					;;
				$gv_Create)
					# exportieren# {{{
					cd $KWSSL_DIR
					#
					case "$FORMAT" in
						der)
							# DER Format# {{{
							if [[ $ExportName == cacert.pem ]] ; then
								openssl x509 -in ${CA_OPEN_NAME}/cacert.pem -outform DER -out "$Export_FileName" || prog_failure
							elif [[ $ExportName == crl.pem ]] ; then
								if [[ -n $Export_FileName ]] && \
									[[ -n $CA_CAPASSWD ]] && \
									[[ -n $DEFAULT_REVOKE_DAYS ]] ; then
									# ertsmal ./tmp loeschen
									rm -rf tmp &>/dev/null
									# ./tmp erstellen
									create_file -d tmp
									#
									openssl ca -gencrl -config $KWSSL2RC \
										-out ./tmp/${ExportName} \
										-passin pass:${CA_CAPASSWD} \
										-crldays $DEFAULT_REVOKE_DAYS || prog_failure
									openssl crl -in ./tmp/${ExportName} \
										-outform DER -out "$Export_FileName" || prog_failure
									#
									unset -- CA_CAPASSWD CA_CAPASSWORD
									break
								else
									failed_entry_msg
									export_most_menu
								fi
							else
								openssl x509 -in ${CA_OPEN_NAME}/certs/${ExportName} -outform DER -out "$Export_FileName" || prog_failure
							fi
							## }}}
							;;
						tar)
							# TAR Export# {{{
							# ertsmal ./tmp loeschen
							rm -rf tmp &>/dev/null
							# ./tmp erstellen
							create_file -d tmp
echo $COMMONNAME
							cp -au ${CA_OPEN_NAME}/certs/${ExportName} ./tmp/cert.pem
							cp -au ${CA_OPEN_NAME}/keys/${ExportName} ./tmp/key.pem
							cp -au ${CA_OPEN_NAME}/${ExportName%.pem}.cachain.pem ./tmp/cachain.pem
							# Tar-Archiv erstellen
							cd /
							tar -cvf "$Export_FileName" ${KWSSL_DIR#/}/tmp 2>/dev/null || prog_failure
							break
							## }}}
							;;
						txt)
							# TXT Export# {{{
							if [[ $ExportName == cacert.pem ]] ; then
								openssl x509 -in ${CA_OPEN_NAME}/${ExportName} -text -noout > "$Export_FileName" || prog_failure
								break
							elif [[ $ExportName == crl.pem ]] ; then
								if [[ -n $Export_FileName ]] && \
									[[ -n $CA_CAPASSWD ]] && \
									[[ -n $DEFAULT_REVOKE_DAYS ]] ; then
									# ertsmal ./tmp loeschen
									rm -rf tmp &>/dev/null
									# ./tmp erstellen
									create_file -d tmp
									#
									openssl ca -gencrl -config $KWSSL2RC \
										-out ./tmp/${ExportName} \
										-passin pass:${CA_CAPASSWD} \
										-crldays $DEFAULT_REVOKE_DAYS || prog_failure
									openssl crl -in ./tmp/${ExportName} \
										-text -noout > "$Export_FileName" || prog_failure
									unset -- CA_CAPASSWD CA_CAPASSWORD
									break
								else
									failed_entry_msg
									export_most_menu
								fi
							else
								openssl x509 -in ${CA_OPEN_NAME}/certs/${ExportName} -text -noout > "$Export_FileName" || prog_failure
								break
							fi
							## }}}
							;;
						zip)
							# ZIP Export# {{{
							# ertsmal ./tmp loeschen
							rm -rf tmp &>/dev/null
							# ./tmp erstellen
							create_file -d tmp
							cp -au ${CA_OPEN_NAME}/certs/${ExportName} ./tmp/cert.pem
							cp -au ${CA_OPEN_NAME}/keys/${ExportName} ./tmp/key.pem
							cp -au ${CA_OPEN_NAME}/${ExportName%.pem}.cachain.pem ./tmp/cachain.pem
							# Tar-Archiv erstellen
							cd ./tmp
							zip -9v "$Export_FileName" * 2>/dev/null || prog_failure
							break
							## }}}
							;;
					esac
					## }}}
					;;
				$gv_Back)
					# Abbrechen
					break
					;;
			esac
		done
	else
		no_para_msg $0
	fi
}
# }}}
