# Funktion (conf_ca), erstellt neue CAs und Zertifikate# {{{
#
# usage: conf_ca [ -c | -ca | -subca ]
# -c - Benutzer/Server Zertifikate
# -ca - CA
# -subca - SubCA
#
conf_ca() {
	local Opt
	Opt="$1"
	if [ -n "$CA_OPEN_NAME" ] ; then
		# Daten der (Sub)CA einlesen.
		read_ca_data "${KWSSL_DIR}/${CA_OPEN_NAME}/cacert.pem"
		#
		unset -- COMMONNAME
	fi
	# Variablen
	KEYLENGTH="4096"
	VALIDITY=${VALIDITY:-3650}
	#
	# Funktion (conf_ca_menu)# {{{
	#
	conf_ca_menu() {
		case $Opt in
			-ca)
				# CA erstellen# {{{
				CA_MENU=($lv_Ssl_Name \"$CA_NAME\"
				\"$lv_Ssl_CommonName\" \"$COMMONNAME\"
                $lv_Ssl_Land_Code \"$COUNTRYCODE\" \"$lv_Ssl_Password\" \"$PASSWORD\"
                \"$lv_Ssl_Password_Generate\" \"\" $lv_Ssl_Bundesstaat \"$COUNTRY\"
                $lv_Ssl_Location \"$LOCATION\" $lv_Ssl_Organisation \"$ORGANISATION\"
                $lv_Ssl_Organisation_Unit \"$ORGANISATIONUNIT\" $lv_Ssl_Email \"$MAIL\"
                $lv_Ssl_Validity \"$VALIDITY\" $lv_Ssl_Key_length \"$KEYLENGTH\"
                $lv_Ssl_Digest \"$DIGEST\" $gv_Create \"\" $gv_Back \"\")
				if [[ ${#argv} == 2 ]] ; then
					menubox -d "$2" "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				else
					menubox "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				fi
				## }}}
				;;
			-subca)
				# SubCA erstellen# {{{
				CA_MENU=($lv_Ssl_Name \"$CA_NAME\"
				\"$lv_Ssl_CA_Password\" \"$CA_CAPASSWORD\"
			   	\"$lv_Ssl_CommonName\" \"$COMMONNAME\"
                $lv_Ssl_Land_Code \"$COUNTRYCODE\" \"$lv_Ssl_Password\" \"$PASSWORD\"
                \"$lv_Ssl_Password_Generate\" \"\" $lv_Ssl_Bundesstaat \"$COUNTRY\"
                $lv_Ssl_Location \"$LOCATION\" $lv_Ssl_Organisation \"$ORGANISATION\"
                $lv_Ssl_Organisation_Unit \"$ORGANISATIONUNIT\" $lv_Ssl_Email \"$MAIL\"
                $lv_Ssl_Validity \"$VALIDITY\" $lv_Ssl_Key_length \"$KEYLENGTH\"
                $lv_Ssl_Digest \"$DIGEST\" $gv_Create \"\" $gv_Back \"\")
				if [[ ${#argv} == 2 ]] ; then
					menubox -d "$2" "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				else
					menubox "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				fi
				## }}}
				;;
			-c)
				# Benutzer/Server Zertifikate erstellen# {{{
				CA_MENU=(\"$Ssl_ServerUserName\" \"$COMMONNAME\"
                \"$lv_Ssl_CA_Password\" \"$CA_CAPASSWORD\"
				$lv_Ssl_Land_Code \"$COUNTRYCODE\"
				\"$lv_Ssl_Password\" \"$PASSWORD\"
                \"$lv_Ssl_Password_Generate\" \"\" $lv_Ssl_Bundesstaat \"$COUNTRY\"
                $lv_Ssl_Location \"$LOCATION\" $lv_Ssl_Organisation \"$ORGANISATION\"
                $lv_Ssl_Organisation_Unit \"$ORGANISATIONUNIT\" $lv_Ssl_Email \"$MAIL\"
				$lv_Ssl_Validity \"$VALIDITY\" 
                $lv_Ssl_Key_length \"$KEYLENGTH\" $lv_Ssl_Digest \"$DIGEST\"
				$lv_Ssl_Alg \"$ALG\" $gv_Create \"\" $gv_Back \"\")
				if [[ ${#argv} == 2 ]] ; then
					menubox -d "$2" "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				else
					menubox "$CA_TITLE" "$gv_Menupoint" "$CA_MENU"
				fi
				## }}}
				;;
			*)
				no_para_msg $0
				break
				;;
		esac
	}
	## }}}
	# Funktion (check_alg), prueft den Algotrithmus# {{{
	#########################################
	# TODO:
	# openssl Befehl mittels dsaparam Datei
	#########################################
	#
	check_alg() {
		if [[ $ALG == DSA ]] ; then
			DsaParam=dsaparam
			Gen_Alg=gendsa
			
		else
			Gen_Alg=genrsa
			unset -- DsaParam
		fi
	}
	## }}}
	# Funktion (validity_input), Gueltigkeitseingabe# {{{
	#
	validity_input() {
		VALIDITY_MSG=$(gettext 'Geben Sie die Gueltigkeit des Zertifikats in Tagen ein.')
		number_input "$lv_Ssl_Validity" "$VALIDITY_MSG" "$VALIDITY"
		if [ -n "$NUMBER" ] ; then
			VALIDITY="$NUMBER"
		else
			VALIDITY="3650"
		fi
	}
	## }}}
	# Funktion (convert_digest), Digest umwandeln# {{{
	convert_digest() {
		unset -- Digest lv_Digest
		case "$DIGEST" in
			SHA-1)
				Digest=sha1
				lv_Digest=(-sha1)
				;;
			MD2)
				Digest=md2
				lv_Digest=(-md2)
				;;
			MDC2)
				Digest=mdc2
				lv_Digest=(-mdc2)
				;;
			MD4)
				Digest=md4
				lv_Digest=(-md4)
				;;
			MD5)
				Digest=md5
				lv_Digest=(-md5)
				;;
			RIPEMD-160)
				Digest=ripemd160
				lv_Digest=(-ripemd160)
				;;
		esac
	}
	## }}}
	# Funktion (create_ca)# {{{
	create_ca() {
		# CA erstellen# {{{
		if [[ $Opt == -ca ]] ; then
			# check auf CommonName, Land, Passwoerter, etc.
			if [[ -n $COMMONNAME ]] && \
				[[ -n $COUNTRYCODE ]] && [[ -n $CA_NAME ]] && \
				[[ -n $CAPASSWD ]] && [[ -n $MAIL ]] ; then
				# Digest umwandeln
				convert_digest
				# Verzeichnisstruktur erstellen
				create_pki $CA_NAME
				# ins Verzeichnis wechseln
				cd $KWSSL_DIR
				# Grundkonfiguration einlesen
				CONF_SECTION=v3_ca
				read_openssl_conf
				# Algorithmus pruefen
				check_alg
				# Grundkonfiguration erstellen
				ca_certs_conf -r
				# privater Schluessel
				openssl $Gen_Alg -aes256 -rand ${CA_NAME}/.rand \
					-out ${CA_NAME}/cacert.key \
					-passout pass:${CAPASSWD} $KEYLENGTH || prog_failure
				# Rechte einstellen
				chmod 400 ./${CA_NAME}/cacert.key
				# privater Schluessel
				openssl req -new -keyform PEM -outform PEM \
					-config $KWSSL2RC -x509 $lv_Digest -days $VALIDITY \
					-key ${CA_NAME}/cacert.key \
					-out ${CA_NAME}/cacert.pem \
					-subj "/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANISATION}/OU=${ORGANISATIONUNIT}/CN=${COMMONNAME}/emailAddress=${MAIL}" \
					-batch -passin pass:${CAPASSWD} || prog_failure
				# Rechte einstellen
				chmod 444 ${CA_NAME}/cacert.pem
				# CRL erstellen
				openssl ca -config $KWSSL2RC -name ca_ca \
					-gencrl -out ${CA_NAME}/crl.pem \
					-batch -passin pass:${CAPASSWD} || prog_failure
				# Options Variable fuers Hauptmenue festlegen.
				# Wird benoetigt falls es noch keine CA gibt, um
				# nach deren Erstellung das richtige Menue aufzurufen..
				MAIN_MENU_OPT="-ca"
				# Variable der ab jetzt geoeffneten CA belegen.
				CA_OPEN_NAME="$CA_NAME"
				# Passphrasen loeschen
				unset -- CAPASSWD PASSWORD CA_NAME
				break
			else
				MSG=$(gettext 'Sie muessen mindestens die Menuepunkte $lv_Ssl_CommonName, $lv_Ssl_Land_Code, $lv_Ssl_Password, $lv_Ssl_Name und $lv_Ssl_Email mit Werten belegen.')
				msgbox "$gv_Attention" "$MSG"
				conf_ca_menu $Opt
			fi
		## }}}
		# SubCAs erstellen, mit Passwort der RootCA# {{{
		elif [[ $Opt == -subca ]] ; then
			if [[ -n $COMMONNAME ]] && [[ -n $CA_CAPASSWD ]] && \
				[[ -n $COUNTRYCODE ]] && [[ -n $CA_NAME ]] && \
				[[ -n $CAPASSWD ]] && [[ -n $MAIL ]] ; then
				# Digest umwandeln
				convert_digest
				# Verzeichnisstruktur erstellen
				create_pki $CA_NAME
				# aktuelle Serial Nr. herausbekommen
				NR=$(< ${KWSSL_DIR}/${CA_OPEN_NAME}/serial)
				# ins Verzeichnis wechseln
				cd $KWSSL_DIR
				# Grundkonfiguration einlesen
				CONF_SECTION=v3_ca
				read_openssl_conf
				# Grundkonfiguration erstellen
				ca_certs_conf -r
				# Algorithmus pruefen
				check_alg
				# privater Schluessel
				openssl $Gen_Alg -aes256 -rand ${CA_NAME}/.rand \
					-out ${CA_NAME}/cacert.key \
					-passout pass:${CAPASSWD} $KEYLENGTH || prog_failure
				# Rechte einstellen
				chmod 400 ${CA_NAME}/cacert.key
				# privater Schluessel
				openssl req -new -keyform PEM -outform PEM \
					-config $KWSSL2RC \
					-key ${CA_NAME}/cacert.key \
					-out ${CA_NAME}/cacert.req \
					-subj "/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANISATION}/OU=${ORGANISATIONUNIT}/CN=${COMMONNAME}/emailAddress=${MAIL}" \
					-batch -passin pass:${CAPASSWD} $lv_Digest || prog_failure
				# Rechte einstellen
				chmod 444 ${CA_NAME}/cacert.req
				# privaten Schluessel mit RootCA signieren
				openssl ca -batch -notext -config ${CA_OPEN_NAME}/${KWSSL2RC_NAME} \
					-name ca_ca -in ${CA_NAME}/cacert.req \
					-days $VALIDITY \
					-preserveDN \
					-extensions v3_ca \
					-keyfile ${CA_OPEN_NAME}/cacert.key \
					-cert ${CA_OPEN_NAME}/cacert.pem \
					-out ${CA_NAME}/cacert.pem \
					-outdir ${CA_OPEN_NAME}/newcerts \
					-passin pass:${CA_CAPASSWD} || prog_failure
				# Rechte einstellen
				chmod 444 ${CA_NAME}/cacert.pem
				chmod 444 ${CA_OPEN_NAME}/newcerts/${NR}.pem
				# req file nach CA/req verschieben
				mv ${CA_NAME}/cacert.req ${CA_OPEN_NAME}/req/${CA_NAME}.pem
				# Zertifikat in die CA integrieren
				cp -a ${CA_OPEN_NAME}/newcerts/${NR}.pem ${CA_OPEN_NAME}/certs/${CA_NAME}.pem
				# keyfile in die CA integrieren
				cp -a ${CA_NAME}/cacert.key ${CA_OPEN_NAME}/keys/${CA_NAME}.pem
				# CRL erstellen
				openssl ca -config $KWSSL2RC -name ca_ca -gencrl \
					-out ${CA_NAME}/crl.pem \
					-batch -passin pass:${CAPASSWD} || prog_failure
				# cachain.pem Datei erstellen.
				cat ${CA_OPEN_NAME}/cacert.pem ${CA_NAME}/cacert.pem > ${CA_NAME}/cachain.pem
				#
				CA_OPEN_NAME="$CA_NAME"
				# Passphrasen loeschen
				unset -- CA_CAPASSWD CAPASSWD PASSWORD CA_NAME
				break
			else
				MSG=$(gettext 'Sie muessen mindestens die Menuepunkte $lv_Ssl_Name, $lv_Ssl_CA_Password, $lv_Ssl_CommonName, $lv_Ssl_Password, $lv_Ssl_Land_Code und $lv_Ssl_Email mit Werten belegen.')
				msgbox "$gv_Attention" "$MSG"
				conf_ca_menu $Opt
			fi
		## }}}
		# Benutzer/Server Zertifikate erstellen# {{{
		############################################################
		# TODO:
		# -preserveDN ins Menue
		############################################################
		elif [[ $Opt == -c ]] ; then
			if [[ -n $COMMONNAME ]] && [[ -n $CA_CAPASSWD ]] && \
				[[ -n $MAIL ]] && [[ -n $CAPASSWD ]] && \
				[[ -n $COUNTRYCODE ]] ; then
				KWSSL2RC="${KWSSL_DIR}/${CA_OPEN_NAME}/${KWSSL2RC_NAME}"
				# Digest umwandeln
				convert_digest
				# Leerzeichen durch Unterstriche ersetzen
				COMMONNAME1="${COMMONNAME// /_}"
				cd ${KWSSL_DIR}/${CA_OPEN_NAME}
				# aktuelle Serial Nr. herausbekommen
				NR=$(< serial)
				# DSA oder RSA# {{{
				# Algorithmus pruefen
				check_alg
				if [ -n "$DsaParam" ] ; then
					create_file -d ../tmp
					# -----BEGIN DSA PARAMETERS-----
					openssl dsaparam \
						-out ../tmp/${COMMONNAME1}.dsaparam \
						-rand ./.rand $KEYLENGTH || prog_failure
					# -----BEGIN DSA PRIVATE KEY-----
					openssl $Gen_Alg -aes256 -out keys/${COMMONNAME1}.pem \
						-rand ./.rand -passout pass:$CAPASSWD \
						../tmp/${COMMONNAME1}.dsaparam || prog_failure
					# Rechte einstellen
					chmod 400 ./${COMMONNAME1}.pem
					openssl req -new -keyform PEM -outform PEM \
						-config $KWSSL2RC \
						-key keys/${COMMONNAME1}.pem \
						-out req/${COMMONNAME1}.pem \
						-subj "/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANISATION}/OU=${ORGANISATIONUNIT}/CN=${COMMONNAME}/emailAddress=${MAIL}" \
						-passin pass:${CAPASSWD} $lv_Digest || prog_failure
				else
					# -----BEGIN RSA PRIVATE KEY-----
					openssl $Gen_Alg -aes256 -out keys/${COMMONNAME1}.pem \
						-rand ./.rand \
						-passout pass:${CAPASSWD} $KEYLENGTH || prog_failure
					# Rechte einstellen
					chmod 400 keys/${COMMONNAME1}.pem
					openssl req -new -keyform PEM -outform PEM \
						-config $KWSSL2RC \
						-key keys/${COMMONNAME1}.pem \
						-out req/${COMMONNAME1}.pem \
						-subj "/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANISATION}/OU=${ORGANISATIONUNIT}/CN=${COMMONNAME}/emailAddress=${MAIL}" \
						-passin pass:${CAPASSWD} $lv_Digest || prog_failure
				fi
				## }}}
				# Rechte einstellen
				chmod 444 req/${COMMONNAME1}.pem
				# privaten Schluessel mit SubCA signieren
				openssl ca -batch -notext -config $KWSSL2RC \
					-name $CONF_SECT -in req/${COMMONNAME1}.pem \
					-days $VALIDITY \
					-preserveDN -md ${lv_Digest#-} \
					-out certs/${COMMONNAME1}.pem \
					-outdir newcerts \
					-passin pass:${CA_CAPASSWD} || prog_failure
				# Rechte einstellen
				chmod 444 certs${COMMONNAME1}.pem
				chmod 444 newcerts/${NR}.pem
				# cachain.pem Datei erstellen.
				cat cachain.pem certs/${COMMONNAME1}.pem > ${COMMONNAME1}.cachain.pem
				# Passphrasen loeschen
				unset -- CAPASSWD CA_CAPASSWD COMMONNAME PASSWORD
				break
			else
				MSG=$(gettext 'Sie muessen mindestens die Menuepunkte $Ssl_ServerUserName, $lv_Ssl_CA_Password, $lv_Ssl_Password, $lv_Ssl_Land_Code und $lv_Ssl_Email mit Werten belegen.')
				msgbox "$gv_Attention" "$MSG"
				conf_ca_menu $Opt
			fi
		fi
		## }}}
	}
	## }}}
	check_helpfile "$Opt"
	conf_ca_menu $Opt
	while [ "$gv_Auswahl" ] ; do
		case $gv_Auswahl in
			HELP*)
				# Hilfe Messagebox
				script_help "$HELPFILE"
				conf_ca_menu $Opt
				;;
			"$lv_Ssl_CA_Password")
				# RootCA Password Eingabe# {{{
				CA_PASS_MSG=$(gettext 'Geben Sie die Passphrase fuer die CA ein.')
				password "$lv_Ssl_CA_Password" "$CA_PASS_MSG" "$PASSWD_LENGTH"
				if [ -n "$PASSPHRASE" ] ; then
					password_display "$PASSPHRASE"
					if [ -n "$gv_Star_Passphrase" ] ; then
						CA_CAPASSWORD="$gv_Star_Passphrase"
						CA_CAPASSWD="$PASSPHRASE"
					else
						unset -- CA_CAPASSWD PASSPHRASE
					fi
				else
					unset -- CA_CAPASSWD PASSPHRASE
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_CA_Password
				;;
			$lv_Ssl_Name)
				# Name der CA eingeben# {{{
				inputbox "$lv_Ssl_Name" "$SAVE_MSG" "$CA_NAME"
				if [ -n "$gv_Auswahl" ] ; then
					if [ ! -d "${KWSSL_DIR}/${gv_Auswahl}" ] ; then
						# dementsprechende Variablen fuer die CA belegen
						CA_NAME="$gv_Auswahl"
					else
						unset -- CA_NAME
						ca_existed_msg
					fi
				else
					unset -- CA_NAME
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Name
				;;
			"$lv_Ssl_CommonName")
				# allgemeine Daten fuer das CA Zertifikat eingeben# {{{
				COMMONNAME_MSG=$(gettext 'Geben Sie den allgemeinen Namen fuer die CA ein.')
				inputbox "$lv_Ssl_CommonName" "$COMMONNAME_MSG" "$COMMONNAME"
				if [ -n "$gv_Auswahl" ] ; then
					COMMONNAME="$gv_Auswahl"
				else
					unset -- COMMONNAME
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_CommonName
				;;
			$lv_Ssl_ServerName)
				# Dateiname des Zertifikats eingeben# {{{
				SERVERNAME_MSG=$(gettext 'Geben Sie den Namen fuer den Server ein.')
				inputbox "$lv_Ssl_ServerName" "$SERVERNAME_MSG" "$COMMONNAME"
				if [ -n "$gv_Auswahl" ] ; then
					if [ ! -f "${KWSSL_DIR}/${CA_OPEN_NAME}/${gv_Auswahl}.cert.pem" ] ; then
						COMMONNAME="$gv_Auswahl"
					else
						unset -- COMMONNAME
						MSG=$(gettext 'Dieser Servername ($gv_Auswahl) ist schon vorhanden.')
						msgbox "$gv_Info" "$MSG"
					fi
				else
					unset -- COMMONNAME
				fi
				## }}}
				conf_ca_menu $Opt $Ssl_ServerUserName
				;;
			$lv_Ssl_UserName)
				# Username des Zertifikats eingeben# {{{
				USERNAME_MSG=$(gettext 'Geben Sie einen Benutzernamen ein.')
				inputbox "$lv_Ssl_UserName" "$USERNAME_MSG" "$COMMONNAME"
				if [ -n "$gv_Auswahl" ] ; then
					if [ ! -f "${KWSSL_DIR}/${CA_OPEN_NAME}/${gv_Auswahl}.cert.pem" ] ; then
						COMMONNAME="$gv_Auswahl"
					else
						unset -- COMMONNAME
						MSG=$(gettext 'Dieser Benutzername ($gv_Auswahl) ist schon vorhanden.')
						msgbox "$gv_Info" "$MSG"
					fi
				else
					unset -- COMMONNAME
				fi
				## }}}
				conf_ca_menu $Opt $Ssl_ServerUserName
				;;
			$lv_Ssl_Land_Code)
				# Land (2 Buchstaben Code) eingeben# {{{
				COUNTRYCODE_MSG=$(gettext 'Geben Sie den Laendercode (2 Buchstaben, z. B. DE) ein.')
				inputbox "$lv_Ssl_Land_Code" "$COUNTRYCODE_MSG" "$COUNTRYCODE"
				case "$gv_Auswahl" in
					[A-Z][A-Z])
						COUNTRYCODE="$gv_Auswahl"
						;;
					*)
						no_input_msg
						;;
				esac
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Land_Code
				;;
			"$lv_Ssl_Password")
				# Passphrase eingeben# {{{
				PASSWD_MSG=$(gettext 'Geben Sie bitte eine Passphrase fuer das Zertifikat oder CA ein (mindestens $PASSWD_LENGTH Zeichen lang) und wiederholen diese im Feld darunter.')
				mixed_password "$gv_Passwd_TITLE" "$PASSWD_MSG" "$PASSWD_LENGTH"
				if [[ -n $gv_Pass ]] ; then
					password_display "$gv_Pass"
					if [ -n "$gv_Star_Passphrase" ] ; then
						PASSWORD="$gv_Star_Passphrase"
						CAPASSWD="$gv_Pass"
						unset -- gv_Pass
					else
						unset -- PASSWORD gv_Pass
					fi
				else
					unset -- PASSWORD CAPASSWD gv_Pass
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Password
				;;
			"$lv_Ssl_Password_Generate")
				# Passord generieren# {{{
				# Standard Passphrasen Laenge ist 10 Zeichen lang
				# wenn keine Passphrase manuell eingegeben wurde.
				gv_Pass=${${${(ws: :)$(head -c 256 /dev/urandom | uuencode -m -)}[4]}[1,$PASSWD_LENGTH]}
				if [[ -n $gv_Pass ]] ; then
					PASSWORD="$gv_Pass"
					CAPASSWD="$gv_Pass"
					unset -- gv_Pass
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Password_Generate
				;;
			$lv_Ssl_Bundesstaat)
				# Bundesstaat oder Provinz eingeben# {{{
				COUNTRY_MSG=$(gettext 'Geben Sie den Bundesstaat oder die Provinz ein.')
				inputbox "$lv_Ssl_Bundesstaat" "$COUNTRY_MSG" "$COUNTRY"
				if [ -n "$gv_Auswahl" ] ; then
					COUNTRY="$gv_Auswahl"
				else
					unset -- COUNTRY
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Bundesstaat
				;;
			$lv_Ssl_Location)
				# Standort - z.B. Stadt eingeben# {{{
				LOCATION_MSG=$(gettext 'Geben Sie den Standort (z. B. Stadt) ein.')
				inputbox "$lv_Ssl_Location" "$LOCATION_MSG" "$LOCATION"
				if [ -n "$gv_Auswahl" ] ; then
					LOCATION="$gv_Auswahl"
				else
					unset -- LOCATION
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Location
				;;
			$lv_Ssl_Organisation)
				# Organisation - z.B. Firma eingeben# {{{
				ORGANISATION_MSG=$(gettext 'Geben Sie ihre Organisation (z. B. Firma) ein.')
				inputbox "$lv_Ssl_Organisation" "$ORGANISATION_MSG" "$ORGANISATION"
				if [ -n "$gv_Auswahl" ] ; then
					ORGANISATION="$gv_Auswahl"
				else
					unset -- ORGANISATION
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Organisation
				;;
			$lv_Ssl_Organisation_Unit)
				# Organisationseinheit - z.B. Arbeit eingeben# {{{
				ORGANISATIONUNIT_MSG=$(gettext 'Geben Sie ihre Organisationeinheit (z. B. Arbeit) ein.')
				inputbox "$lv_Ssl_Organisation_Unit" "$ORGANISATIONUNIT_MSG" "$ORGANISATIONUNIT"
				if [ -n "$gv_Auswahl" ] ; then
					ORGANISATIONUNIT="$gv_Auswahl"
				else
					unset -- ORGANISATIONUNIT
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Organisation_Unit
				;;
			$lv_Ssl_Email)
				# Email-Adresse# {{{
				EMAIL_MSG=$(gettext 'Geben Sie eine Mail Adresse ein.')
				mail_address "$EMAIL_MSG" "$MAIL"
				if [ -n "$gv_Mail_Adr" ] ; then
					MAIL="$gv_Mail_Adr"
				else
					unset -- MAIL
				fi
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Email
				;;
			$lv_Ssl_Validity)
				# Gueltigkeitseingabe
				validity_input
				conf_ca_menu $Opt $lv_Ssl_Validity
				;;
			$lv_Ssl_Key_length)
				# Schluessellaenge eingeben (numbits)
				keylength_input
				conf_ca_menu $Opt $lv_Ssl_Key_length
				;;
			$lv_Ssl_Digest)
				# Digest auswaehlen# {{{
				DIGEST_MENU=(SHA-1 \"\" MD2 \"\" MDC2 \"\"
				MD4 \"\" MD5 \"\" RIPEMD-160 \"\")
				# Funktion (digest_menu)# {{{
				digest_menu() {
					if [ -n "$DIGEST" ] ; then
						menubox -d "$DIGEST" "$CA_TITLE" "$gv_Menupoint" "$DIGEST_MENU"
					else
						menubox "$CA_TITLE" "$gv_Menupoint" "$DIGEST_MENU"
					fi
				}
				## }}}
				digest_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*) # Hilfe
							script_help "$HELPFILE"
							digest_menu
							;;
						*) # Auswahl uebernehmen
							DIGEST="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Digest
				;;
			$lv_Ssl_Alg)
				# Algorithmus auswaehlen# {{{
				ALG_MENU=(RSA \"\" DSA \"\")
				# Funktion (alg_menu)# {{{
				alg_menu() {
					if [ -n "$ALG" ] ; then
						menubox -d "$DIGEST" "$CA_TITLE" "$gv_Menupoint" "$ALG_MENU"
					else
						menubox "$CA_TITLE" "$gv_Menupoint" "$ALG_MENU"
					fi
				}
				## }}}
				alg_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*) # Hilfe
							script_help "$HELPFILE"
							alg_menu
							;;
						*) # Auswahl uebernehmen
							ALG="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				conf_ca_menu $Opt $lv_Ssl_Alg
				;;
			$gv_Create)
				# CAs, Zertifikate erstellen und konfigurieren# {{{
				create_ca
				## }}}
				;;
			$gv_Back)
				# zurueck
				break
				;;
		esac
	done
}
#}}}
