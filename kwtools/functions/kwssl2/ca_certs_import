# Funktion (ca_certs_import), import CAs und Zertifikate# {{{
#
# usage: ca_certs_import
#
ca_certs_import() {
	# Variablen die nach dem speichern/zurueck geloescht werden sollen.
	IMPORT_UNSET=(PRIVPASSWD PRIV_PASSWORD CA_NEW_PASSWD PASSWORD
		CERTS_DIR NEW_CA_NAME INDEX_FILE PRIV_KEY CACERT_FILE)
	# Variablen# {{{
	lv_Ssl_Priv_Pass=$(gettext 'privater Schluessel (Passwort)')
	lv_Ca_Cert=$(gettext 'CA Zertifikat')
	lv_Priv_Key=$(gettext 'privater CA Schluessel')
	lv_Index_File=$(gettext 'openssl index Datei')
	lv_Certs_Dir=$(gettext 'Verzeichnis mit Zertifikaten')
	## }}}
	# Funktion (import_menu)# {{{
	#
	IMPORT_TITLE="${CA_OPEN_NAME}::${lv_CA_Import}"
	#
	import_menu() {
		IMPORT_MENU=(\"$lv_Ssl_Priv_Pass\" \"$PRIV_PASSWORD\"
		\"$lv_Ssl_Name\" \"$NEW_CA_NAME\"
		\"$lv_CA_Password\" \"$PASSWORD\"
		\"$lv_Ssl_Password_Generate\" \"\"
		\"$lv_Ca_Cert\" \"$CACERT_FILE\"
		\"$lv_Priv_Key\" \"$PRIV_KEY\"
		\"$lv_Index_File\" \"$INDEX_FILE\"
		\"$lv_Certs_Dir\" \"$CERTS_DIR\"
		$gv_Create \"\" $gv_Back \"\")
		if [[ ${#argv} == 1 ]] ; then
			menubox -d "$1" "$IMPORT_TITLE" "$gv_Menupoint" "$IMPORT_MENU"
		else
			menubox "$IMPORT_TITLE" "$gv_Menupoint" "$IMPORT_MENU"
		fi
	}
	## }}}
	# Funktion (check_import_cacert), ueberprueft die zu importierende# {{{
	# CA Certificate Dateien
	check_import_cacert() {
		if [[ ${#argv} == 1 ]] ; then
			# Funktion (no_basic_constraints_msg)# {{{
			#
			no_basic_constraints_msg() {
				MSG=$(gettext 'Kann die Zeile \"X509v3 Basic Constraints\" nicht finden.')
				msgbox "$gv_Info" "$MSG"
			}
			## }}}
			local File Tmp
			unset -- File Tmp IMPORT_ALG
			File="$1"
			Tmp=${${(ws: :)$(file -b $File)}[1]}
			# Bestimmen des Formates.
			if [[ $Tmp == PEM ]] ; then
				IMPORT_INFORM="-inform PEM"
				PROG_OPT="x509 -inform PEM -in $File -text -noout"
			else
				IMPORT_INFORM="-inform DER"
				PROG_OPT="x509 -inform DER -in $File -text -noout"
			fi
			# Temporaere Dateien mit allen Werten erstellen.
			# Daraus werden dann die bestimmten Kriterien ueberprueft.
			openssl ${=PROG_OPT} > ${gv_WorkDir}/cacert_import
			# Fehler Nachrichten
			if ! grep -q 'X509v3 Basic Constraints: critical' ${gv_WorkDir}/cacert_import ; then
				if ! grep -q 'X509v3 Basic Constraints' ${gv_WorkDir}/cacert_import ; then
					no_basic_constraints_msg
					return 1
				fi
			fi
			#
			if grep -q 'CA:TRUE' ${gv_WorkDir}/cacert_import ; then
				# RSA oder DSA Algotrithmus herrausfinden.
				Alg_Tmp=${${(ws,: ,)${(M)${(f)"$(< ${gv_WorkDir}/cacert_import)"}##*Public Key Algorithm*}}[2]}
				if [[ $Alg_Tmp == rsaEncryption ]] ; then
					IMPORT_ALG=rsa
				elif [[ $Alg_Tmp == dsaEncryption ]] ; then
					IMPORT_ALG=dsa
				else
					unset -- IMPORT_ALG
					return 1
				fi
			else
				MSG=$(gettext 'Das ausgewaehlte CA Zertifikat ist nicht gueltig.')
				unset -- CACERT_FILE
				return 1
			fi
		else
			no_para_msg $0
			return 1
		fi
		return 0
	}
	## }}}
	# Funktion (check_import_cakey), ueberprueft die zu importierende# {{{
	# Key Datei
	check_import_cakey() {
		if [[ ${#argv} == 3 ]] ; then
			local File Alg InForm
			unset -- File Alg InForm
			Alg="$1"
			InForm="$2"
			File="$3"
			PROG_OPT="$Alg $InForm -in $File"
			# Fehler Nachrichten
			if ! openssl ${=PROG_OPT} &>/dev/null ; then
				MSG=$(gettext 'Der private Schluessel kann nicht gelesen werden.')
				msgbox "$gv_Info" "$MSG"
				unset -- PRIV_KEY
				return 1
			fi
		else
			no_para_msg $0
			return 1
		fi
		return 0
	}
	## }}}
	# Funktion (import_files)# {{{
	#
	import_files() {
		if [[ -n $PRIV_PASSWORD ]] && \
			[[ -n $NEW_CA_NAME ]] && \
			[[ -n $PASSWORD ]] && \
			[[ -n $CACERT_FILE ]] && \
			[[ -n $PRIV_KEY ]] && \
			[[ -n $CERTS_DIR ]] ; then
			check_import_cacert "$CACERT_FILE"
			if [ $? -eq 0 ] ; then
				# Die Variablen $IMPORT_ALG und $IMPORT_INFORM werden
				# von der Funktion check_import_cacert belegt.
				check_import_cakey "$IMPORT_ALG" "$IMPORT_INFORM" "$PRIV_KEY"
			fi
			if [ $? -eq 0 ] ; then
				########################################
				# TODO:
				# Frage: MSG Wollen Sie die CA wirklich importieren?
				# alles mit ausgewaehlter Anzeige der Parameter,
				# wie Aussteller, etc.
				########################################
				#
				# openssl
				# create_file -d "$CA_NAME"
				create_pki "$NEW_CA_NAME"
				# aktuelle Serial Nr. herausbekommen
				NR=$(< ${KWSSL_DIR}/${CA_OPEN_NAME}/serial)
				# ins Verzeichnis wechseln
				cd $KWSSL_DIR
				# einlesen vom Subject des Zertifikates
				read_ca_data "$CACERT_FILE"
				# Dateinamen aus den Werten vom Subject erstellen
				# Basis: CN EMAIL OU O L ST C
				gen_name
				# Standard Variablen belegen
				lv_Digest=(-sha1)
				VALIDITY=3650
				# Key Datei importieren
				openssl $IMPORT_ALG ${=IMPORT_INFORM} -outform PEM \
					-in $PRIV_KEY -aes256 \
					-out ${NEW_CA_NAME}/cacert.key \
					-passout pass:${CA_NEW_PASSWD} || prog_failure ; return 1
				#
				# Certificate Request erstellen
				openssl req -new -keyform PEM -outform PEM \
					-config $KWSSL2RC \
					-key ${NEW_CA_NAME}/cacert.key \
					-out ${NEW_CA_NAME}/cacert.req \
					-subj "/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANISATION}/OU=${ORGANISATIONUNIT}/CN=${COMMONNAME}/emailAddress=${MAIL}" \
					-batch -passin pass:${CA_NEW_PASSWD} $lv_Digest || prog_failure ; return 1
				# Rechte einstellen
				chmod 444 ${NEW_CA_NAME}/cacert.req
				# privaten Schluessel mit RootCA signieren
				openssl ca -batch -notext \
					-config ${CA_OPEN_NAME}/${KWSSL2RC_NAME} \
					-name ca_ca -in ${NEW_CA_NAME}/cacert.req \
					-days $VALIDITY -preserveDN \
					-extensions $CONF_SECTION \
					-keyfile ${CA_OPEN_NAME}/cacert.key \
					-cert ${CA_OPEN_NAME}/cacert.pem \
					-out ${NEW_CA_NAME}/cacert.pem \
					-outdir ${CA_OPEN_NAME}/newcerts \
					-passin pass:${PRIVPASSWD} || prog_failure ; return 1
				# Rechte einstellen
				chmod 444 ${NEW_CA_NAME}/cacert.pem
				chmod 444 ${CA_OPEN_NAME}/newcerts/${NR}.pem
				# req file nach CA/req verschieben
				mv ${NEW_CA_NAME}/cacert.req ${CA_OPEN_NAME}/req/${GEN_NAME}.pem
				# Zertifikat in die CA integrieren
				cp -a ${CA_OPEN_NAME}/newcerts/${NR}.pem ${CA_OPEN_NAME}/certs/${GEN_NAME}.pem
				# keyfile in die CA integrieren
				cp -a ${NEW_CA_NAME}/cacert.key ${CA_OPEN_NAME}/keys/${GEN_NAME}.pem
				# CRL erstellen
				openssl ca -config $KWSSL2RC -name ca_ca -gencrl \
					-out ${NEW_CA_NAME}/crl/crl.pem \
					-batch -passin pass:${CA_NEW_PASSWD} || prog_failure ; return 1
				# cachain.pem Datei erstellen.
				cat ${CA_OPEN_NAME}/cacert.pem ${NEW_CA_NAME}/cacert.pem > ${NEW_CA_NAME}/cachain.pem
				###############################
				# TODO:
				# - certs finden und importieren
				# - index.txt Datei
				################################
				#
				# CA oeffnen
				CA_OPEN_NAME="$NEW_CA_NAME"
			else
				import_menu
			fi
		else
			MSG=$(gettext 'Sie muessen mindestens die Menuepunkte $lv_Ssl_Priv_Pass, $lv_Ssl_Name, $lv_Ssl_Password, $lv_Ca_Cert, $lv_Priv_Key und $lv_Certs_Dir mit Werten belegen.')
			msgbox "$gv_Info" "$MSG"
			import_menu
		fi
	}
	## }}}
	import_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)
				script_help ca_certs_import_help
				import_menu
				;;
			"$lv_Ssl_Priv_Pass")
				# Password des privaten Schluessel eingeben# {{{
				PRIV_PASS_MSG=$(gettext 'Geben Sie das Passwort des privaten Schluessels ein.')
				password "$lv_Ssl_Priv_Pass" "$PRIV_PASS_MSG" "$PASSWD_LENGTH"
				if [ -n "$PASSPHRASE" ] ; then
					password_display "$PASSPHRASE"
					if [ -n "$gv_Star_Passphrase" ] ; then
						PRIV_PASSWORD="$gv_Star_Passphrase"
						PRIVPASSWD="$PASSPHRASE"
						unset -- PASSPHRASE
					else
						unset -- PRIVPASSWD PASSPHRASE
					fi
				else
					unset -- PRIVPASSWD PASSPHRASE
				fi
				## }}}
				import_menu $lv_Ssl_Priv_Pass
				;;
			$lv_Ssl_Name)
				# Name fuer lokale Speicherung eingeben.# {{{
				inputbox "$lv_Ssl_Name" "$SAVE_MSG" "$NEW_CA_NAME"
				if [ -n "$gv_Auswahl" ] ; then
					if [ ! -d "${KWSSL_DIR}/${gv_Auswahl}" ] ; then
						# dementsprechende Variablen fuer die SubCA belegen
						NEW_CA_NAME="$gv_Auswahl"
					else
						unset -- NEW_CA_NAME
						ca_existed_msg
					fi
				else
					unset -- NEW_CA_NAME
				fi
				## }}}
				import_menu $lv_Ssl_Name
				;;
			"$lv_CA_Password")
				# Passphrase eingeben# {{{
				PASSWD_MSG=$(gettext 'Geben Sie bitte eine neue Passphrase fuer die CA ein (mindestens $PASSWD_LENGTH Zeichen lang) die importiert werden soll und wiederholen diese im Feld darunter.')
				mixed_password "$gv_Passwd_TITLE" "$PASSWD_MSG" "$PASSWD_LENGTH"
				if [[ -n $gv_Pass ]] ; then
					password_display "$gv_Pass"
					if [ -n "$gv_Star_Passphrase" ] ; then
						PASSWORD="$gv_Star_Passphrase"
						CA_NEW_PASSWD="$gv_Pass"
						unset -- gv_Pass
					else
						unset -- PASSWORD gv_Pass
					fi
				else
					unset -- PASSWORD CA_NEW_PASSWD gv_Pass
				fi
				## }}}
				import_menu $lv_CA_Password
				;;
			"$lv_Ssl_Password_Generate")
				# Passord generieren# {{{
				# Standard Passphrasen Laenge ist 10 Zeichen lang
				# wenn keine Passphrase manuell eingegeben wurde.
				gv_Pass=${${${(ws: :)$(head -c 256 /dev/urandom | uuencode -m -)}[4]}[1,$PASSWD_LENGTH]}
				if [[ -n $gv_Pass ]] ; then
					PASSWORD="$gv_Pass"
					CA_NEW_PASSWD="$gv_Pass"
					unset -- gv_Pass
				fi
				## }}}
				import_menu $lv_CA_Password
				;;
			"$lv_Ca_Cert")
				# CA Zertifikat auswaehlen# {{{
				FORMAT="SSLCACERT"
				SUFFIX=".pem .der"
				file_choice "${CACERT_FILE%/*}" only "$CACERT_FILE"
				if [ -n "$WERT" ] ; then
					CACERT_FILE="${VERZ}/${WERT}"
				fi
				## }}}
				import_menu $lv_Ca_Cert
				;;
			"$lv_Priv_Key")
				# privaten Schluessel auswaehlen# {{{
				FORMAT=""
				SUFFIX=".pem .der"
				file_choice "${PRIV_KEY%/*}" only "$PRIV_KEY"
				if [ -n "$WERT" ] ; then
					PRIV_KEY="${VERZ}/${WERT}"
				fi
				## }}}
				import_menu $lv_Priv_Key
				;;
			"$lv_Index_File")
				# index.txt Datei auswaehlen# {{{
				FORMAT="text"
				SUFFIX=".txt"
				file_choice "$CERTS_DIR" only "$INDEX_FILE"
				if [ -n "$WERT" ] ; then
					INDEX_FILE="${VERZ}/${gv_Auswahl}"
				fi
				## }}}
				import_menu $lv_Index_File
				;;
			"$lv_Certs_Dir")
				# Verzeichnis mit Zertifikaten auswaehlen# {{{
				dselect "$CERTS_DIR"
				if [ -n "$VERZ" ] ; then
					dselect_check "$VERZ"
					if [ -n "$VERZ" ] ; then
						CERTS_DIR="$VERZ"
					fi
				fi
				## }}}
				import_menu $lv_Certs_Dir
				;;
			$gv_Create)
				# importieren# {{{
				import_files
				#####################################
				# TODO:
				# NOTIZ ueber was noch nicht geht.
				# weider weg!
				#####################################
				MSG="Zertifikate aus $CERTS_DIR importieren geht noch nicht."
				msgbox "$gv_Info" "$MSG"
				#
				# Passphrasen/etc. loeschen
				unset -- $IMPORT_UNSET
				break
				## }}}
				;;
			$gv_Back)	# abbrechen
				unset -- $IMPORT_UNSET
				break
				;;
		esac
	done
}
## }}}
