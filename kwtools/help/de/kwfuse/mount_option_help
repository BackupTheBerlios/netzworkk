kwfuse::fusetab::Konfiguration::Mountoptionen::Hilfe

Dies sind die FUSE Mountoptionen fuer alle Dateisysteme.
Die Mountoptionen fmask und dmask sind nicht mit aufgefuehrt,
das sie aehnlich der Option umask sind bloss das sie nur fuer
Dateien oder nur fuer Verzeichnisse gelten.

-------------------allgemeine Mountoptionen---------------------
auto: Soll das Dateisystem beim starten des Rechners automatisch
        eingebunden werden (ja/nein)?

user: Darf ein Benutzer das Dateisystem ein/ausbinden (ja/nein)?

----------------------FUSE Mountoptionen------------------------
allow_other: Dies Option ueberschreibt den Sichherheitsmechanismus
        fuer den Dateisystemzugriff des Benutzer, der das Datei-
        system eingebunden hat. Duerfen alle Benutzer inclusive
        root Zugriff auf das Dateisystem haben (ja/nein)? Diese
        Option ist per Standard nur root erlaubt, aber man kann
        diese Richtlinie mit einer Konfigurationsoption in der
        /etc/fuse.conf umgehen (user_allow_other).

allow_root: Ist aehnlich der Option allow_other, aber es limitiert
        den Dateisystemzugriff auf root und dem Benutzer der das
        Dateisystem eingebunden hat. Soll diese Option aktiviert
        werden (ja/nein)? Diese Option und 'allow_other' schliessen 
        sich gegenseitig aus.

default_permissions: Per Standard prueft FUSE nicht die Dateisystem-
        rechte. Es wird dem Dateisystem ueberlassen, ob es eine
        Zugriffsrichtlinie aufstellt oder es dem darunterliegendem
        Datei Zugriffsmechanismus ueberlaesst. Diese Option schaltet
        die Ueberpruefung der Rechte auf Dateien ein. Besonders
        nuetzlich ist diese Option in Verbindung mit 'allow_other'

debug: Schaltet die Debug Informationen ein (ja/nein).

direct_io: Diese Option schaltet die Benutzung des Kernel Dateicache
        fuer das Dateisystem aus. Dies hat verschiedene Effekte:

        - Jeder read() oder write() System Aufruf initiiert ein
          oder mehrere Lese- oder Schreiboperationen, die Daten
          werden dabei nicht vom Kernel gecached.

        - Die Rueckgabewerte der read() und write() System Aufrufe
          korrespondieren mit den Rueckgabewerten der Lese- und 
          Screiboperationen. Dies ist sinnvoll, wenn zum Beispiel
          die Dateigroesse nicht bekannt ist, bevor die Datei
          gelesen wird (Bsp.: Netzwerk Dateisysteme).

fsname: Hier koennen Sie den Dateisystemnamen eingeben. Standard ist
        der Programmname.

gid: Ueberschreibt das 'st_gid' Feld, welches vom Dateisystem gesetzt
        wird. Setzt die Gruppen-ID der Dateien auf dem Dateisystem.

hard_remove: Wenn eine geoeffnete Datei geloescht wird, wird diese
        standardmaessig in eine versteckte Datei umbenannt
        (.fuse.hiddenXXX) und nur geloescht wenn die Datei wieder
        geschlossen wurde. Dies erleichtert die Dateisystem
        Implementierung, welche ein Problem damit hat. Diese Option
        schaltet das verstecken Verhalten von Dateien aus und
        loescht diese sofort, durch einen unlink Operation oder
		in einer rename Operation, welche eine existierende Datei
        ueberschreibt.

        Es wird vorgeschlagen diese Option nicht zu benuzten. Falls
        die Option hard_remove gesetzt wird fehlen folgende libc
		Funktionen (returning errno of ENOENT):
        - read()
        - write()
        - fsync()
        - close()
        - f*xattr()
        - ftruncate()
        - fstat()
        - fchmod()
        - fchown()

kernel_cache: Diese Option schaltet das Entleeren des Caches, mit
        dem Dateiinhalt, bei jedem open() System Aufruf aus. Diese
        Option sollte nur auf Dateisystemen eingesetzt werden, wo
        die Dateiinhalte niemals extern veraendert werden (nicht
        durch das eingebundene FUSE Dateisystem).
        Dadurch ist es nicht geeignet fuer Netzwerk Dateisysteme
        und anderen "zwischenschichtigen" Dateisystemen.

NOTIZ: Falls diese Option nicht spezifiert wird (und 'direct_io' 
        auch nicht) werden die Daten nach dem open() System Aufruf
        gecacht, so das ein read() System Aufruf nicht immer eine
        Leseoperation initiiert.

large_read: Problem bei grossen Lese Anfragen. Dies kann die
        Geschwindigkeit, auf einigen Dateisystemen verbessern, aber
		auch herabsetzen. Diese Option ist nur nuetzlich bei der
        Verendung von 2.4.X und 2.6.X Kerneln, die automatisch fuer
        die benoetigte Groesse ein Optimum an Geschwindigkeit be-
        stimmen.

max_read: Geben Sie bitte die maximale Groesse der Speicherseiten
        an, die fuer Leseoperationen genutzt werden sollen an (0 -
        32, 32=128Kb auf i386). Standard ist unbegrenzt.

nonempty: Darf das Laufwerk ueber einer nicht leeren Datei oder 
        Verzeichnis eingebunden werden (ja/nein)?. Per Standard wird
        dies abgelehnt (ab Version 2.3.1). Zum Beispiel koennten
        gerade automatische Backups in dieses Verzeichnis schreiben.

readdir_ino: Falls die Option 'use_ino' nicht gesetzt ist, wird
        versucht das 'd_ino' Feld in readdir() zu fuellen. Wenn
		der Name vorher nachgeschlagen wurde und er noch im Cache
        ist, wird die gefundene Inode Nummer benutzt. Ansonsten
        wird sie auf '-1' gesetzt. Ist die Option 'use_ino' gesetzt
        wird diese Option ignoriert.

uid: Ueberschreibt das 'st_uid' Feld, welches vom Dateisystem
        gesetzt wird. Setzt die Benutzer-ID der Dateien auf dem
        Dateisystem.

use_ino: Benutzung des 'st_ino' Feld in getattr() und fill_dir().
        Diese Werte werden benutzt um das 'st_ino' Feld in der
        stat()/lstat()/fstat() Funktionen und das 'd_ino' Feld in
        der readdir() Funktion zu belegen. Das Dateisystem gibt
        keine eindeutige Garantie, wie einige Anwendungen sich auf
        diese Werte verlassen, die fuer das ganze Dateisystem
        gelten.

umask: Ueberschreibt die Zugriffbits im 'st_mode' Feld, welches vom
        Dateisystem gesetzt wird. Sie muessen Oktalziffern benutzen
        (Bsp.: 0022 = rwxr-xr-x).
