# Funktion (kwpwsafe_manage_db), managed die Datenbanken von pwsafe.# {{{
#
# ###############################################
# TODO: Datenbanken mergen?
# ###############################################
#
# usage: kwpwsafe_manage_db
#
kwpwsafe_manage_db() {
	MANAGE_TITLE=$(gettext 'Datenbankverwaltung')
	#
	lv_Delete_Db=$(gettext 'Datenbank loeschen')
	lv_Export_Db=$(gettext 'Datenbank exportieren')
	lv_Import_Db=$(gettext 'Datenbank importieren')
	lv_Db_Name=$(gettext 'Datenbank-Name')
	lv_Passwd=$(gettext 'Passwort')
	OK_MSG=$(gettext 'Passwort wurde erfolgreich geaendert.')
	NOOK_MSG=$(gettext 'Das Passwort konnte nicht geaendert werden. Wiederholen?')
	INCORRECT_PW_DB_MSG=$(gettext 'Sie haben das falsche Passwort eingegeben. Wiederholen?')
	IMPORT_OK_MSG=$(gettext 'Der Import der Datenbank wurde erfolgreich durchgefuehrt.')
	IMPORT_NOOK_MSG=$(gettext 'Der Import der Datenbank ist fehlgschlagen.')
	#
	# Funktion (incorrect_6pass_length), falsche Passwortlaenge# {{{
	incorrect_6pass_length() {
		MSG=$(gettext 'Die Laenge des/der Passworts/Passphrase muss mindestens 6 Zeichen sein.')
		msgbox "$gv_Attention" "$MSG"
	}
	## }}}
	# Funktion (manage_db_menu)# {{{
	manage_db_menu() {
		MANAGE_DB_MENU=(\"$lv_Create_Db\" \"\"
		\"$lv_Export_Db\" \"\"
		\"$lv_Import_Db\" \"\"
		\"$lv_Change_Pw_Db\" \"\"
		\"$lv_Delete_Db\" \"\" $gv_Back \"\")
		if [[ ${#argv} == 1 ]] ; then
			menubox -d "$1" "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_DB_MENU"
		else
			menubox "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_DB_MENU"
		fi
	}
	## }}}
	# Funktion (create_db)# {{{
	#
	# usage: create_db
	create_db() {
		# Funktion (create_db_menu)# {{{
		create_db_menu() {
			CREATE_DB_MENU=(\"$lv_Db_Name\" \"$CR_PWSAFE\"
			\"$lv_Password\" \"$DB_PASSWD1\" $gv_Save \"\"
			\"$gv_Back\" \"\")
			menubox "$MANAGE_TITLE" "$gv_Menupoint" "$CREATE_DB_MENU"
		}
		## }}}
		create_db_menu
		while [ -n "$gv_Auswahl" ] ; do
			case "$gv_Auswahl" in
				HELP*)	script_help kwpwsafe_db_help
					create_db_menu
					;;
				$lv_Db_Name)
					# Datenbank Name eingeben# {{{
					MSG=$(gettext 'Geben Sie den Datenbank-Namen ohne Endung (*.dat) ein.')
					inputbox "$lv_Db_Name" "$MSG" "${CR_PWSAFE%.dat}"
					if [ -n "$gv_Auswahl" ] ; then
						# pruefen ob diese DB schon vorhanden ist.
						if [ ! -f "${LOCAL_PWSAFE_PATH}/${gv_Auswahl}.dat" ] ; then
							CR_PWSAFE="${gv_Auswahl}.dat"
						else
							MSG=$(gettext 'Die Datenbank ${gv_Auswahl}.dat ist schon vorhanden.')
							msgbox "$gv_Info" "$MSG"
							CR_PWSAFE=""
						fi
					else
						CR_PWSAFE=""
					fi
					## }}}
					create_db_menu
					;;
				$lv_Password)
					# Passwort eingeben# {{{
					# Funktion (passwd_db_menu)# {{{
					passwd_db_menu() {
						PASSWD_DB_MSG=$(gettext 'Geben Sie ein Passwort ein. Nehmen Sie am besten unterschiedliche Zeichen in Gross- und Kleinschreibung. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
						PASSWD_DB_MENU=(\"$gv_New_Passwd\" "1 1 \"\" 1 20 20 0 1"
						\"$gv_New_Passwd\" "2 1 \"\" 2 20 20 0 1")
						mixedform -i "$MANAGE_TITLE" "$PASSWD_DB_MSG" "$PASSWD_DB_MENU"
					}
					## }}}
					passwd_db_menu
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								passwd_db_menu
								;;
							*)
								# Passwoerter pruefen und evtl. uebernehmen.# {{{
								Anz="${(w)#gv_Auswahl}"
								NPW="${${(ws: :)${=gv_Auswahl}}[1]}"
								NNPW="${${(ws: :)${=gv_Auswahl}}[2]}"
								if [ "$Anz" -eq 2 ] ; then
									if [ "$NPW" = "$NNPW" ] ; then
										Char="${(c)#NPW}"
										if [ "$Char" -ge 6 ] ; then
											password_display "$NPW"
											DB_PASSWD1="$gv_Star_Passphrase"
											unset -- gv_Star_Passphrase
											DB_PASSWD="$NPW" 
											break
										else
											# falsche Password Laenge
											incorrect_6pass_length
											passwd_db_menu
										fi
									else
										different_passwd
										passwd_db_menu
									fi
								else
									input_all_field_msg
									passwd_db_menu
								fi
								## }}}
								;;
						esac
					done
					## }}}
					create_db_menu
					;;
				$gv_Save)
					# Pruefen ob Datenbank-Name und Passwort eingegeben sind# {{{
					if [ -n "$CR_PWSAFE" -a -n "$DB_PASSWD" ] ; then
						# expect mit der Einstellungsdatei ausfuehren
						> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$DB_PASSWD\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --createdb -f ${LOCAL_PWSAFE_PATH}/${CR_PWSAFE}
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect \"Reenter .*: \"
send -- \"\$db_pass\r\"
stty echo
expect eof"
						(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || (del_expect ; prog_failure)
						# schnell die Erstellungsdatei loeschen
						del_expect
						# Variablen loeschen
						unset -- DB_PASSWD CR_PWSAFE
						break
					else
						MSG=$(gettext 'Sie muessen erst die Menuepunkte $lv_Db_Name und $lv_Password mit einem Wert belegen.')
						msgbox "$gv_Info" "$MSG"
						create_db_menu
					fi
					## }}}
					;;
				$gv_Back)	# zurueck ohne speichern
					# Variablen loeschen
					unset -- DB_PASSWD CR_PWSAFE
					break
					;;
			esac
		done
	}
	## }}}
	manage_db_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help kwpwsafe_db_help
				manage_db_menu
				;;
			$lv_Create_Db)
				# Datenbank erstellen# {{{
				create_db
				## }}}
				manage_db_menu $lv_Create_Db
				;;
			"$lv_Export_Db")
				# Datenbank exportieren# {{{
				list_db
				if [[ -n ${DB_FILES[1]} ]] ; then
					EX_MENU=($DB_FILES)
					EX_MSG=$(gettext 'Waehlen Sie eine Datenbank zum exportieren aus. Diese wird im Klartext gespeichert.')
					menubox "$MANAGE_TITLE" "$EX_MSG" "$EX_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "$MANAGE_TITLE" "$EX_MSG" "$EX_MENU"
								;;
							*)	# Auswahl uebernehmen und exportieren
								Db_Choice="$gv_Auswahl"
								# Passphrase eingeben
								pass_input "$Db_Choice"
								if [ ! -z "$DB_PASS" ] ; then
									Db_Choice_Ex="`print ${gv_Auswahl}(:r)`"
									echo "$DB_PASS" | pwsafe --exportdb -f $Db_Choice > ${Db_Choice_Ex}.txt
									# Passphrase loeschen
									unset -- DB_PASS
								fi
								break
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu "$lv_Export_Db"
				;;
			"$lv_Import_Db")
				# Datenbank importieren# {{{
				list_db
				if [[ -n ${DB_FILES[1]} ]] ; then
					IM_MENU=($DB_FILES)
					IM_MSG=$(gettext 'Waehlen Sie eine Datenbank aus in Sie eine andere Datenbank importieren moechten.')
					menubox "$MANAGE_TITLE" "$IM_MSG" "$IM_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "$MANAGE_TITLE" "$IM_MSG" "$IM_MENU"
								;;
							*)	# Auswahl uebernehmen und exportieren
								Db_Choice="$gv_Auswahl"
								# zu importierende Datenbank auswaehlen
								fselect "$LOCAL_PWSAFE_PATH"
								if [[ -f $gv_Auswahl ]] ; then
									Db_Import="$gv_Auswahl"
									# Passphrase eingeben
									# Funktion (db_import_pass_menu)# {{{
									db_import_pass_menu() {
										DB_IMPORT_PASS_MSG=$(gettext 'Geben Sie hier die Passwoerter fuer die beiden Datenbanken ein. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
										DB_IMPORT_PASS_MENU=(\"$lv_Db\" "1 1 \"${Db_Choice##*/}\" 1 20 20 0 2"
										\"$lv_Passwd\" "2 1 \"\" 2 20 20 0 1"
										\"$lv_Db\" "3 1 \"${Db_Import##*/}\" 3 20 20 0 2"
										\"$lv_Passwd\" "4 1 \"\" 4 20 20 0 1")
										mixedform -i "$MANAGE_TITLE" "$DB_IMPORT_PASS_MSG" "$DB_IMPORT_PASS_MENU"
									}
									## }}}
									db_import_pass_menu
									while [[ -n $gv_Auswahl ]] ; do
										case "$gv_Auswahl" in
											HELP*)	script_help kwpwsafe_db_help
												db_import_pass_menu
												;;
											*)	# Auswahl uebernehmen
												Anz="${(w)#gv_Auswahl}"
												PW="${${(ws: :)${=gv_Auswahl}}[2]}"
												IPW="${${(ws: :)${=gv_Auswahl}}[4]}"
												if [ "$Anz" -eq 4 ] ; then
													# Falls die Paswoerter der Datenbank gleich sind
													# wird eine andere expect-Datei erstellt.
													if [ "$PW" = "$IPW" ] ; then
														# gleiche Passwoerter# {{{
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$PW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --mergedb="$Db_Import" -f $Db_Choice
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null)
														## }}}
													else
														# ungleiche Passwoerter# {{{
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$PW\"
set db_import_pass \"$IPW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --mergedb="$Db_Import" -f $Db_Choice
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect \"Enter passphrase .*: \"
send -- \"\$db_import_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null)
														## }}}
													fi
													# Exit Code ueberpruefen# {{{
													case "$?" in
														10)
															yesno "$gv_Attention" "$INCORRECT_PW_DB_MSG"
															if [ "$?" = 0 ] ; then
																db_import_pass_menu
															else
																# schnell die Erstellungsdatei loeschen
																unset -- PW IPW
																del_expect
																break 2
															fi
															;;
														0)
															# Import durch gefuehrt
															msgbox "$gv_Info" "$IMPORT_OK_MSG"
															unset -- PW IPW
															del_expect
															break 2
															;;
														*)
															msgbox "$gv_Attention" "$IMPORT_NOOK_MSG"
															unset -- PW IPW
															del_expect
															break 2
															;;
													esac
													## }}}
												else
													# Nachricht das alle Felder belegt sein muessen.
													input_all_field_msg
													db_import_pass_menu
												fi
												;;
										esac
									done
								else
									no_input_msg
									break
								fi
								;;
						esac
					done
				else
					no_db_msg
				fi
				
				## }}}
				manage_db_menu "$lv_Import_Db"
				;;
			$lv_Change_Pw_Db)
				# Datenbank Passwort aendern# {{{
				list_db
				if [ -n "$DB_FILES" ] ; then
					PW_MENU=($DB_FILES)
					menubox "$MANAGE_TITLE" "$DB_MSG" "$PW_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "$MANAGE_TITLE" "$DB_MSG" "$PW_MENU"
								;;
							*)
								# Passwort aendern# {{{
								DB_CHANGE="$gv_Auswahl"
								# Funktion (db_change_pass_menu)# {{{
								db_change_pass_menu() {
									DB_CHANGE_PASS_MSG=$(gettext 'Geben Sie hier erst das alte Passwort und dann in wiederholter Form das neue Passwort fuer die Datenbank ein. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
									DB_CHANGE_PASS_MENU=(\"$gv_Old_Passwd\" "1 1 \"\" 1 20 20 0 1"
									\"$gv_New_Passwd\" "2 1 \"\" 2 20 20 0 1"
									\"$gv_New_Passwd\" "3 1 \"\" 3 20 20 0 1")
									mixedform -i "$MANAGE_TITLE" "$DB_CHANGE_PASS_MSG" "$DB_CHANGE_PASS_MENU"
								}
								## }}}
								db_change_pass_menu
								while [[ -n $gv_Auswahl ]] ; do
									case "$gv_Auswahl" in
										HELP*)	script_help kwpwsafe_db_help
											db_change_pass_menu
											;;
										*)	# Auswahl uebernehmen
											Anz="${(w)#gv_Auswahl}"
											OPW="${${(ws: :)${=gv_Auswahl}}[1]}"
											NPW="${${(ws: :)${=gv_Auswahl}}[2]}"
											NNPW="${${(ws: :)${=gv_Auswahl}}[3]}"
											if [ "$Anz" -eq 3 ] ; then
												if [ "$NPW" = "$NNPW" ] ; then
													Char="${(c)#NPW}"
													if [ "$Char" -ge 6 ] ; then
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_old_pass \"$OPW\"
set db_new_pass \"$NPW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --passwd -f $DB_CHANGE
expect \"Enter passphrase .*: \"
send -- \"\$db_old_pass\r\"
expect \"Enter new .*: \"
send -- \"\$db_new_pass\r\"
expect \"Reenter new .*: \"
send -- \"\$db_new_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null)
														# EXIT Wert uerberpruefen# {{{
														case "$?" in
															10)
																yesno "$gv_Attention" "$INCORRECT_PW_DB_MSG"
																if [ "$?" = 0 ] ; then
																	db_change_pass_menu
																else
																	# schnell die Erstellungsdatei loeschen
																	del_expect
																	break 2
																fi
																;;
															0)
																# Passwort geaendert
																msgbox "$gv_Info" "$OK_MSG"
																del_expect
																break 2
																;;
															*)
																yesno "$gv_Attention" "$NOOK_MSG"
																if [ "$?" = 0 ] ; then
																	db_change_pass_menu
																else
																	del_expect
																	break 2
																fi
																;;
														esac
														## }}}
													else
														# falsche Password Laenge
														incorrect_6pass_length
														db_change_pass_menu
													fi
												else
													different_passwd
													db_change_pass_menu
												fi
											else
												# Nachricht das alle Felder belegt sein muessen.
												input_all_field_msg
												db_change_pass_menu
											fi
											;;
									esac
								done
								## }}}
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu $lv_Change_Pw_Db
				;;
			"$lv_Delete_Db")
				# Datenbank loeschen# {{{
				list_db
				if [[ -n ${DB_FILES_DEL_M[1]} ]] ; then
					DEL_MENU=($DB_FILES_DEL_M)
					checklist "$MANAGE_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								checklist "$MANAGE_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
								;;
							*)	# Auswahl uebernehmen und loeschen (auch das Backup)
								for i in ${=gv_Auswahl} ; {
									rm -f $i ${i}~ &>/dev/null
								}
								break
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu "$lv_Delete_Db"
				;;
			$gv_Back)
				# zurueck
				break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
