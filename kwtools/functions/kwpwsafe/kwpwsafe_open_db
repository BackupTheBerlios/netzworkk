# Funktion (kwpwsafe_open_db), Eine Datenbank auswaehlen, oeffnen und Eintrage verwalten.# {{{
#
kwpwsafe_open_db() {
	select_db
	if [ -n "$DB_PASS" ] ; then
		autoload -U kwpwsafe_db_conf
		#
		lv_Group_Create=$(gettext 'Gruppe anlegen')
		lv_Name=$(gettext 'Name')
		lv_Password_Gen=$(gettext 'Passwort generieren')
		lv_Notes=$(gettext 'Notiz')
		#
		DATA_MSG=$(gettext 'Waehlen Sie einen Eintrag aus der Liste der Datenbank $DB_FILE.')
		OPEN_DB_TITLE="$lv_Db::${DB_FILE##*/}"
		# Auswahl Abfrage, eingabe, aendern, loeschen
		# Funktionen (open_db_menu)# {{{
		#
		open_db_menu() {
			OPEN_DB_MENU=($gv_Display \"\" $gv_Create \"\"
			$gv_Change \"\" $gv_Delete \"\" $gv_Back \"\")
			menubox "$OPEN_DB_TITLE" "$gv_Menupoint" "$OPEN_DB_MENU"
		}
		## }}}
		open_db_menu
		while [ -n "$gv_Auswahl" ] ; do
			case "$gv_Auswahl" in
				HELP*)	script_help kwpwsafe_open_db_help
					open_db_menu
					;;
				$gv_Display)
					# Daten abfragen# {{{
					read_pwsafe_entry "$DB_FILE"
					if [ -n "${PW_ENTRY[1]}" ] ; then
						DATA_MENU=($PW_ENTRY)
						menubox "$OPEN_DB_TITLE" "$DATA_MSG" "$DATA_MENU"
						while [ -n "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)	script_help kwpwsafe_list_help
									menubox "$OPEN_DB_TITLE" "$DATA_MSG" "$DATA_MENU"
									;;
								*)
									# Wert uebernehmen
									read_pwsafe_data "$DB_FILE" "$gv_Auswahl"
									if [ -n "$PW_NAME" -o -n "$PW_GROUP" ] ; then
										MSG="${lv_Name}:	$PW_NAME
${gv_Group}:	$PW_GROUP
${gv_User}:	$PW_USER
${gv_Passwd}:	$PW_PASSWD
${lv_Notes}:
`print $PW_NOTES | tr '\012' '\n'`"
										msgbox "$OPEN_DB_TITLE" "$MSG"
									else
										# keine Daten verfuegbar
										no_entry_msg
									fi
									# Werte wieder loeschen
									unset -- PW_PASSWD PW_LOGIN PW_NOTES PW_NAME PW_GROUP
									break
									;;
							esac
						done
					else
						no_entry_msg
					fi
					## }}}
					open_db_menu
					;;
				$gv_Create)
					# Eintrag erstellen# {{{
					unset -- PW_NAME PW_GROUP PW_USER PW_PASSWD PW_NOTES
					kwpwsafe_db_conf
					#}}}
					open_db_menu
					;;
				$gv_Change)
					# Eintrag aendern# {{{
					read_pwsafe_entry "$DB_FILE"
					if [ -n "${PW_ENTRY[1]}" ] ; then
						CHANGE_MENU=($PW_ENTRY)
						menubox "$OPEN_DB_TITLE" "$DATA_MSG" "$CHANGE_MENU"
						while [ -n "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)	script_help kwpwsafe_list_help
									menubox "$OPEN_DB_TITLE" "$DATA_MSG" "$CHANGE_MENU"
									;;
								*)	# Auswahl einlesen
									CHANGE=yes
									read_pwsafe_data "$DB_FILE" "$gv_Auswahl"
									if [ -n "$PW_NAME" -o -n "$PW_GROUP" ] ; then
										kwpwsafe_db_conf
									else
										# keine Daten verfuegbar
										no_entry_msg
									fi
									CHANGE=""
									break
									#pwsafe -e "$gv_Auswahl" -f "$DB_FILE" || prog_failure
									;;
							esac
						done
					else
						no_entry_msg
					fi
					## }}}
					open_db_menu
					;;
				$gv_Delete)
					# Eintraege loeschen# {{{
					read_pwsafe_entry "$DB_FILE"
					if [ -n "${PW_ENTRY_M[1]}" ] ; then
						DEL_MENU=($PW_ENTRY_M)
						checklist "$OPEN_DB_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
						while [ -n "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)	script_help kwpwsafe_list_help
									checklist "$OPEN_DB_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
									;;
								*)
									# Auswahl loeschen
									for i in ${=gv_Auswahl} ; {
										echo "$DB_PASS" | pwsafe --delete "$i" -f "$DB_FILE" 1>/dev/null || prog_failure
									}
									break
									;;
							esac
						done
					else
						no_entry_msg
					fi
					## }}}
					open_db_menu
					;;
				$gv_Back)	break
					;;
			esac
		done
	fi
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
