# Haupt Konfiguration einstellen{{{
haupt_conf() {
autoload -U no_defer_msg
# Bestehende Konfiguration einlesen{{{
two_bounce_notice_recipient="`postconf -h -c $MAIL_CONFIG 2bounce_notice_recipient`"
alias_database="`postconf -h -c $MAIL_CONFIG alias_database`" 
alias_maps="`postconf -h -c $MAIL_CONFIG alias_maps`" 
allow_mail_to_commands="`postconf -h -c $MAIL_CONFIG allow_mail_to_commands`"
allow_mail_to_files="`postconf -h -c $MAIL_CONFIG allow_mail_to_files`"
allow_min_user="`postconf -h -c $MAIL_CONFIG allow_min_user`"
allow_percent_hack="`postconf -h -c $MAIL_CONFIG allow_percent_hack`" 
allow_untrusted_routing="`postconf -h -c $MAIL_CONFIG allow_untrusted_routing`"
alternate_config_directories="`postconf -h -c $MAIL_CONFIG alternate_config_directories`"
always_bcc="`postconf -h -c $MAIL_CONFIG always_bcc`"
append_at_myorigin="`postconf -h -c $MAIL_CONFIG append_at_myorigin`" 
append_dot_mydomain="`postconf -h -c $MAIL_CONFIG append_dot_mydomain`" 
best_mx_transport="`postconf -h -c $MAIL_CONFIG best_mx_transport`"
biff="`postconf -h -c $MAIL_CONFIG biff`"
body_checks="`postconf -h -c $MAIL_CONFIG body_checks`" 
body_checks_size_limit="`postconf -h -c $MAIL_CONFIG body_checks_size_limit`" 
bounce_notice_recipient="`postconf -h -c $MAIL_CONFIG bounce_notice_recipient`"
bounce_size_limit="`postconf -h -c $MAIL_CONFIG bounce_size_limit`"
broken_sasl_auth_clients="`postconf -h -c $MAIL_CONFIG broken_sasl_auth_clients`"
canonical_maps="`postconf -h -c $MAIL_CONFIG canonical_maps`" 
command_directory="`postconf -h -c $MAIL_CONFIG command_directory`"
command_time_limit="`postconf -h -c $MAIL_CONFIG command_time_limit`"
config_directory="`postconf -h -c $MAIL_CONFIG config_directory`"
content_filter="`postconf -h -c $MAIL_CONFIG content_filter`"
daemon_directory="`postconf -h -c $MAIL_CONFIG daemon_directory`"
daemon_timeout="`postconf -h -c $MAIL_CONFIG daemon_timeout`"
debug_peer_level="`postconf -h -c $MAIL_CONFIG debug_peer_level`" 
debug_peer_list="`postconf -h -c $MAIL_CONFIG debug_peer_list`" 
defer_transports="`postconf -h -c $MAIL_CONFIG defer_transports`"
delay_notice_recipient="`postconf -h -c $MAIL_CONFIG delay_notice_recipient`"
delay_warning_time="`postconf -h -c $MAIL_CONFIG delay_warning_time`"
deliver_lock_attempts="`postconf -h -c $MAIL_CONFIG deliver_lock_attempts`"
deliver_lock_delay="`postconf -h -c $MAIL_CONFIG deliver_lock_delay`"
disable_dns_lookups="`postconf -h -c $MAIL_CONFIG disable_dns_lookups`"
disable_verp_bounces="`postconf -h -c $MAIL_CONFIG disable_verp_bounces`"
disable_vrfy_command="`postconf -h -c $MAIL_CONFIG disable_vrfy_command`"
double_bounce_sender="`postconf -h -c $MAIL_CONFIG double_bounce_sender`"
duplicate_filter_limit="`postconf -h -c $MAIL_CONFIG duplicate_filter_limit`"
empty_address_recipient="`postconf -h -c $MAIL_CONFIG empty_address_recipient`"
error_notice_recipient="`postconf -h -c $MAIL_CONFIG error_notice_recipient`"
expand_owner_alias="`postconf -h -c $MAIL_CONFIG expand_owner_alias`"
export_environment="`postconf -h -c $MAIL_CONFIG export_environment`"
fallback_transport="`postconf -h -c $MAIL_CONFIG fallback_transport`"
fast_flush_domains="`postconf -h -c $MAIL_CONFIG fast_flush_domains`" 
fast_flush_purge_time="`postconf -h -c $MAIL_CONFIG fast_flush_purge_time`"
fast_flush_refresh_time="`postconf -h -c $MAIL_CONFIG fast_flush_refresh_time`"
fault_injection_code="`postconf -h -c $MAIL_CONFIG fault_injection_code`"
fork_attempts="`postconf -h -c $MAIL_CONFIG fork_attempts`"
fork_delay="`postconf -h -c $MAIL_CONFIG fork_delay`"
forward_path="`postconf -h -c $MAIL_CONFIG forward_path | sed -e 's#\\$#\\\\$#g'`"
hash_queue_depth="`postconf -h -c $MAIL_CONFIG hash_queue_depth`"
hash_queue_names="`postconf -h -c $MAIL_CONFIG hash_queue_names`"
header_checks="`postconf -h -c $MAIL_CONFIG header_checks`" 
header_size_limit="`postconf -h -c $MAIL_CONFIG header_size_limit`"
home_mailbox="`postconf -h -c $MAIL_CONFIG home_mailbox`"
hopcount_limit="`postconf -h -c $MAIL_CONFIG hopcount_limit`"
ignore_mx_lookup_error="`postconf -h -c $MAIL_CONFIG ignore_mx_lookup_error`"
import_environment="`postconf -h -c $MAIL_CONFIG import_environment`"
in_flow_delay="`postconf -h -c $MAIL_CONFIG in_flow_delay`"
inet_interfaces="`postconf -h -c $MAIL_CONFIG inet_interfaces`"
initial_destination_concurrency="`postconf -h -c $MAIL_CONFIG initial_destination_concurrency`"
ipc_idle="`postconf -h -c $MAIL_CONFIG ipc_idle`"
ipc_timeout="`postconf -h -c $MAIL_CONFIG ipc_timeout`"
line_length_limit="`postconf -h -c $MAIL_CONFIG line_length_limit`"
local_command_shell="`postconf -h -c $MAIL_CONFIG local_command_shell`"
local_destination_concurrency_limit="`postconf -h -c $MAIL_CONFIG local_destination_concurrency_limit`" 
local_destination_recipient_limit="`postconf -h -c $MAIL_CONFIG local_destination_recipient_limit`" 
local_recipient_maps="`postconf -h -c $MAIL_CONFIG local_recipient_maps`" 
local_transport="`postconf -h -c $MAIL_CONFIG local_transport`"
luser_relay="`postconf -h -c $MAIL_CONFIG luser_relay`"
maps_rbl_domains="`postconf -h -c $MAIL_CONFIG maps_rbl_domains`"
masquerade_classes="`postconf -h -c $MAIL_CONFIG masquerade_classes`" 
masquerade_domains="`postconf -h -c $MAIL_CONFIG masquerade_domains`" 
masquerade_exceptions="`postconf -h -c $MAIL_CONFIG masquerade_exceptions`" 
max_idle="`postconf -h -c $MAIL_CONFIG max_idle`"
max_use="`postconf -h -c $MAIL_CONFIG max_use`"
maximal_backoff_time="`postconf -h -c $MAIL_CONFIG maximal_backoff_time`"
maximal_queue_lifetime="`postconf -h -c $MAIL_CONFIG maximal_queue_lifetime`"
message_size_limit="`postconf -h -c $MAIL_CONFIG message_size_limit`"
minimal_backoff_time="`postconf -h -c $MAIL_CONFIG minimal_backoff_time`"
mime_header_checks="`postconf -h -c $MAIL_CONFIG mime_header_checks`" 
mydestination="`postconf -h -c $MAIL_CONFIG mydestination`" 
mydomain="`postconf -h -c $MAIL_CONFIG mydomain`" 
myhostname="`postconf -h -c $MAIL_CONFIG myhostname`" 
mynetworks_style="`postconf -h -c $MAIL_CONFIG mynetworks_style`"
mynetworks="`postconf -h -c $MAIL_CONFIG mynetworks`"
myorigin="`postconf -h -c $MAIL_CONFIG myorigin`" 
nested_header_checks="`postconf -h -c $MAIL_CONFIG nested_header_checks`" 
notify_classes="`postconf -h -c $MAIL_CONFIG notify_classes`"
owner_request_special="`postconf -h -c $MAIL_CONFIG owner_request_special`"
parent_domain_matches_subdomains="`postconf -h -c $MAIL_CONFIG parent_domain_matches_subdomains`"
permit_mx_backup_networks="`postconf -h -c $MAIL_CONFIG permit_mx_backup_networks`"
prepend_delivered_header="`postconf -h -c $MAIL_CONFIG prepend_delivered_header`"
process_id_directory="`postconf -h -c $MAIL_CONFIG process_id_directory`"
propagate_unmatched_extensions="`postconf -h -c $MAIL_CONFIG propagate_unmatched_extensions`"
recipient_bcc_maps="`postconf -h -c $MAIL_CONFIG recipient_bcc_maps`" 
recipient_canonical_maps="`postconf -h -c $MAIL_CONFIG recipient_canonical_maps`" 
recipient_delimiter="`postconf -h -c $MAIL_CONFIG recipient_delimiter`" 
relay_clientcerts="`postconf -h -c $MAIL_CONFIG relay_clientcerts`"
relay_destination_concurrency_limit="`postconf -h -c $MAIL_CONFIG relay_destination_concurrency_limit`" 
relay_destination_recipient_limit="`postconf -h -c $MAIL_CONFIG relay_destination_recipient_limit`" 
relay_domains="`postconf -h -c $MAIL_CONFIG relay_domains`" 
relayhost="`postconf -h -c $MAIL_CONFIG relayhost`" 
relay_recipient_maps="`postconf -h -c $MAIL_CONFIG relay_recipient_maps`" 
relocated_maps="`postconf -h -c $MAIL_CONFIG relocated_maps`" 
require_home_directory="`postconf -h -c $MAIL_CONFIG require_home_directory`"
sender_bcc_maps="`postconf -h -c $MAIL_CONFIG sender_bcc_maps`" 
sender_canonical_maps="`postconf -h -c $MAIL_CONFIG sender_canonical_maps`" 
service_throttle_time="`postconf -h -c $MAIL_CONFIG service_throttle_time`"
setgid_group="`postconf -h -c $MAIL_CONFIG setgid_group`" 
soft_bounce="`postconf -h -c $MAIL_CONFIG soft_bounce`"
stale_lock_time="`postconf -h -c $MAIL_CONFIG stale_lock_time`"
strict_rfc821_envelopes="`postconf -h -c $MAIL_CONFIG strict_rfc821_envelopes`"
sun_mailtool_compatibility="`postconf -h -c $MAIL_CONFIG sun_mailtool_compatibility`"
swap_bangpath="`postconf -h -c $MAIL_CONFIG swap_bangpath`"
syslog_facility="`postconf -h -c $MAIL_CONFIG syslog_facility`"
syslog_name="`postconf -h -c $MAIL_CONFIG syslog_name`"
transport_maps="`postconf -h -c $MAIL_CONFIG transport_maps`"
transport_retry_time="`postconf -h -c $MAIL_CONFIG transport_retry_time`"
undisclosed_recipients_header="`postconf -h -c $MAIL_CONFIG undisclosed_recipients_header`"
verp_delimiter_filter="`postconf -h -c $MAIL_CONFIG verp_delimiter_filter`"
#}}}
# die Haupt-Parameter einstellen{{{
# Funktion haupt_konf_menue
#
MAINCF_TITLE=$(gettext 'Konfiguration::Haupt')
conf_haupt_menue() {
	MAINCF_MENU=(2bounce_notice_recipient \"$two_bounce_notice_recipient\"
	alias_database \"\$alias_database\"
	alias_maps \"\$alias_maps\"
	allow_mail_to_commands \"$allow_mail_to_commands\"
	allow_mail_to_files \"$allow_mail_to_files\"
	allow_min_user \"$allow_min_user\"
	allow_percent_hack \"$allow_percent_hack\"
	allow_untrusted_routing \"$allow_untrusted_routing\"
	alternate_config_directories \"$alternate_config_directories\"
	always_bcc \"$always_bcc\"
	append_at_myorigin \"$append_at_myorigin\"
	append_dot_mydomain \"$append_dot_mydomain\"
	best_mx_transport \"$best_mx_transport\"
	biff \"$biff\"
	body_checks \"\$body_checks\"
	body_checks_size_limit \"$body_checks_size_limit\"
	bounce_notice_recipient \"$bounce_notice_recipient\"
	bounce_size_limit \"$bounce_size_limit\"
	broken_sasl_auth_clients \"$broken_sasl_auth_clients\"
	canonical_maps \"\$canonical_maps\"
	command_directory \"$command_directory\"
	command_time_limit \"$command_time_limit\"
	config_directory \"$config_directory\"
	content_filter \"$content_filter\"
	daemon_directory \"$daemon_directory\"
	daemon_timeout \"$daemon_timeout\"
	debug_peer_level \"$debug_peer_level\"
	debug_peer_list \"$debug_peer_list\"
	defer_transports \"$defer_transports\"
	delay_notice_recipient \"$delay_notice_recipient\"
	delay_warning_time \"$delay_warning_time\"
	deliver_lock_attempts \"$deliver_lock_attempts\"
	deliver_lock_delay \"$deliver_lock_delay\"
	disable_dns_lookups \"$disable_dns_lookups\"
	disable_verp_bounces \"$disable_verp_bounces\"
	disable_vrfy_command \"$disable_vrfy_command\"
	double_bounce_sender \"$double_bounce_sender\"
	duplicate_filter_limit \"$duplicate_filter_limit\"
	empty_address_recipient \"$empty_address_recipient\"
	error_notice_recipient \"$error_notice_recipient\"
	expand_owner_alias \"$expand_owner_alias\"
	export_environment \"$export_environment\"
	fallback_transport \"$fallback_transport\"
	fast_flush_domains \"\$fast_flush_domains\"
	fast_flush_purge_time \"$fast_flush_purge_time\"
	fast_flush_refresh_time \"$fast_flush_refresh_time\"
	fault_injection_code \"$fault_injection_code\"
	fork_attempts \"$fork_attempts\"
	fork_delay \"$fork_delay\"
	forward_path \"$forward_path\"
	hash_queue_depth \"$hash_queue_depth\"
	hash_queue_names \"$hash_queue_names\"
	header_checks \"\$header_checks\"
	header_size_limit \"$header_size_limit\"
	home_mailbox \"$home_mailbox\"
	hopcount_limit \"$hopcount_limit\"
	ignore_mx_lookup_error \"$ignore_mx_lookup_error\"
	import_environment \"$import_environment\"
	in_flow_delay \"$in_flow_delay\"
	inet_interfaces \"$inet_interfaces\"
	initial_destination_concurrency \"$initial_destination_concurrency\"
	ipc_idle \"$ipc_idle\"
	ipc_timeout \"$ipc_timeout\"
	line_length_limit \"$line_length_limit\"
	local_command_shell \"$local_command_shell\"
	local_destination_concurrency_limit \"$local_destination_concurrency_limit\"
	local_destination_recipient_limit \"$local_destination_recipient_limit\"
	local_recipient_maps \"\$local_recipient_maps\"
	local_transport \"$local_transport\"
	luser_relay \"\$luser_relay\"
	maps_rbl_domains \"$maps_rbl_domains\"
	masquerade_classes \"$masquerade_classes\"
	masquerade_domains \"$masquerade_domains\"
	masquerade_exceptions \"$masquerade_exceptions\"
	max_idle \"$max_idle\"
	max_use \"$max_use\"
	maximal_backoff_time \"$maximal_backoff_time\"
	maximal_queue_lifetime \"$maximal_queue_lifetime\"
	message_size_limit \"$message_size_limit\"
	minimal_backoff_time \"$minimal_backoff_time\"
	mime_header_checks \"\$mime_header_checks\"
	mydestination \"$mydestination\"
	mydomain \"$mydomain\"
	myhostname \"$myhostname\"
	mynetworks \"\$mynetworks\"
	mynetworks_style \"$mynetworks_style\"
	myorigin \"$myorigin\"
	nested_header_checks \"\$nested_header_checks\"
	notify_classes \"$notify_classes\"
	owner_request_special \"$owner_request_special\"
	parent_domain_matches_subdomains \"$parent_domain_matches_subdomains\"
	permit_mx_backup_networks \"$permit_mx_backup_networks\"
	prepend_delivered_header \"$prepend_delivered_header\"
	process_id_directory \"$process_id_directory\"
	propagate_unmatched_extensions \"$propagate_unmatched_extensions\"
	recipient_bcc_maps \"\$recipient_bcc_maps\"
	recipient_canonical_maps \"\$recipient_canonical_maps\"
	recipient_delimiter \"$recipient_delimiter\"
	relay_clientcerts \"$relay_clientcerts\"
	relay_destination_concurrency_limit \"$relay_destination_concurrency_limit\"
	relay_destination_recipient_limit \"$relay_destination_recipient_limit\"
	relay_domains \"\$relay_domains\"
	relayhost \"$relayhost\"
	relay_recipient_maps \"\$relay_recipient_maps\"
	relocated_maps \"\$relocated_maps\"
	require_home_directory \"$require_home_directory\"
	sender_bcc_maps \"\$sender_bcc_maps\"
	sender_canonical_maps \"\$sender_canonical_maps\"
	service_throttle_time \"$service_throttle_time\"
	setgid_group \"$setgid_group\"
	soft_bounce \"$soft_bounce\"
	stale_lock_time \"$stale_lock_time\"
	strict_rfc821_envelopes \"$strict_rfc821_envelopes\"
	sun_mailtool_compatibility \"$sun_mailtool_compatibility\"
	swap_bangpath \"$swap_bangpath\"
	syslog_facility \"$syslog_facility\"
	syslog_name \"$syslog_name\"
	transport_maps \"\$transport_maps\"
	transport_retry_time \"$transport_retry_time\"
	undisclosed_recipients_header \"$undisclosed_recipients_header\"
	verp_delimiter_filter \"$verp_delimiter_filter\"
	postfix \"reload\"
	$gv_Back \"\")
	menubox "$MAINCF_TITLE" "$gv_Menupoint" "$MAINCF_MENU"
}
#}}}
# Funktion no_postfix_prog_dir_msg# {{{
no_postfix_prog_dir_msg() {
	MSG=$(gettext 'In diesem Verzeichnis ($VERZ) liegen keine Postfix Programme.')
	msgbox "$gv_Attention" "$MSG"
}
## }}}
#
conf_haupt_menue
while [ "$gv_Auswahl" ] ; do
	case "$gv_Auswahl" in
		HELP*)	script_help haupt_help
			conf_haupt_menue
			;;
		2bounce_notice_recipient)
			# Zieladresse fuer Double Bounces{{{
			TWO_BOUNCE_NOTICE_RECIPIENT_MSG=$(gettext 'Geben Sie eine Zieladresse fuer Double Bounces ein (postmaster).')
			inputbox "$MAINCF_TITLE" "$TWO_BOUNCE_NOTICE_RECIPIENT_MSG" "$two_bounce_notice_recipient"
			if [ "$gv_Auswahl" ] ; then
				two_bounce_notice_recipient="$gv_Auswahl"
				postconf -e 2bounce_notice_recipient="$gv_Auswahl"
			else
				two_bounce_notice_recipient=""
				postconf -e 2bounce_notice_recipient=""
			fi
			#}}}
			conf_haupt_menue
			;;
		alias_maps)
			# Tabellen fuer Mailaliase{{{
			tab_support_wahl "$gv_Auswahl"
			alias_maps="$MAPS"
			postconf -e alias_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		alias_database)
			# Bestimmt, welche Tabelle mit dem Befehl newaliases erzeugt wird.{{{
			tab_support_wahl "$gv_Auswahl"
			alias_database="$MAPS"
			postconf -e alias_database="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		allow_mail_to_commands)
			# Auswahl der Tabellen in denen Mails an Programme umgelenkt werden duerfen{{{
			generate_is_file "${allow_mail_to_commands//,/}"
			is_value "alias forward include"
			#
			U_OPT=k
			checklist "$MAINCF_TITLE" "$gv_Menupoint" "$VALUE_ARRAY" "$allow_mail_to_commands"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*) script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$gv_Menupoint" "$VALUE_ARRAY" "$allow_mail_to_commands"
						;;
					*)	# uebernehmen
						allow_mail_to_commands="$gv_Auswahl"
						postconf -e allow_mail_to_commands="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl allow_mail_to_commands "postconf -e allow_mail_to_commands="""
			#}}}
			conf_haupt_menue
			;;
		allow_mail_to_files)
			# Auswahl der Tabellen in denen Mails in Dateien umgelenkt werden duerfen{{{
			generate_is_file "${allow_mail_to_files//,/}"
			#
			is_value "alias forward include"
			U_OPT=k
			checklist "$MAINCF_TITLE" "$gv_Menupoint" "$VALUE_ARRAY" "$allow_mail_to_files"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*) script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$gv_Menupoint" "$VALUE_ARRAY" "$allow_mail_to_files"
						;;
					*)	# uebernehmen
						allow_mail_to_files="$gv_Auswahl"
						postconf -e allow_mail_to_files="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl allow_mail_to_files "postconf -e allow_mail_to_files="""
			#}}}
			conf_haupt_menue
			;;
		allow_min_user)
			# Sollen Mailadressen die mit einem "-" beginnen erlaubt werden{{{
			ALLOW_MIN_USER_MSG=$(gettext 'Sollen Mailadressen die mit einem \"-\" beginnen erlaubt werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$ALLOW_MIN_USER_MSG"
			allow_min_user="$WERT"
			postconf -e allow_min_user="$WERT"
			#}}}
			conf_haupt_menue
			;;
		allow_percent_hack)
			# Kontrollieren des umschreiben von mail Adressen{{{
			ALLOW_PERCENT_HACK_MSG=$(gettext 'Dies kontrolliert das umschreiben von Mail Adressen, der Form user%domain --> user@domain (ja/nein).')
			ja_nein_tausch "$MAINCF_TITLE" "$ALLOW_PERCENT_HACK_MSG"
			allow_percent_hack="$WERT"
			postconf -e allow_percent_hack="$WERT"
			#}}}
			conf_haupt_menue
			;;
		allow_untrusted_routing)
			# Sollen Mailadressen mit fremden Mailrouting erlaubt werden{{{
			ALLOW_UNTRUST_ROUTING_MSG=$(gettext 'Sollen Mailadressen mit doppellten \"@\" oder \"%\", die also ein fremdes Mailrouting beinhalten, erlaubt werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$ALLOW_UNTRUST_ROUTING_MSG"
			allow_untrusted_routing="$WERT"
			postconf -e allow_untrusted_routing="$WERT"
			#}}}
			conf_haupt_menue
			;;
		alternate_config_directories)
			# Pfad zu weiteren Konfigurations Verzeichnissen{{{
			ALTERNATE_CONFIG_DIR_MSG=$(gettext 'Geben Sie bitte weitere Konfigurationsverzeichnisse, getrennt durch ein Leerzeichen, ein.')
			inputbox "$MAINCF_TITLE" "$ALTERNATE_CONFIG_DIR_MSG" "$alternate_config_directories"
			if [ "$gv_Auswahl" ] ; then
				unset -- alternate_config_directories_auswahl
				Anz=0
				for i in $gv_Auswahl ; {
					dselect_check "$i"
					if [ "$VERZ" ] ; then
						(( Anz++ ))
						alternate_config_directories_auswahl[Anz]="$VERZ"
					else
						unset -- alternate_config_directories_auswahl
						break
					fi
				}
				if [ "$alternate_config_directories_auswahl" ] ; then
					alternate_config_directories="$alternate_config_directories_auswahl"
					postconf -e alternate_config_directories="$alternate_config_directories_auswahl"
				fi
			else
				alternate_config_directories=""
				postconf -e alternate_config_directories=""
			fi
			#}}}
			conf_haupt_menue
			;;
		always_bcc)
			# An diesen Account wird von jeder Mail eine Kopie geschickt.{{{
			unset -- ALWAYS_BCC_MENU
			ALWAYS_BCC_MSG=$(gettext 'Waehlen Sie einen Benutzer aus, an den immer eine geheime Kopie (BCC) geschickt werden soll.')
			user_group_check -p
			if (( $? == 0 )) ; then
				ALWAYS_BCC_MENU=($U_G_ARRAY)
				menubox "$MAINCF_TITLE" "$ALWAYS_BCC_MSG" "$ALWAYS_BCC_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help share/user_help
							menubox "$MAINCF_TITLE" "$ALWAYS_BCC_MSG" "$ALWAYS_BCC_MENU"
							;;
						*)	# uebernehmen
							always_bcc="$gv_Auswahl"
							postconf -e always_bcc="$gv_Auswahl"
							break
							;;
					esac
				done
			fi
			#}}}
			conf_haupt_menue
			;;
		append_at_myorigin)
			# Kontrollieren des umschreiben von mail Adressen{{{
			APPEND_AT_MYORIGIN_MSG=$(gettext 'Dies kontrolliert das umschreiben von Mail Adressen, der Form user --> user@mydomain (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$APPEND_AT_MYORIGIN_MSG"
			append_at_myorigin="$WERT"
			postconf -e append_at_myorigin="$WERT"
			#}}}
			conf_haupt_menue
			;;
		append_dot_mydomain)
			# Kontrollieren des umschreiben von mail Adressen{{{
			APPEND_AT_MYDOMAIN_MSG=$(gettext 'Dies kontrolliert das umschreiben von Mail Adressen, der Form user@host --> user@host.mydomain (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$APPEND_AT_MYDOMAIN_MSG"
			append_dot_mydomain="$WERT"
			postconf -e append_dot_mydomain="$WERT"
			#}}}
			conf_haupt_menue
			;;
		best_mx_transport)
			# Weist einer Mail eine neue Transport Methode zu, wenn der Mailserver{{{
			# der beste MX-Host fuer diese Domain ist.
			transport_methode
			best_mx_transport="$WERT"
			postconf -e best_mx_transport="$WERT"
			#}}}
			conf_haupt_menue
			;;
		biff)
			# Soll die Zusammenarbeit mit biff aktiviert werden{{{
			BIFF_MSG=$(gettext 'Soll die Zusammenarbeit mit biff aktiviert werden, einem Informationstool ueber neu hereingekommene Mails (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$BIFF_MSG"
			biff="$WERT"
			postconf -e biff="$WERT"
			#}}}
			conf_haupt_menue
			;;
		body_checks)
			# Tabelle eine Filterung des Bodies{{{
			tab_support_wahl "$gv_Auswahl"
			body_checks="$MAPS"
			postconf -e body_checks="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		body_checks_size_limit)
			# Wieviel Mail Text soll im Body, ueberprueft werden.{{{
			number_input -b "$body_checks_size_limit"
			if [ "$NUMBER" ] ; then
				body_checks_size_limit="$NUMBER"
				postconf -e body_checks_size_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		bounce_notice_recipient)
			# Mailadresse fuer Benachrichtigung ueber Double Bounces{{{
			BOUNCE_NOTICE_RECIPIENT_MSG=$(gettext 'Geben Sie eine Mailadresse ein, an die Benachrichtigungen von Bounces gehen (postmaster).')
			inputbox "$MAINCF_TITLE" "$BOUNCE_NOTICE_RECIPIENT_MSG" "$bounce_notice_recipient"
			if [ "$gv_Auswahl" ] ; then
				bounce_notice_recipient="$gv_Auswahl"
				postconf -e bounce_notice_recipient="$gv_Auswahl"
			else
				bounce_notice_recipient=""
				postconf -e bounce_notice_recipient=""
			fi
			#}}}
			conf_haupt_menue
			;;
		bounce_size_limit)
			# Anzahl an Bytes die bei einem Bounce zurueckgeschickt werden.{{{
			#
			number_input -b "$bounce_size_limit"
			if [ "$NUMBER" ] ; then
				body_bounce_size_limit="$NUMBER"
				postconf -e bounce_size_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		broken_sasl_auth_clients)
			# Soll der Mailserver, einen anderen Begruessungs Text ausgeben.{{{
			# Umgeht einen MS Outlock Fehler.
			BROKEN_SASL_AUTH_CLIENTS_MSG=$(gettext 'Soll dieser Server einen anderen Begruessungstext,  fuer SMTP-AUTH, ausgeben (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$BROKEN_SASL_AUTH_CLIENTS_MSG"
			broken_sasl_auth_clients="$WERT"
			postconf -e broken_sasl_auth_clients="$WERT"
			#}}}
			conf_haupt_menue
			;;
		canonical_maps)
			# Tabelle fuer canonical{{{
			tab_support_wahl "$gv_Auswahl"
			canonical_maps="$MAPS"
			postconf -e canonical_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		command_directory)
			# Verzeichnis zu den Postfix Programmen{{{
			#
			dselect "$command_directory"
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ -x "${VERZ}/postfix" ] ; then
					command_directory="$VERZ"
					postconf -e command_directory="$VERZ"
				else
					no_postfix_prog_dir_msg
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		command_time_limit)
			# Maximalzeit, die "local" auf ext. Programme wartet{{{
			#
			number_input -s "${command_time_limit%?}"
			if [ "$NUMBER" ] ; then
				command_time_limit="$NUMBER"
				postconf -e command_time_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		config_d*)
			# Konfigurations Verzeichnis einstellen{{{
			#
			dselect "$MAIL_CONFIG"
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ "$VERZ" ] ; then
					config_directory="$VERZ"
					postconf -e config_directory="$VERZ"
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		content_filter)
			# Transport Methode, an die jede Mail verschickt wird{{{
			#
			transport_methode
			content_filter="$WERT"
			postconf -e content_filter="$WERT"
			#}}}
			conf_haupt_menue
			;;
		daemon_directory)
			# Verzeichnis zu den Postfix Modulen{{{
			#
			dselect "$daemon_directory"
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ -x "${VERZ}/master" ] ; then
					daemon_directory="$VERZ"
					postconf -e daemon_directory="$VERZ"
				else
					MSG=$(gettext 'In diesem Verzeichnis ($VERZ) liegen keine Postfix Module.')
					msgbox "$gv_Attention" "$MSG"
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		daemon_timeout)
			# Timeout.{{{
			#
			number_input -s "${daemon_timeout%?}"
			if [ "$NUMBER" ] ; then
				daemon_timeout="$NUMBER"
				postconf -e daemon_timeout="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		debug_peer_list)
			# Welche Adressen sollen geloggt werden{{{
			DEBUG_PEER_LIST_MSG=$(gettext 'Geben Sie eine Liste von IPs, Domains, Hostnamen oder Netzmasken ein die ausfuehrlicher geloggt werden sollen (Bsp.: 192.168.0.0/24 $myhostname).')
			inputbox "$MAINCF_TITLE" "$DEBUG_PEER_LIST_MSG" "$debug_peer_list"
			if [ "$gv_Auswahl" ] ; then
				debug_peer_list="$gv_Auswahl"
				postconf -e debug_peer_list="$gv_Auswahl"
			else
				debug_peer_list=""
				postconf -e debug_peer_list=""
			fi
			#}}}
			conf_haupt_menue
			;;
		debug_peer_level)
			# Debugging Level auswaehlen{{{
			loglevel
			debug_peer_level="$WERT"
			postconf -e debug_peer_level="$WERT"
			#}}}
			conf_haupt_menue
			;;
		defer_transports)
			# Mails dieser Transport Methode werden in die Queue gestellt{{{
			#
			transport_methode
			defer_transports="$WERT"
			postconf -e defer_transports="$WERT"
			#}}}
			conf_haupt_menue
			;;
		delay_notice_recipient)
			# Mailadresse, die bei Verspaetigungen benachrichtigt werden soll{{{
			DELAY_NOTICE_RECIPIENT_MSG=$(gettext 'Geben Sie eine Mailadresse ein, die bei Mailverspaetigungen benachrichtigt wird (postmaster).')
			inputbox "$MAINCF_TITLE" "$DELAY_NOTICE_RECIPIENT_MSG" "$delay_notice_recipient"
			if [ "$gv_Auswahl" ] ; then
				delay_notice_recipient="$gv_Auswahl"
				postconf -e delay_notice_recipient="$gv_Auswahl"
			else
				delay_notice_recipient=""
				postconf -e delay_notice_recipient=""
			fi
			#}}}
			conf_haupt_menue
			;;
		delay_warning_time)
			# Zeit bis zur Info, wenn Mail nichtzustellbar{{{
			#
			number_input -h "${delay_warning_time%?}"
			if [ "$NUMBER" ] ; then
				delay_warning_time="$NUMBER"
				postconf -e delay_warning_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		deliver_lock_attempts)
			# Maximal Anzahl fuer Datei-lock Versuche{{{
			#
			number_input -i "$deliver_lock_attempts"
			if [ "$NUMBER" ] ; then
				deliver_lock_attempts="$NUMBER"
				postconf -e deliver_lock_attempts="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		deliver_lock_delay)
			# Wartezeit fuer erneutes zugreifen auf lock Datei{{{
			#
			number_input -s "${deliver_lock_delay%?}"
			if [ "$NUMBER" ] ; then
				deliver_lock_delay="$NUMBER"
				postconf -e deliver_lock_delay="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		disable_dns_lookups)
			# Rechnernamen bei DNS Servern nachschlagen?{{{
			DISABLE_DNS_LOOKUPS_MSG=$(gettext 'Sollen die Rechnernamen, der zu versendenen Mails, bei einem DNS Server nicht nachgeschlagen werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$DISABLE_DNS_LOOKUPS_MSG"
			disable_dns_lookups="$WERT"
			postconf -e disable_dns_lookups="$WERT"
			#}}}
			conf_haupt_menue
			;;
		disable_verp_bounces)
			# Bounces an VERP Adressen deaktivieren.{{{
			DISABLE_VERP_BOUNCES_MSG=$(gettext 'Sollen Bounces an VERP Adressen deaktiviert werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$DISABLE_VERP_BOUNCES_MSG"
			disable_verp_bounces="$WERT"
			postconf -e disable_verp_bounces="$WERT"
			#}}}
			conf_haupt_menue
			;;
		disable_vrfy_command)
			# Soll das SMTP Kommando VRFY deaktiviert werden.{{{
			DISABLE_VRFY_CMD_MSG=$(gettext 'Soll das SMTP-Kommando VRFY deaktiviert werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$DISABLE_VRFY_CMD_MSG"
			disable_vrfy_command="$WERT"
			postconf -e disable_vrfy_command="$WERT"
			#}}}
			conf_haupt_menue
			;;
		double_bounce_sender)
			# Absenderadresse fuer Double Bounces{{{
			DOUBLE_BOUNCE_SENDER_MSG=$(gettext 'Geben Sie eine Absenderadresse fuer Double Bounces ein (double-bounce).')
			inputbox "$MAINCF_TITLE" "$DOUBLE_BOUNCE_SENDER_MSG" "$double_bounce_sender"
			if [ "$gv_Auswahl" ] ; then
				double_bounce_sender="$gv_Auswahl"
				postconf -e double_bounce_sender="$gv_Auswahl"
			else
				double_bounce_sender=""
				postconf -e double_bounce_sender=""
			fi
			#}}}
			conf_haupt_menue
			;;
		duplicate_filter_limit)
			# Maximalzahl der gemerkten Empfaengern in der Adressliste von local und cleanup.{{{
			#
			number_input -i "$duplicate_filter_limit"
			if [ "$NUMBER" ] ; then
				duplicate_filter_limit="$NUMBER"
				postconf -e duplicate_filter_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		empty_address_recipient)
			# Mailadresse fuer fehlende Angaben{{{
			EMPTY_ADR_RECIPIENT_MSG=$(gettext 'Geben Sie eine Mailadresse ein, die bei fehlenden Angaben eingesetzt wird (MAILER-DAEMON).')
			inputbox "$MAINCF_TITLE" "$EMPTY_ADR_RECIPIENT_MSG" "$empty_address_recipient"
			if [ "$gv_Auswahl" ] ; then
				empty_address_recipient="$gv_Auswahl"
				postconf -e empty_address_recipient="$gv_Auswahl"
			else
				empty_address_recipient="MAILER-DAEMON"
				postconf -e empty_address_recipient="MAILER-DAEMON"
			fi
			#}}}
			conf_haupt_menue
			;;
		error_notice_recipient)
			# Mailadresse die bei Fehlern informatiert wird{{{
			ERROR_NOTICE_RECIPIENT_MSG=$(gettext 'Geben Sie hier bitte eine Mailadresse ein, die bei Fehlern zu benachrichtigen ist (postmaster).')
			inputbox "$MAINCF_TITLE" "$ERROR_NOTICE_RECIPIENT_MSG" "$error_notice_recipient"
			if [ "$gv_Auswahl" ] ; then
				error_notice_recipient="$gv_Auswahl"
				postconf -e error_notice_recipient="$gv_Auswahl"
			else
				error_notice_recipient=""
				postconf -e error_notice_recipient=""
			fi
			#}}}
			conf_haupt_menue
			;;
		expand_owner_alias)
			# Soll bei ausgehenden ML-mails listenname-owner in die echte Mailadr.{{{
			# aufgeloest werden?
			EXPAND_OWNER_ALIAS_MSG=$(gettext 'Soll bei ausgehenden Mailinglistenmails der listenname-owner anhand der alias Tabelle direkt in die echte Mailadresse aufgeloest werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$EXPAND_OWNER_ALIAS_MSG"
			expand_owner_alias="$WERT"
			postconf -e expand_owner_alias="$WERT"
			#}}}
			conf_haupt_menue
			;;
		export_environment)
			# export Variablen an externe Programme{{{
			EXPORT_ENV_MSG=$(gettext 'Geben Sie die Variablen ein, die an externe Programme uebergeben werden sollen.')
			inputbox "$MAINCF_TITLE" "$EXPORT_ENV_MSG" "$export_environment"
			if [ "$gv_Auswahl" ] ; then
				export_environment="$gv_Auswahl"
				postconf -e export_environment="$gv_Auswahl"
			else
				export_environment="TZ"
				postconf -e export_environment="TZ"
			fi
			#}}}
			conf_haupt_menue
			;;
		extract_recipient_limit)
			# Maximale Anzahl der Empfaenger, die Postfix aus dem Header liest.{{{
			#
			number_input -i "$extract_recipient_limit"
			if [ "$NUMBER" ] ; then
				extract_recipient_limit="$NUMBER"
				postconf -e extract_recipient_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		fallback_transport)
			# Standard Transport Methode bei Fehlern{{{
			#
			transport_methode
			fallback_transport="$WERT"
			postconf -e fallback_transport="$WERT"
			#}}}
			conf_haupt_menue
			;;
		fast_flush_domains)
			# Fuer welche domains soll der Mail Server eine schnellere{{{
			# Zustellung einschalten.
			tab_support_wahl "$gv_Auswahl"
			fast_flush_domains="$MAPS"
			postconf -e fast_flush_domains="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		fast_flush_purge_time)
			# Maximale Haltezeit fuer eine leere fast-flush Logdatei{{{
			#
			number_input -d "${fast_flush_purge_time%?}"
			if [ "$NUMBER" ] ; then
				fast_flush_purge_time="$NUMBER"
				postconf -e fast_flush_purge_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		fast_flush_refresh_time)
			# Zeit, nach der die Logdatei fuer ein Ziel neu aufgebaut werden muss{{{
			#
			number_input -h "${fast_flush_refresh_time%?}"
			if [ "$NUMBER" ] ; then
				fast_flush_refresh_time="$NUMBER"
				postconf -e fast_flush_refresh_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		fault_injection_code)
			# aktiviert einen Testmodus{{{
			#
			number_input -i "$fault_injection_code"
			if [ "$NUMBER" ] ; then
				fault_injection_code="$NUMBER"
				postconf -e fault_injection_code="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		fork_attempts)
			# Maximalanzahl der Versuche einen neuen Prozess zu initiieren{{{
			#
			number_input -i "$fork_attempts"
			if [ "$NUMBER" ] ; then
				fork_attempts="$NUMBER"
				postconf -e fork_attempts="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		fork_delay)
			# Wartezeit zwischen 2 Versuchen, einen neuen Prozess zu initiieren{{{
			#
			number_input -s "${fork_delay%?}"
			if [ "$NUMBER" ] ; then
				fork_delay="$NUMBER"
				postconf -e fork_delay="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		forward_path)
			# Dateien/Variablen in denen nach persoehnlichen Weiterleitungen{{{
			# eines Users gesucht wird.
			FORWARD_PATH_MSG=$(gettext 'Geben Sie Dateien/Variablen ein, in denen nach persoehnlichen Weiterleitungen eines Nutzers gesucht wird (\$home/.forward).')
			inputbox "$MAINCF_TITLE" "$FORWARD_PATH_MSG" "$forward_path"
			if [ "$gv_Auswahl" ] ; then
				forward_path="`echo $gv_Auswahl | sed -e 's#\\$#\\\\$#g'`"
				postconf -e forward_path="`echo $gv_Auswahl | sed -e 's#\\$#\\\$#g'`"
			else
				forward_path=""
				postconf -e forward_path=""
			fi
			#}}}
			conf_haupt_menue
			;;
		hash_queue_depth)
			# Hash-Strukturtiefe{{{
			#
			number_input -i "$hash_queue_depth"
			if [ "$NUMBER" ] ; then
				hash_queue_depth="$NUMBER"
				postconf -e hash_queue_depth="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		hash_queue_names)
			# Warteschlangen in denen ein Hashstruktur aufgebaut werden soll{{{
			generate_is_file "${hash_queue_names//,/}"
			is_value "active bounce defer deferred flush hold incoming trace"
			#
			U_OPT=k
			QU_MSG=$(gettext 'Waehlen Sie die Warteschlangen aus, in denen ein Hashstruktur aufgebaut werden soll.')
			checklist "$MAINCF_TITLE" "$QU_MSG" "$VALUE_ARRAY" "$hash_queue_names"
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$QU_MSG" "$VALUE_ARRAY" "$hash_queue_names"
						;;
					*)	# uebernehmen
						if [ "`echo "$gv_Auswahl" | grep 'defer'`" ] ; then
							hash_queue_names="$gv_Auswahl"
							postconf -e hash_queue_names="$gv_Auswahl"
						else
							no_defer_msg
							hash_queue_names="${gv_Auswahl}, defer"
							postconf -e hash_queue_names="${gv_Auswahl}, defer"
						fi
						break
						;;
				esac
			done
			#
			if [ -z "$gv_Auswahl" ] ; then
				no_defer_msg
				hash_queue_names="defer"
				postconf -e hash_queue_names="defer"
			fi
			#}}}
			conf_haupt_menue
			;;
		header_checks)
			# Tabelle mit Filtermustern fuer den Header{{{
			tab_support_wahl "$gv_Auswahl"
			header_checks="$MAPS"
			postconf -e header_checks="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		header_size_limit)
			# Maximale Laenge des Header.{{{
			#
			number_input -i "$header_size_limit"
			if [ "$NUMBER" ] ; then
				header_size_limit="$NUMBER"
				postconf -e header_size_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		home_mailbox)
			# Mailbox Verzeichnis relativ zum Homeverzeichnis{{{
			HOME_MAILBOX_MSG=$(gettext 'Geben Sie das optionale Mailboxverzeichnis eines Benutzer, relativ zu seinem Homeverzeichnis, ein.')
			inputbox "$MAINCF_TITLE" "$HOME_MAILBOX_MSG" "$home_mailbox"
			if [ "$gv_Auswahl" ] ; then
				home_mailbox="$gv_Auswahl"
				postconf -e home_mailbox="$gv_Auswahl"
			else
				home_mailbox=""
				postconf -e home_mailbox=""
			fi
			#}}}
			conf_haupt_menue
			;;
		hopcount_limit)
			# Maximale Anzahl an passierten Mailservern.{{{
			#
			number_input -i "$hopcount_limit"
			if [ "$NUMBER" ] ; then
				hopcount_limit="$NUMBER"
				postconf -e hopcount_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		ignore_mx_lookup_error)
			# Soll Postfix, sofern eine MX Abfrage kein Ergebnis liefert{{{
			# das ganze an den A-Record schicken (yes/no)?
			IGNORE_MX_LOOKUP_ERROR_MSG=$(gettext 'Soll Postfix, sofern eine MX Abfrage kein Ergebnis liefert das ganze an den A-Record schicken (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$IGNORE_MX_LOOKUP_ERROR_MSG"
			ignore_mx_lookup_error="$WERT"
			postconf -e ignore_mx_lookup_error="$WERT"
			#}}}
			conf_haupt_menue
			;;
		import_environment)
			# Variablen die von Postfix eingelesen werden{{{
			IMPORT_ENV_MSG=$(gettext 'Geben Sie die Variablen ein, die von Postfix eingelesen werden sollen.')
			inputbox "$MAINCF_TITLE" "$IMPORT_ENV_MSG" "$import_environment"
			if [ "$gv_Auswahl" ] ; then
				import_environment="$gv_Auswahl"
				postconf -e import_environment="$gv_Auswahl"
			else
				import_environment="TZ MAIL_CONFIG"
				postconf -e import_environment="TZ MAIL_CONFIG"
			fi
			#}}}
			conf_haupt_menue
			;;
		in_flow_delay)
			# Verzoegerung fuer einkommende Mails{{{
			#
			number_input -s "${in_flow_delay%?}"
			if [ "$NUMBER" ] ; then
				in_flow_delay="$NUMBER"
				postconf -e in_flow_delay="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		inet_interfaces)
			# Auf welchen Rechneradressen soll postfix einen Port oeffnen,{{{
			# um Verbindungen anzunehmen.
			INET_IFACE_MSG=$(gettext 'Geben Sie die IPs oder Rechnernamen ein auf denen Postfix auf Verbindungen entgegennimmt, getrennt durch ein Leerzeichen. Lesen Sie die Hilfe dazu.')
			inputbox "$MAINCF_TITLE" "$INET_IFACE_MSG" "$inet_interfaces"
			if [ "$gv_Auswahl" ] ; then
				inet_interfaces="$gv_Auswahl"
				postconf -e inet_interfaces="$gv_Auswahl"
			else
				inet_interfaces=""
				postconf -e inet_interfaces=""
			fi
			#}}}
			conf_haupt_menue
			;;
		initial_destination_concurrency)
			# maximale Anzahl igleichzeitiger Verbindungen{{{
			number_input -i "$initial_destination_concurrency"
			if [ "$NUMBER" != 0 -o "$NUMBER" != 1 ] ; then
				initial_destination_concurrency="$NUMBER"
				postconf -e initial_destination_concurrency="$NUMBER"
			else
				MSG=$(gettext 'Der Wert von von \"initial_destination_concurrency\" darf nicht auf $NUMBER stehen, da sonst eine defekte Empfaengeradresse den gesamten Mailverkehr blockiert.')
				msgbox "$gv_Attention" "$MSG"
			fi
			#}}}
			conf_haupt_menue
			;;
		ipc_idle)
			# Timeout nach dem die IPC zw. 2 Prozessen beendet wird{{{
			#
			number_input -s "${ipc_idle%?}"
			if [ "$NUMBER" ] ; then
				ipc_idle="$NUMBER"
				postconf -e ipc_idle="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		ipc_timeout)
			# genereller Timeout fuer die IPC{{{
			#
			number_input -s "${ipc_timeout%?}"
			if [ "$NUMBER" ] ; then
				ipc_timeout="$NUMBER"
				postconf -e ipc_timeout="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		line_length_limit)
			# Maximallaenge einer Zeile in Bytes, danach wird sie umgebrochen.{{{
			#
			number_input -b "$line_length_limit"
			if [ "$NUMBER" ] ; then
				line_length_limit="$NUMBER"
				postconf -e line_length_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		local_command_shell)
			# Lokale Shell auswaehlen{{{
			list_shell $local_command_shell
			if [ -n "$gv_Shell" ] ; then
				local_command_shell="$gv_Shell"
				postconf -e local_command_shell="$gv_Shell"
			else
				local_command_shell=""
				postconf -e local_command_shell=""
			fi
			#}}}
			conf_haupt_menue
			;;
		local_destination_concurrency_limit)
			# maximale Empfaengeranzahl bei lokaler Mails Zustellung{{{
			number_input -i "$local_destination_concurrency_limit"
			if [ "$NUMBER" ] ; then
				local_destination_concurrency_limit="$NUMBER"
				postconf -e local_destination_concurrency_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		local_destination_r*)
			# maximale Anzahl gleichzeitiger zuzustellender lokaler Mails{{{
			number_input -i "$local_destination_recipient_limit"
			if [ "$NUMBER" ] ; then
				local_destination_recipient_limit="$NUMBER"
				postconf -e local_destination_recipient_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		local_recipient_maps)
			# Tabelle mit lokalen Mailadressen, fuer die postfix Mails annehmen soll{{{
			# Unzustellbare werden dann gar nicht erst angenommen.
			tab_support_wahl "$gv_Auswahl"
			local_recipient_maps="$MAPS"
			postconf -e local_recipient_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		local_transport)
			# Transport Methode fuer lokale Mails{{{
			#
			transport_methode
			local_transport="${WERT}:\\\$myhostname"
			postconf -e local_transport="${WERT}:\$myhostname"
			#}}}
			conf_haupt_menue
			;;
		luser_relay)
			# unzustellbare mails nicht bouncen sondern weiter verschicken{{{
			#
			LUSER_RELAY_MSG=$(gettext 'Geben Sie eine Mailadresse ein, an die unzustellbare Mails, die nicht gebounct werden sollen, weitergeleitet werden. Lesen Sie die Hilfe dazu.')
			inputbox "$MAINCF_TITLE" "$LUSER_RELAY_MSG" "$luser_relay"
			if [ "$gv_Auswahl" ] ; then
				luser_relay="`echo $gv_Auswahl | sed -e 's#\\$#\\\\$#g'`"
				postconf -e luser_relay="`echo $gv_Auswahl | sed -e 's#\\$#\\\$#g'`"
			else
				luser_relay=""
				postconf -e luser_relay=""
			fi
			#}}}
			conf_haupt_menue
			;;
		maps_rbl_domains)
			# Rechnereingabe fuer RBL Pruefung{{{
			MAPS_RBL_DOMAINS_MSG=$(gettext 'Geben Sie eine Liste von Domains an, getrennt durch Komma und Leerzeichen, die einer RBL Pruefung unterzogen werden sollen.')
			inputbox "$MAINCF_TITLE" "$MAPS_RBL_DOMAINS_MSG" "$maps_rbl_domains"
			if [ "$gv_Auswahl" ] ; then
				maps_rbl_domains="$gv_Auswahl"
				postconf -e maps_rbl_domains="$gv_Auswahl"
			else
				maps_rbl_domains=""
				postconf -e maps_rbl_domains=""
			fi
			#}}}
			conf_haupt_menue
			;;
		masquerade_classes)
			# Bereiche, in denen postfix Mailadressen maskieren soll{{{
			generate_is_file "${masquerade_classes//,/}"
			is_value "envelope_sender envelope_recipient header_sender header_recipient"
			#
			U_OPT=k
			MASK_MSG=$(gettext 'Waehlen Sie ein oder mehrere Bereiche in denen Postfix Mailadressen maskieren soll.')
			checklist "$MAINCF_TITLE" "$MASK_MSG" "$VALUE_ARRAY" "$masquerade_classes"
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$MASK_MSG" "$VALUE_ARRAY" "$masquerade_classes"
						;;
					*)	# uebernehmen
						masquerade_classes="$gv_Auswahl"
						postconf -e masquerade_classes="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl masquerade_classes "postconf -e masquerade_classes="""
			#}}}
			conf_haupt_menue
			;;
		masquerade_domains)
			# Domains eingeben, die maskiert werden sollen{{{
			MASQ_DOMAINS_MSG=$(gettext 'Geben Sie die Domains, getrennt durch ein Leerzeichen an, die Sie maskieren moechten. Lesen Sie bitte die Hilfe dazu.')
			inputbox "$MAINCF_TITLE" "$MASQ_DOMAINS_MSG" "$masquerade_domains"
			if [ "$gv_Auswahl" ] ; then
				masquerade_domains="$gv_Auswahl"
				postconf -e masquerade_domains="$gv_Auswahl"
			else
				masquerade_domains=""
				postconf -e masquerade_domains=""
			fi
			#}}}
			conf_haupt_menue
			;;
		masquerade_exceptions)
			# Mail Users auswaehlen, der vom masquerading ausgenommen wird{{{
			user_auswahl
			masquerade_exceptions="$WERT"
			postconf -e masquerade_exceptions="$WERT"
			#}}}
			conf_haupt_menue
			;;
		max_idle)
			# Idle Zeit fuer Postfix Module{{{
			#
			number_input -s "${max_idle%?}"
			if [ "$NUMBER" ] ; then
				max_idle="$NUMBER"
				postconf -e max_idle="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		max_use)
			# Anzahl der maximalen Jobs, fuer Module{{{
			#
			number_input -i "$max_use"
			if [ "$NUMBER" ] ; then
				max_use="$NUMBER"
				postconf -e max_use="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		maximal_backoff_time)
			# Maximalzeit nach wieder versucht wird Mail zuzustellen{{{
			#
			number_input -s "${maximal_backoff_time%?}"
			if [ "$NUMBER" ] ; then
				maximal_backoff_time="$NUMBER"
				postconf -e maximal_backoff_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		maximal_queue_lifetime)
			# Zeit, nach der aufgegeben wird Mail zuzustellen{{{
			#
			number_input -d "${maximal_queue_lifetime%?}"
			if [ "$NUMBER" ] ; then
				maximal_queue_lifetime="$NUMBER"
				postconf -e maximal_queue_lifetime="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		message_size_limit)
			# Maximalgroesse einer Mail.{{{
			#
			number_input -b "$message_size_limit"
			if [ "$NUMBER" ] ; then
				message_size_limit="$NUMBER"
				postconf -e message_size_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		minimal_backoff_time)
			# Minimalzeit bevor wieder versucht wird Mail zuzustellen{{{
			#
			number_input -s "${minimal_backoff_time%?}"
			if [ "$NUMBER" ] ; then
				minimal_backoff_time="$NUMBER"
				postconf -e minimal_backoff_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		mime_header_checks)
			# Tabelle mit Filtermustern fuer den Mime Header{{{
			tab_support_wahl "$gv_Auswahl"
			mime_header_checks="$MAPS"
			postconf -e mime_header_checks="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		mydestination)
			# Eine Liste von Domains fuer die Postfix der Final Destination.{{{
			# ist und sie local zustellt.
			MYDESTINATION_MSG=$(gettext 'Geben Sie eine Liste von Domains ein fuer die Postfix die Mails lokal zustellt, getrennt durch ein Komma und Leerzeichen (Bsp. \$myhostname, localhost.\$mydomain, \$mydomain).')
			inputbox "$MAINCF_TITLE" "$MYDESTINATION_MSG" "$mydestination"
			if [ "$gv_Auswahl" ] ; then
				mydestination="${gv_Auswahl//\$/\\$}"
				postconf -e mydestination="${gv_Auswahl//\$/\\$}"
			else
				no_input_msg
			fi
			#}}}
			conf_haupt_menue
			;;
		mydomain)
			# Fuer welche domain ist dieser Mail Server zustaendig.{{{
			# Standard ist der locale host.
			MYDOMAIN_MSG=$(gettext 'Geben Sie den Domainnamen ein, fuer den dieser Mail Server zustaendig ist (Bsp. domain.de).')
			inputbox "$MAINCF_TITLE" "$MYDOMAIN_MSG" "$mydomain"
			if [ "$gv_Auswahl" -a "${(w)#gv_Auswahl}" = 1 ] ; then
				mydomain="$gv_Auswahl"
				postconf -e mydomain="$gv_Auswahl"
			else
				no_input_msg
			fi
			#}}}
			conf_haupt_menue
			;;
		myhostname)
			# hostname des Mailservers{{{
			MYHOSTNAME_MSG=$(gettext 'Geben Sie den FQDN-Rechnernamen fuer diesen Mailserver ein (Bsp. host1.domain.de).')
			inputbox "$MAINCF_TITLE" "$MYHOSTNAME_MSG" "$myhostname"
			if [ "$gv_Auswahl" -a "${(w)#gv_Auswahl}" = 1 ] ; then
				myhostname="$gv_Auswahl"
				postconf -e myhostname="$gv_Auswahl"
			else
				no_input_msg
			fi
			#}}}
			conf_haupt_menue
			;;
		mynetworks)
			# Tabelle fuer IP-Nummern/Bereiche, die relayen duerfen{{{
			tab_support_wahl "$gv_Auswahl"
			mynetworks="$MAPS"
			postconf -e mynetworks="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		mynetworks_style)
			# wie mynetworks, ohne IP-Bereiche{{{
			MYNET_MSG=$(gettext 'Waehlen Sie die Bereiche aus die ueber diesen SMTP Server relayen durfen.')
			MYNET_MENU=(class \"\" host \"\" subnet \"\")
			menubox "$MAINCF_TITLE" "$MYNET_MSG" "$MYNET_MENU"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						menubox "$MAINCF_TITLE" "$MYNET_MSG" "$MYNET_MENU"
						;;
					*)	#
						# uebernehmen
						mynetworks_style="$gv_Auswahl"
						postconf -e mynetworks_style="$gv_Auswahl"
						break
						;;
				esac
			done
			#}}}
			conf_haupt_menue
			;;
		myorigin)
			# Hostname der bei der Erzeugung neuer Mails benutzt wird{{{
			H_MSG=$(gettext 'Waehlen Sie den Rechnernamen der bei der Erzeugung neuer Mails benutzt werden soll.')
			H_MENU=(localhost \"\" \"$myhostname\" \"\" \"$mydomain\" \"\")
			menubox "$MAINCF_TITLE" "$H_MSG" "$H_MENU"
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						menubox "$MAINCF_TITLE" "$H_MSG" "$H_MENU"
						;;
					*)	#
						# uebernehmen
						myorigin="$gv_Auswahl"
						postconf -e myorigin="$gv_Auswahl"
						break
						;;
				esac
			done
			#}}}
			conf_haupt_menue
			;;
		nested_header_checks)
			# Tabelle mit Filtermustern der Mailanhaenge Header{{{
			tab_support_wahl "$gv_Auswahl"
			nested_header_checks="$MAPS"
			postconf -e nested_header_checks="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		notify_classes)
			# Bereiche, in denen der Postmaster bei Fehlern informiert wird.{{{
			generate_is_file "${notify_classes//,/}"
			is_value "2bounce bounce delay policy resource software"
			#
			U_OPT=k
			N_MSG=$(gettext 'Waehlen Sie die Bereiche aus, bei denen der Postmaster informiert wird.')
			checklist "$MAINCF_TITLE" "$N_MSG" "$VALUE_ARRAY" "$notify_classes"
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$N_MSG" "$VALUE_ARRAY" "$notify_classes"
						;;
					*)	# uebernehmen
						notify_classes="$gv_Auswahl"
						postconf -e notify_classes="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl notify_classes "postconf -e notify_classes="""
			#}}}
			conf_haupt_menue
			;;
		owner_request_special)
			# Soll eine besondere Behandlung fuer die Adressen owner-listenname und{{{
			# listenname-request aktiviert werden?
			OWNER_REQUEST_SPECIAL_MSG=$(gettext 'Soll eine besondere Behandlung fuer die Adressen owner-listenname und listenname-request aktiviert werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$OWNER_REQUEST_SPECIAL_MSG"
			owner_request_special="$WERT"
			postconf -e owner_request_special="$WERT"
			#}}}
			conf_haupt_menue
			;;
		parent_domain_matches_subdomains)
			# Parameter, in denen eine Domainangabe automatisch{{{
			# auch deren Subdomains miterfasst
			generate_is_file "${parent_domain_matches_subdomains//,/}"
			is_value "debug_peer_list fast_flush_domains mynetworks permit_mx_backup_networks qmqpd_authorized_clients relay_domains smtpd_access_maps"
			#
			U_OPT=k
			P_MSG=$(gettext 'Waehlen Sie die Paremeter aus in denen ein Domainangabe automatisch auch deren Subdomain miterfasst.')
			checklist "$MAINCF_TITLE" "$P_MSG" "$VALUE_ARRAY" "$parent_domain_matches_subdomains" 
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$P_MSG" "$VALUE_ARRAY" "$parent_domain_matches_subdomains" 
						;;
					*)	# uebernehmen
						parent_domain_matches_subdomains="$gv_Auswahl"
						postconf -e parent_domain_matches_subdomains="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl parent_domain_matches_subdomains "postconf -e parent_domain_matches_subdomains="""
			#}}}
			conf_haupt_menue
			;;
		permit_mx_backup_networks)
			# Postfix wird hier angewiesen nur IP-Netze zu relayen,{{{
			# wenn nur ein MX-Record auf diesen Server zeigt. Es muss der hoehste
			# MX-Host aus dem hiergenannten Netz sein.
			PERMIT_MX_BACKUP_NETWORKS_MSG=$(gettext 'Geben Sie die IP-Netze ein, fuer die Postfix Mails annimmt/relayed wenn ein MX-Record auf diese Server zeigt. Es muss der hoechste MX-Host sein, sonst verweigert Postfix die Annahme (Bsp.: 192.168.0.0/16 192.168.10.0/24).')
			inputbox "$MAINCF_TITLE" "$PERMIT_MX_BACKUP_NETWORKS_MSG" "$permit_mx_backup_networks"
			if [ "$gv_Auswahl" ] ; then
				# Alle eingebenen IP's ueberpruefen
				unset -- permit_mx_backup_networks_auswahl
				Anz=0
				for i in $gv_Auswahl ; {
					# Pruefen ob die Eingabe richtig war.
					ip_analyse "$i"
					if [ "$gv_Ip_Adr" ] ; then
						(( Anz++ ))
						permit_mx_backup_networks_auswahl[Anz]="$gv_Ip_Adr"
					fi
				}
			fi
			#
			if [ -n "${permit_mx_backup_networks_auswahl[1]}" ] ; then
				MSG=$(gettext 'Achten Sie darauf das \"permit_mx_backup\" in den \"smtpd_recipient_restrictions\" aktiviert ist.')
				msgbox "$gv_Info" "$MSG"
				permit_mx_backup_networks="$permit_mx_backup_networks_auswahl"
				postconf -e permit_mx_backup_networks="$permit_mx_backup_networks_auswahl"
			else
				no_input_msg
				permit_mx_backup_networks=""
				postconf -e permit_mx_backup_networks=""
			fi
			#}}}
			conf_haupt_menue
			;;
		prepend_delivered_header)
			# In welchen Faellen soll ein "Delivered-To:" Header {{{
			# in die Mail eingefuegt werden
			generate_is_file "${prepend_delivered_header//,/}"
			is_value "command file forward"
			#
			D_MSG=$(gettext 'Waehlen Sie die Faelle aus bei denen ein \"Delivered-To:\" Header eingefuegt werden soll.')
			checklist "$MAINCF_TITLE" "$D_MSG" "$VALUE_ARRAY" "$prepend_delivered_header"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*) script_help haupt_help
						checklist "$MAINCF_TITLE" "$D_MSG" "$VALUE_ARRAY" "$prepend_delivered_header"
						;;
					*)	# uebernehmen
						prepend_delivered_header="$gv_Auswahl"
						postconf -e prepend_delivered_header="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			check_gv_Auswahl prepend_delivered_header "postconf -e prepend_delivered_header="""
			#}}}
			conf_haupt_menue
			;;
		process_id_directory)
			# Verzeichnis fuer Dateien mit Prozess ID's{{{
			#
			dselect "/var/spool/postfix"
			if [ "$VERZ" ] ; then
				dselect_check -c "$VERZ"
				if [ "$VERZ" ] ; then
					process_id_directory="$VERZ"
					postconf -e process_id_directory="$VERZ"
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		program_directory)
			# Verzeichnis zu den Postfix Programmen{{{
			#
			dselect "$program_directory"
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ -x "${VERZ}/postfix" ] ; then
					program_directory="$VERZ"
					postconf -e program_directory="$VERZ"
				else
					no_postfix_prog_dir_msg
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		propagate_unmatched_extensions)
			# In welchen Tabellen sollen auch Mailextensionen beruecksichtigt werden{{{
			###################################################
			# TODO:
			# Erkennung der vorhandenen Tabellen einbauen.
			###################################################
			generate_is_file "${propagate_unmatched_extensions//,/}"
			is_value "alias canonical forward include virtual"
			#
			U_OPT=k
			PR_MSG=$(gettext 'Waehlen Sie die Tabellen aus in denen auch Mailerweiterungen beruecksichtig werden sollen.')
			checklist "$MAINCF_TITLE" "$PR_MSG" "$VALUE_ARRAY" "$propagate_unmatched_extensions"
			#
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=k
						checklist "$MAINCF_TITLE" "$PR_MSG" "$VALUE_ARRAY" "$propagate_unmatched_extensions"
						;;
					*)	# uebernehmen
						propagate_unmatched_extensions="$gv_Auswahl"
						postconf -e propagate_unmatched_extensions="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			if [ -z "$gv_Auswahl" ] ; then
				propagate_unmatched_extensions="canonical, virtual"
				postconf -e propagate_unmatched_extensions="canonical, virtual"
			fi
			#}}}
			conf_haupt_menue
			;;
		recipient_bcc_maps)
			# Tabelle, an die "Blind Carbon-Copy" Mails geschickt werden, wenn{{{
			# der dementsprechende Empfaenger erkannt wird.
			tab_support_wahl "$gv_Auswahl"
			recipient_bcc_maps="$MAPS"
			postconf -e recipient_bcc_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		recipient_canonical_maps)
			# canonical Tabelle fuer Empfaenger Adressen{{{
			tab_support_wahl "$gv_Auswahl"
			recipient_canonical_maps="$MAPS"
			postconf -e recipient_canonical_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		recipient_delimiter)
			# Trennzeichen zwischen User und Adresserweiterung{{{
			U_OPT=-
			TR_MSG=$(gettext 'Waehlen Sie ein Trennzeichen aus mit der die Mailerweiterung abgetrennt wird.')
			# Werte mit on oder off belegen ($VERP_MENU).
			verp_delimiter "$recipient_delimiter"
			#
			radiolist "$MAINCF_TITLE" "$TR_MSG" "$VERP_MENU" "$recipient_delimiter"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help recipient_delimiter
						U_OPT=-
						radiolist "$MAINCF_TITLE" "$TR_MSG" "$VERP_MENU"
						;;
					*)	#
						recipient_delimiter="$gv_Auswahl"
						postconf -e recipient_delimiter="$gv_Auswahl"
						break
						;;
				esac
			done
			#}}}
			conf_haupt_menue
			;;
		relay_clientcerts)
			# Tabelle mit Client Zertrifikaten{{{
			tab_support_wahl "$gv_Auswahl"
			relay_clientcerts="$MAPS"
			postconf -e relay_clientcerts="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		relay_destination_c*)
			# Maximalanzahl gleichzeitiger Verbindungen zu einem Ziel{{{
			number_input -i "$relay_destination_concurrency_limit"
			if [ "$NUMBER" ] ; then
				relay_destination_concurrency_limit="$NUMBER"
				postconf -e relay_destination_concurrency_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		relay_destination_r*)
			# Maximalanzahl der Empfaenger in einer einzigen Mails{{{
			# Groesser Empfaengerlisten werden in mehrere Mails aufgeteilt
			number_input -i "$relay_destination_recipient_limit"
			if [ "$NUMBER" ] ; then
				relay_destination_recipient_limit="$NUMBER"
				postconf -e relay_destination_recipient_limit="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		relay_domains)
			# Domains fuer die bzw. von denen postfix relayed{{{
			tab_support_wahl "$gv_Auswahl"
			relay_domains="$MAPS"
			postconf -e relay_domains="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		relayhost)
			# An welchen Host sollen alle ausgehenden Mails zugestellt werden{{{
			RELAYHOST_MSG=$(gettext 'Geben Sie den Host an, an den alle ausgehenden Mails geschickt werden soll (Bsp. [smtp.domain.de] , smtp.domain.de:25).')
			inputbox "$MAINCF_TITLE" "$RELAYHOST_MSG" "$relayhost"
			if [ "$gv_Auswahl" ] ; then
				if [ "${(w)#gv_Auswahl}" = 1 ] ; then
					relayhost="$gv_Auswahl"
					postconf -e relayhost="$gv_Auswahl"
				else
					no_input_msg
				fi
			else
				relayhost=""
				postconf -e relayhost=""
			fi
			#}}}
			conf_haupt_menue
			;;
		relay_recipient_maps)
			# Tabelle mit Mailadressen, fuer die postfix Mails annehmen soll.{{{
			# s. zless STANDARD_CONFIGURATION_README.gz im Dokumentations-Pfad
			tab_support_wahl "$gv_Auswahl"
			relay_recipient_maps="$MAPS"
			postconf -e relay_recipient_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		relocated_maps)
			# Tabelle mit relocated Eintraegen{{{
			tab_support_wahl "$gv_Auswahl"
			relocated_maps="$MAPS"
			postconf -e relocated_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		require_home_directory)
			# Soll die Existenz eines HOME-Verzeichniss erzwungen werden?{{{
			REQUIRE_HOME_DIR_MSG=$(gettext 'Soll die Existenz eines Home Verzeichnisses, eines lokalen Empfaengers erzwungen werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$REQUIRE_HOME_DIR_MSG"
			require_home_directory="$WERT"
			postconf -e require_home_directory="$WERT"
			#}}}
			conf_haupt_menue
			;;
		sender_canonical_maps)
			# canonical Tabelle fuer Sender Adressen{{{
			tab_support_wahl "$gv_Auswahl"
			sender_canonical_maps="$MAPS"
			postconf -e sender_canonical_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		sender_bcc_maps)
			# Tabelle, an die "Blind Carbon-Copy" Mails geschickt werden, wenn{{{
			# der dementsprechende Sender erkannt wird.
			tab_support_wahl "$gv_Auswahl"
			sender_bcc_maps="$MAPS"
			postconf -e sender_bcc_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		sendmail_path)
			# Pfad zum Sendmail Ersatz sendmail{{{
			#
			dselect "$sendmail_path"
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ -x "${VERZ}/sendmail" ] ; then
					sendmail_path="${VERZ}/sendmail"
					postconf -e sendmail_path="${VERZ}/sendmail"
				else
					MSG=$(gettext 'In diesem Verzeichnis (\$VERZ) liegt kein Programm Namens sendmail.')
					msgbox "$gv_Attention" "$MSG"
				fi
			fi
			#}}}
			conf_haupt_menue
			;;
		service_throttle_time)
			# Wartezeit fuer ein abgestuerztes Modul bis zum Neustart{{{
			#
			number_input -s "${service_throttle_time%?}"
			if [ "$NUMBER" ] ; then
				service_throttle_time="$NUMBER"
				postconf -e service_throttle_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		setgid_group)
			# GroupID fuer die maildrop Queue{{{
			unset -- SETGID_GROUP_MENU
			user_group_check -g
			if (( $? == 0 )) ; then
				SETGID_GROUP_MENU=($U_G_ARRAY)
				SETGID_GROUP_MSG=$(gettext 'Waehlen Sie eine Gruppe aus, der die \"maildrop\" Warteschlange gehoert.')
				menubox "$MAINCF_TITLE" "$SETGID_GROUP_MSG" "$SETGID_GROUP_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help share/group_help
							menubox "$MAINCF_TITLE" "$SETGID_GROUP_MSG" "$SETGID_GROUP_MENU"
							;;
						*)	# uebernehmen
							setgid_group="$gv_Auswahl"
							postconf -e setgid_group="$gv_Auswahl"
							break
							;;
					esac
				done
			fi
			#}}}
			conf_haupt_menue
			;;
		soft_bounce)
			# Soll soft Bounce aktiviert werden?{{{
			SOFT_BOUNCE_MSG=$(gettext 'Soll soft_bounce, zum testen des Servers aktiviert werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$SOFT_BOUNCE_MSG"
			soft_bounce="$WERT"
			postconf -e soft_bounce="$WERT"
			#}}}
			conf_haupt_menue
			;;
		stale_lock_time)
			# Alter, nach denen liegendengebliebene Lockdateien geloescht werden{{{
			#
			number_input -s "${stale_lock_time%?}"
			if [ "$NUMBER" ] ; then
				stale_lock_time="$NUMBER"
				postconf -e stale_lock_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		strict_rfc821_envelopes)
			# Soll die korrekte Envelope-Adresse erzwungen werden?{{{
			STRICT_RFC821_ENVELOPES_MSG=$(gettext 'Soll die korrekte Envelope-Adresse, nach RFC 2821, erzwungen werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$STRICT_RFC821_ENVELOPES_MSG"
			strict_rfc821_envelopes="$WERT"
			postconf -e strict_rfc821_envelopes="$WERT"
			#}}}
			conf_haupt_menue
			;;
		sun_mailtool_compatibility)
			# Soll die Zusammenarbeit mit Mailtool aktiviert werden?{{{
			SUN_MAILTOOL_COMP_MSG=$(gettext 'Soll die Zusammenarbeit mit Mailtool von Suns uralt Solaris aktiviert werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$SUN_MAILTOOL_COMP_MSG"
			sun_mailtool_compatibility="$WERT"
			postconf -e sun_mailtool_compatibility="$WERT"
			#}}}
			conf_haupt_menue
			;;
		swap_bangpath)
			# Sollen gebangte Routpfade aus UUCP Verbindungen in eine{{{
			# Domainform umgeschrieben werden?
			SWAP_BANGPATH_MSG=$(gettext 'Sollen gebangte Routpfade aus UUCP Verbindungen in eine Domainform umgeschrieben werden (ja/nein)?')
			ja_nein_tausch "$MAINCF_TITLE" "$SWAP_BANGPATH_MSG"
			swap_bangpath="$WERT"
			postconf -e swap_bangpath="$WERT"
			#}}}
			conf_haupt_menue
			;;
		syslog_facility)
			# Ausgabekanal fuer Logmeldungen an syslogd{{{
			SYSLOG_FACILITY_MSG=$(gettext 'Geben Sie den Ausgabekanal fuer Logmeldungen, an den Syslogd ein (mail,news,..., man 5 syslog.conf).')
			inputbox "$MAINCF_TITLE" "$SYSLOG_FACILITY_MSG" "$syslog_facility"
			if [ "$gv_Auswahl" ] ; then
				syslog_facility="$gv_Auswahl"
				postconf -e syslog_facility="$gv_Auswahl"
			else
				syslog_facility="mail"
				postconf -e syslog_facility="mail"
			fi
			#}}}
			conf_haupt_menue
			;;
		syslog_name)
			# Ausgabename von Postfix im syslog {{{
			#
			SYSLOG_NAME_MSG=$(gettext 'Geben Sie einen Namen ein, der in der Ausgabe von Postfix an den Syslogd erscheint (postfix).')
			inputbox "$MAINCF_TITLE" "$SYSLOG_NAME_MSG" "$syslog_name"
			if [ "$gv_Auswahl" ] ; then
				syslog_name="$gv_Auswahl"
				postconf -e syslog_name="$gv_Auswahl"
			else
				syslog_name="postfix"
				postconf -e syslog_name="postfix"
			fi
			#}}}
			conf_haupt_menue
			;;
		transport_maps)
			# Tabelle mit den Transportwegen{{{
			tab_support_wahl "$gv_Auswahl"
			transport_maps="$MAPS"
			postconf -e transport_maps="$MAPS"
			#}}}
			conf_haupt_menue
			;;
		transport_retry_time)
			# Wartezeit, bevor ein gestoerter Transport erneut angesprochen wird{{{
			#
			number_input -s "${transport_retry_time%?}"
			if [ "$NUMBER" ] ; then
				transport_retry_time="$NUMBER"
				postconf -e transport_retry_time="$NUMBER"
			fi
			#}}}
			conf_haupt_menue
			;;
		undisclosed_recipients_header)
			# Header, der eingefuegt wird bei keinem Header To{{{
			UNDISCLOSED_RECIPIENTS_HEADER_MSG=$(gettext 'Geben Sie den Header ein der eingefuegt werden soll, wenn kein Header "To:" vorgefunden wird (To: undisclosed-recipients:;).')
			inputbox "$MAINCF_TITLE" "$UNDISCLOSED_RECIPIENTS_HEADER_MSG" "$undisclosed_recipients_header"
			if [ "$gv_Auswahl" ] ; then
				undisclosed_recipients_header="$gv_Auswahl"
				postconf -e undisclosed_recipients_header="$gv_Auswahl"
			else
				undisclosed_recipients_header=""
				postconf -e undisclosed_recipients_header=""
			fi
			#}}}
			conf_haupt_menue
			;;
		verp_delimiter_filter)
			# Zeichen, die fuer eine Kodierung der Mailadresse bei VERP genutzt{{{
			# werden koennen
			VERP_MSG=$(gettext 'Waehlen Sie die Zeichen die bei der Kodierung von Mail Adressen, bei VERP, genutzt werden sollen.')
			# Werte mit on oder off belegen ($VERP_MENU).
			verp_delimiter "$verp_delimiter_filter"
			#
			U_OPT=-
			checklist "$MAINCF_TITLE" "$VERP_MSG" "$VERP_MENU" "$verp_delimiter_filter"
			while [ "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help haupt_help
						U_OPT=-
						checklist "$MAINCF_TITLE" "$VERP_MSG" "$VERP_MENU" "$verp_delimiter_filter"
						;;
					*)	#
						verp_delimiter_filter="$gv_Auswahl"
						postconf -e verp_delimiter_filter="$gv_Auswahl"
						break
						;;
				esac
			done
			#
			if [ -z "$gv_Auswahl" ] ; then
				verp_delimiter_filter="+"
				postconf -e verp_delimiter_filter="+"
			fi
			#}}}
			conf_haupt_menue
			;;
		post*)	postfix_start_reload
			break
			;;
		$gv_Back)	break
			;;
	esac
done
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
