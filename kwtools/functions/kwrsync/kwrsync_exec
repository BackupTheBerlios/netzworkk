# Funktion kwrsync_exec# {{{
#
# usage: kwrsync_exec
#
kwrsync_exec() {
	unset -- S_VERZ R_VERZ RSYNC_RSH REMOTE_HOST DIR_EXCLUDE KwrsynctabListe
	setopt shwordsplit
	# IFS=Return
	IFS=$'\r'
	#
	read -A KwrsynctabListe <<< "`grep -v "^#" $KWRSYNCTAB | tr "\n" "$IFS"`"
	# IFS=Tab
	IFS=$'\t'
	Anz=1
	Anz1=0
	while [ "${KwrsynctabListe[Anz]}" != "" ] ; do
		set -- ${KwrsynctabListe[Anz]}
		(( Anz1++ ))
		S_VERZ[Anz1]="$1"
		R_VERZ[Anz1]="$2"
		RSYNC_RSH[Anz1]="$3"
		REMOTE_HOST[Anz1]="$4"
		DIR_EXCLUDE[Anz1]="$5"
		(( Anz++ ))
	done
	# IFS=space
	IFS=$'\ '
	unsetopt shwordsplit
	#
	if [ "$Anz1" -gt 0 ] ; then
		Nr=0
		while [ "$Nr" -lt "$Anz1" ] ; do
			(( Nr++ ))
			# exclude Datei loeschen, falls schon eine angelegt wurde,
			# in der while Schleife.
			rm -f ${gv_WorkDir}/exclude &>/dev/null
			if [ ! -z "${DIR_EXCLUDE[Nr]}" -a "${DIR_EXCLUDE[Nr]}" != - ] ; then
				print -l "${DIR_EXCLUDE[Nr]}" > ${gv_WorkDir}/exclude
			fi
			# Gibt es eine exclude Datei, wird diese mitbenutzt.
			if [ -f ${gv_WorkDir}/exclude ] ; then
				EXCLUDE_OPT="--delete --delete-excluded --exclude-from=${gv_WorkDir}/exclude"
			else
				unset -- EXCLUDE_OPT
			fi
			#
			# fuer alle Rechner ausfuehren
			for h in ${REMOTE_HOST[Nr]} ; {
				if [ "$h" = localhost -o "$h" = "`hostname`" ] ; then
					PROG_OPT="-avHAXu --numeric-ids -b --suffix=_`date +%d.%m.%Y` $EXCLUDE_OPT --bwlimit=${BW_LIMIT:-0} ${S_VERZ[Nr]} ${R_VERZ[Nr]}"
				else
					# remote-shell Optionen belegen
					if [ ! -z "${RSYNC_RSH[Nr]}" -o "${RSYNC_RSH[Nr]}" != - ] ; then
						# Kompression und remote Shell einschalten
						RSH_OPT="-ze ${RSYNC_RSH[Nr]}"
					else
						# Nur Kompression einschalten
						RSH_OPT="-z"
					fi
					# komplette rsync Optionen.
					PROG_OPT="-avHAXu --numeric-ids $RSH_OPT -b --suffix=_`date +%d.%m.%Y` $EXCLUDE_OPT --bwlimit=${BW_LIMIT:-0} ${S_VERZ[Nr]} ${h}:${R_VERZ[Nr]}"
				fi
				LOG_START_MSG=$(gettext 'Starte rsync nach $h ...')
				LOG_ERR_MSG=$(gettext 'Fatal: rsync ($h) mit Fehlern beendet!')
				LOG_FINISH_MSG=$(gettext 'Beende rsync nach $h ...')
				FINISH_MSG=$(gettext 'kwrsync_cron: rsync beendet ($h) ')
				ERROR_MSG=$(gettext 'kwrsync_cron: rsync Fehler ($h) ')
				# Logging beginnen.
				sys_logger -n syslog "$gv_ScriptName" "$LOG_START_MSG"
				if [ -n "$gv_Terminal" ] ; then
					TITLE=$(gettext 'Syncronisation')
					MSG=$(gettext 'Syncronisiere das Verzeichnis ${S_VERZ[Nr]} mit ${h}:${R_VERZ[Nr]}.')
					(rsync ${=PROG_OPT} 2>/dev/null || sys_logger -r syslog "$gv_ScriptName" "$LOG_ERR_MSG") | \
					progressbox "$TITLE" "$MSG"
					sys_logger -n syslog "$gv_ScriptName" "$LOG_FINISH_MSG"
					sync
				else
					rsync ${=PROG_OPT}
					# Rueckgabewert pruefen.
					# 0 = fehlerfrei, 
					# 24 ist harmlos; tritt auf, wenn waehrend der Laufzeit
					# von rsync noch (/tmp?) Dateien veraendert oder geloescht wurden.
					# Alles andere ist fatal -- siehe man (1) rsync
					if ! [ $? = 24 -o $? = 0 ] ; then
						sys_logger -r syslog "$gv_ScriptName" "$LOG_ERR_MSG"
						Not_Net=$(gettext 'kein Netz?')
						> "${gv_WorkDir}/error" <<< "$Not_Net"
						mail -s "$ERROR_MSG" $USER < "${gv_WorkDir}/error"
					else
						sys_logger -n syslog "$gv_ScriptName" "$LOG_FINISH_MSG"
						# Sicher ist sicher...
						sync
					fi
				fi
			}
			# exclude Datei loeschen
			rm -rf ${gv_WorkDir}/exclude &>/dev/null
		done
	else
		no_kwrsynctab_msg
	fi
}
#}}}
