# Funktion kwxen-tools_drive_conf# {{{
#
# usage: kwxen-tools_drive_conf
#
kwxen-tools_drive_conf() {
	# Funktiont parse_opt# {{{
	#
	# usage: parse_opt
	parse_opt() {
		grep -v '^#' "$1" | grep -v "^$" | sed -e "s# .*= # = #  ; s#\[ ## ; s# \]## ; s#ip=##g ; s#'##g" | while read Key b Value ; do
			case "$Key" in
				dhcp)
					# DHCP an oder aus# {{{
					if [ -n "$Value" ] ; then
						DOMU_DHCP=yes
					else
						DOMU_DHCP=""
					fi
					## }}}
					;;
				disk)
					# Festplatte oder lvm# {{{
					if [ -n "`print ${(M)${(R)${(f)"$(< ${1})"}##[#]}##*file:*}`" ] ; then
						DOMU_DIR="`print ${${${(M)${(R)${(f)"$(< ${1})"}##[#]}[(r)*file:*]}%%/domains*}`"
						DOMU_DISK="$DOMU_DIR"
					elif [ -n "`print ${(M)${(R)${(f)"$(< ${1})"}##[#]}##*phy:*}`" ] ; then
						DOMU_LVM="`print ${${${(M)${(R)${(f)"$(< ${1})"}##[#]}[(r)*phy:*]}#*dev/}%/*}`"
						DOMU_DISK="$DOMU_LVM"
					fi
					## }}}
					;;
				kernel)
					# Welcher Kernel soll gestartet werden.# {{{
					if [ -n "$Value" ] ; then
						DOMU_KERNEL="$Value"
					else
						DOMU_KERNEL="/boot/vmlinuz-`uname -r`"
					fi
					## }}}
					;;
				memory)
					# Wieviel Arbeitspeicher hat die DomU# {{{
					if [ -n "$Value" ] ; then
						DOMU_MEM="${Value}M"
					else
						DOMU_MEM=""
					fi
					## }}}
					;;
				name)
					# Name der DomU# {{{
					if [ -n "$Value" ] ; then
						DOMU_HOST="$Value"
					else
						DOMU_HOST=""
					fi
					## }}}
					;;
				nics)
					# Nummer der Netzwerk Interfaces fuer die DomU# {{{
					# Standard ist 1, 0 ist kein virtuelles Netzwerk
					if [ -z "$Value" ] ; then
						DOMU_NICS=1
					else
						DOMU_NICS="$Value"
					fi
					## }}}
					;;
				ramdisk)
					# initrd# {{{
					if [ -n "$Value" ] ; then
						DOMU_INITRD="$Value"
					else
						DOMU_INITRD="/boot/vmlinuz-`uname -r`"
					fi
					## }}}
					;;
				root)
					# Root Laufwerk# {{{
					if [ -n "$Value" ] ; then
						DOMU_ROOT="${Value%% *}"
					else
						DOMU_ROOT=""
					fi
					## }}}
					;;
				vif)
					# Netzwerk Adressen# {{{
					if [ -n "$Value" -a -z "$DOMU_DHCP" ] ; then
						DOMU_IP="`print ${${Value%,mac=*}//,/}`"
					else
						DOMU_IP=""
					fi
					## }}}
					;;
				builder)	#############extra selten benutzte Optionen################
					#
					;;
				cpu)
					# spezifiziert die CPU welche die DomU benutzen soll.
					# 1 - 1. CPU
					# 2 - 2. CPU
					# -1 - Standard, Xen hat freie Wahl
					;;
				cpus)
					# spezifiziert eine Liste von CPUs die die DomU benutzen
					# darf.
					# 0-3 - CPU 0,1,2,3
					# 0-3,^1 - CPU 0,2,3
					# 0-2,5 - CPU 0,1,2,5
					;;
				extra)
					#
					;;
				nfs_server)
					#
					;;
				nfs_root)
					#
					;;
				vcpus)
					#
					;;
				on_shutdown)
					# Loest einen "xm" shutdown oder den eleganteren shutdown# {{{
					# vom inneren der DomU aus.
					if [ -n "$Value"  ] ; then
						DOMU_SHUTDOWN="$Value"
					else
						DOMU_SHUTDOWN="destroy"
					fi
					## }}}
					;;
				on_reboot)
					# Loest einen "xm" reboot oder den eleganteren reboot# {{{
					# vom inneren der DomU aus.
					if [ -n "$Value"  ] ; then
						DOMU_REBOOT="$Value"
					else
						DOMU_REBOOT="reboot"
					fi
					## }}}
					;;
				on_crash)
					# Loest einen Zustand (shutdown/reboot/...) aus, falls# {{{
					# die DomU abstuerzt.
					if [ -n "$Value"  ] ; then
						DOMU_CRASH="$Value"
					else
						DOMU_CRASH="restart"
					fi
					## }}}
					;;
			esac
		done
	}
	## }}}
	# Funktion drive_menu# {{{
	DRIVE_MENU=($gv_Create \"\" $gv_Change \"\" $gv_Delete \"\" $gv_Back \"\")
	drive_menu() {
		menubox "$Vm_DomU" "$gv_Menupoint" "$DRIVE_MENU"
	}
	## }}}
	drive_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help
				drive_menu
				;;
			$gv_Create)
				# Laufwerk erstellen# {{{
				DOMU_METHODE="debootstrap"
				DOMU_ARCH="i386"
				DOMU_DIST="sid"
				DOMU_DHCP="yes"
				DOMU_SIZE="4G"
				DOMU_SWAP_SIZE="128M"
				kwxen-tools_conf -c
				## }}}
				drive_menu
				;;
			$gv_Change)
				# Laufwerk aendern# {{{
				# Funktion, domu_change_menu, VM Auswahl# {{{
				domu_change_menu() {
					radiolist "$Vm_DomU" "$CHANGE_MSG" "$CHANGE_MENU"
				}
				## }}}
				vm_display
				if [ -n "$DomU_Drive_M" ] ; then
					CHANGE_MENU=($DomU_Drive_M)
					CHANGE_MSG=$(gettext 'Aendern von VM (DomU).')
					domu_change_menu
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help domu_change_help
								domu_change_menu
								;;
							*)
								# VM aendern 
								# Konfigurationsdatei einlesen.
								parse_opt "${XEN_CONF_PATH}/${gv_Auswahl}.cfg"
								kwxen-tools_conf
								domu_change_menu
								#break
								;;
						esac
					done
				else
					no_vm_msg
				fi
				## }}}
				drive_menu
				;;
			$gv_Delete)
				# Laufwerk loeschen# {{{
				# Funktion, domu_del_menu, VM Auswahl# {{{
				domu_del_menu() {
					checklist "$Vm_DomU" "$gv_Delete_MSG" "$DEL_MENU"
				}
				## }}}
				vm_display
				if [ -n "$DomU_Drive_M" ] ; then
					DEL_MENU=($DomU_Drive_M)
					domu_del_menu
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help domu_del_help
								domu_del_menu
								;;
							*)
								# VM's loeschen
								integer Anz Open_Drive
								local Anz Open_Drive 
								unset -- Anz Open_Drive
								Vm_DomU_Del_Sel="$gv_Auswahl"
								# Optionen zum loeschen bei LVM herrausfinden# {{{
								Anz=0
								for i in $Vm_DomU_Del_Sel ; {
									Check_Drive=${${${(s,:,)${(M)${(M)${(R)${(f)"$(< ${XEN_CONF_PATH}/${i}.cfg)"}##[#]}##(#s)disk*}##*phy*}}[2]}%%/*}
									if [ -b /dev/mapper/${Check_Drive}-${i}--disk ] ; then
										# Gibts es LVM Gast Betriebssysteme werden sie hier
										# herruntergefahren.
										Open_Drive=${${(s: :)${(M)${(f)"$(LC_ALL=C ; dmsetup info /dev/mapper/${Check_Drive}-${i}--disk)"}##(Open count:*)}}[3]}
										if [ "$Open_Drive" = 1 ] ; then
											# Bei Open Count: 1 = stoppen
											xm shutdown -w $i &>/dev/null
										fi
										xen-delete-image --lvm=${Check_Drive} --hostname=${i}
									fi
								}
							## }}}
								# Loop Devices herrausbekommen# {{{
								Anz=0
								for i in $Vm_DomU_Del_Sel ; {
									# Loop Devices herrausbekommen, alle die mit "[ 'file:..." beginnen,
									# und herrunterfahren.
									Check_Drive=${${${(s,:,)${(M)${(M)${(R)${(f)"$(< ${XEN_CONF_PATH}/${i}.cfg)"}##[#]}##(#s)disk*}##*file*}}[2]}%%/domains*}
									if [ -d "$Check_Drive" ] ; then
										xm shutdown -w $i &>/dev/null
										xen-delete-image --dir=${Check_Drive} --hostname=$i
									fi
								}	
								#}}}
								break
								;;
						esac
					done
				else
					no_vm_msg
				fi
				## }}}
				drive_menu
				;;
			$gv_Back)	break
				;;
		esac
	done
}
## }}}
