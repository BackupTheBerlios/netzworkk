# Funktion manage_cryptdisk; verschluesselte Laufwerke managen.# {{{
#
# usage: manage_cryptdisk
#
manage_cryptdisk() {
	autoload -U kwcryptsetup_conf
	MANAGE_TITLE=$(gettext 'Laufwerke_managen')
	#
	# Funktion (luks_resize), vergroessern/verkleinern# {{{
	#
	luks_resize() {
		Resize_Opt="$1"
		RESIZE_MENU=($2)
		RESIZE_TITLE=$(gettext 'vergroessern/verkleinern')
		# Die Variable RESIZE_TITLE wird von der Funktion script_init belegt.
		menubox "$RESIZE_TITLE" "$SINGLE_BLOCK_DEVICE_MSG" "$RESIZE_MENU"
		while [ -n "$gv_Auswahl" ] ; do
			case "$gv_Auswahl" in
				HELP*)	script_help resize_help
					menubox "$RESIZE_TITLE" "$SINGLE_BLOCK_DEVICE_MSG" "$RESIZE_MENU"
					;;
				*)	# Auswahl uebernehmen
					CRYPT_DEV="$gv_Auswahl"
					if [ -b "$CRYPT_DEV" ] ; then
						case "$Resize_Opt" in
							-e)
								# vergroessern/extend# {{{
								case "$CRYPT_DEV" in
									/dev/[sh]d[a-z][0-9]|/dev/[sh]d[a-z][0-9][0-9]|/dev/[sh]d[a-z]/[0-9]*)
										# normale Partitionen
										hier_ist_noch_nichts Partitionen
										menubox "$RESIZE_TITLE" "$SINGLE_BLOCK_DEVICE_MSG" "$RESIZE_MENU"
										;;
									/dev/md[0-9]|/dev/md[0-9][0-9]|/dev/md/[0-9]*)
										# RAID Laufwerke vergroessern# {{{
										prog_check mdadm
										if [ ! -z "$PROGS" ] ; then
											raid_enlarge_dev $CRYPT_DEV
										fi
										## }}}
										break
										;;
									*)
										# LVMs ; VG_SIZE wird von der Funktion vg_free_size# {{{
										# belegt.
										vg_free_size "${CRYPT_DEV%/*}"
										convert_drive_size -i "$VG_SIZE"
										SIZE_KB1="$SIZE_KB"
										#
										LV_ENLARGE_SIZE_MSG=$(gettext 'Geben Sie bitte hier die Groesse ein, um die ihr LV vergroessert werden soll (3G = 3 GigaByte). Es sind noch "${SIZE_KB1}${SIZE_KB_ME}" frei.')
										number_input -D "$RESIZE_TITLE" "$LV_ENLARGE_SIZE_MSG"
										#
										while [ -n "$NUMBER" ] ; do
											# Laufwerksangaben in KiloByte umrechnen
											convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
											if [ -n "$SIZE_KB" ] ; then
												Size_Tmp="$SIZE_KB"
											fi
											convert_drive_size "$SIZE_KB_ME" "$SIZE_KB1"
											if [ -n "$SIZE_KB" ] ; then
												Old_Size_Tmp="$SIZE_KB"
											fi
											if [[ "$Size_Tmp" -lt "$Old_Size_Tmp" ]] ; then
												# Dateisystem checken und verkleinern.
												resize_fs -l +${Size_Tmp} $Old_Size_Tmp "$CRYPT_DEV"
												break
											else
												over_size_msg
												number_input -D "$RESIZE_TITLE" "$LV_ENLARGE_SIZE_MSG"
											fi
										done
										## }}}
										break
										;;
								esac
								## }}}
								;;
							-s)
								# verkleinern/reduce# {{{
								case "$CRYPT_DEV" in
									/dev/[sh]d[a-z][0-9]|/dev/[sh]d[a-z][0-9][0-9]|/dev/[sh]d[a-z]/[0-9]*)
										# normale Partitionen
										hier_ist_noch_nichts Partitionen
										menubox "$RESIZE_TITLE" "$SINGLE_BLOCK_DEVICE_MSG" "$RESIZE_MENU"
										;;
									/dev/md[0-9]|/dev/md[0-9][0-9]|/dev/md/[0-9]*)
										# RAID Laufwerke reduzieren# {{{
										prog_check mdadm
										if [ ! -z "$PROGS" ] ; then
											raid_reduce_dev $CRYPT_DEV
										fi
										## }}}
										break
										;;
									*)
										# LV reduzieren# {{{
										if [ "$NO_LVM" != yes ] ; then
											# LVMs ; LV_SIZE wird von der Funktion lv_free_size
											# belegt.
											lv_free_size "$CRYPT_DEV"
											convert_drive_size -i "$LV_SIZE"
											SIZE_KB1="$SIZE_KB"
											LV_REDUCE_SIZE_MSG=$(gettext 'Geben Sie die Groesse ein, um die das LV verkleinert werden soll (3G = 3 GigaByte). Diese LV besitzt insgesamt "${SIZE_KB1}${SIZE_KB_ME}".')
											number_input -D "$RESIZE_TITLE" "$LV_REDUCE_SIZE_MSG"
											while [ -n "$NUMBER" ] ; do
												# Laufwerksangaben in KiloByte umrechnen
												convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
												if [ -n "$SIZE_KB" ] ; then
													Size_Tmp="$SIZE_KB"
												fi
												convert_drive_size "$SIZE_KB_ME" "$SIZE_KB1"
												if [ -n "$SIZE_KB" ] ; then
													Old_Size_Tmp="$SIZE_KB"
												fi
												if [[ "$Size_Tmp" -lt "$Old_Size_Tmp" ]] ; then
													# Dateisystem checken und verkleinern.
													resize_fs -l -${Size_Tmp} $Old_Size_Tmp "$CRYPT_DEV"
													break
												else
													over_size_msg
													number_input -D "$RESIZE_TITLE" "$LV_REDUCE_SIZE_MSG"
												fi
											done
										fi
										## }}}
										break
										;;
								esac
								## }}}
								;;
						esac
					else
						no_block_dev_msg "$CRYPT_DEV"
					fi
					;;
			esac
		done
	}
	## }}}
	# Funktion (init_device),# {{{
	#
	# usage: init_device
	#
	init_device() {
		# Laufwerk initiieren
		unset -- PROG_OPT PROG_OPT1 SRC
		# Wenn die Source eine Datei (Container) ist, dann ein Loop Device benutzen
		SRC="${CRYPT_PATH}/${CRYPT_FILE}"
		if [ -f "$SRC" ] ; then
			# Loop Laufwerk erstellen
			lo_setup
			if [ -n "$gv_Loop_Dev" ] ; then
				losetup $gv_Loop_Dev ${CRYPT_PATH}/${CRYPT_FILE} || return 1
				SRC="$gv_Loop_Dev"
			else
				return 1
			fi
		fi
		# Schlüsseldatei benutzen?
		if [ ! -z "$KEY_FILE" -a "$KEY_FILE" != none -a -f "$KEY_FILE" ] ; then
			if [ "$SSL" = yes ] ; then
				decrypt -s "$KEY_FILE" 
				TMP_KEY="$gv_TmpKey"
			fi
			
			if [ "$GPG" = yes ] ; then
				decrypt -g "$KEY_FILE"
				TMP_KEY="$gv_TmpKey"
			fi
			#
			if [ "$USELUKS" = yes ] ; then
				PROG_OPT="$BATCH_MODE ${${PARAMS//--key-file*/}//--verify-passphrase*/} luksFormat $SRC "$TMP_KEY""
				PROG_OPT1="${${PARAMS//--verify-passphrase/}//--key-file*/--key-file $TMP_KEY} luksOpen $SRC ${CRYPT_PREFIX}-${CRYPT_FILE}"
			else
				PROG_OPT="${${PARAMS//--key-file*/}//--verify-passphrase*/} create ${CRYPT_PREFIX}-${CRYPT_FILE} $SRC --key-file "$TMP_KEY""
			fi
		else
			# ohne Schlüsseldatei,
			# Überprüfen, ob man eine Passphrase benötigt.
			if [ "$MAKESWAP" != yes ] ; then
	            # Passphrase eingeben
	            PASSWD_MSG=$(gettext 'Geben Sie die Passphrase fuer das Laufwerk ${CRYPT_PREFIX}-${CRYPT_FILE} ein und wiederholen es im Feld darunter. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
	            mixed_password "$gv_Passwd_TITLE" "$PASSWD_MSG" 8 21
				[[ -z "$gv_Pass" ]] && return 1
			fi
			# LUKS und Swap Optionen belegen
			if [ "$USELUKS" = yes -a "$MAKESWAP" != yes ] ; then
				PROG_OPT="$BATCH_MODE ${${PARAMS//--key-file*/}//--verify-passphrase*/} luksFormat $SRC"
				PROG_OPT1="${${PARAMS//--key-file*/}//--verify-passphrase/} luksOpen $SRC ${CRYPT_PREFIX}-${CRYPT_FILE}"
			elif [ "$USELUKS" = yes -a "$MAKESWAP" = yes ] ; then
				gv_Pass="/dev/urandom"
				PROG_OPT="$BATCH_MODE ${PARAMS//--verify-passphrase*/} luksFormat $SRC"
				PROG_OPT1="${${PARAMS//--key-file*/--key-file=/dev/urandom}//--verify-passphrase/} create ${CRYPT_PREFIX}-${CRYPT_FILE} $SRC"
			else
				PROG_OPT="${${PARAMS//--key-file*/--key-file=/dev/urandom}//--verify-passphrase*/} create ${CRYPT_PREFIX}-${CRYPT_FILE} $SRC"
			fi
		fi
		#
		if [ ! -z "$PROG_OPT" -a ! -z "$PROG_OPT1" ] ; then
			if [ -n "$gv_Pass" -a "$gv_Pass" != /dev/urandom ] ; then
				echo $gv_Pass | cryptsetup ${=PROG_OPT} || return 1
				echo $gv_Pass | cryptsetup ${=PROG_OPT1} || return 1
			elif [ -n "$gv_Pass" -a "$gv_Pass" = /dev/urandom ] ; then
				cat $gv_Pass | cryptsetup ${=PROG_OPT} || return 1
				cryptsetup ${=PROG_OPT1} || return 1
			else
				cryptsetup ${=PROG_OPT} || return 1
				cryptsetup ${=PROG_OPT1} || return 1
			fi
		else
			if [ -n "$gv_Pass" ] ; then
				echo $gv_Pass | cryptsetup ${=PROG_OPT} || return 1
			else
				cryptsetup ${=PROG_OPT} || return 1
			fi
		fi
		return 0
	}
	## }}}
	# Funktion (create_action) Laufwerk erstellen# {{{
	#
	# Die Variable $gv_Sudo wird von der Funktion root_check
	# erstellt wenn man das Script kwcryptsetup mittels dem
	# Programm sudo aufruft.
	#
	# usage: create_action [ -p ]
	create_action() {
		local Part_Size
		DD_MSG=$(gettext 'Status beim ueberschreiben von Laufwerk ${CRYPT_PATH}/${CRYPT_FILE}.')
		# Funktion change_crypttab# {{{
		change_crypttab() {
			print -l ${(R)"${(f)$(< $TABFILE)}"##${CRYPT_PREFIX}-${CRYPT_FILE}[[:space:]]*} >${gv_WorkDir}/crypttab
			if [[ $MAKESWAP == yes ]] ; then
				>> "${gv_WorkDir}/crypttab" <<< "${CRYPT_PREFIX}-${CRYPT_FILE} ${CRYPT_PATH}/${CRYPT_FILE} /dev/urandom ${OPT//[,]#luks/}"
			else
				>> "${gv_WorkDir}/crypttab" <<< "${CRYPT_PREFIX}-${CRYPT_FILE} ${CRYPT_PATH}/${CRYPT_FILE} $KEY_FILE $OPT"
			fi
			mv ${gv_WorkDir}/crypttab $TABFILE
		}
		## }}}
		# Die Option -p ist fuer die Verschluesselung von Partitionen,
		# LVMs und RAID Laufwerken.
		# Der Rest fuer verschluesselte Container.
		if [ "$1" = -p ] ; then
			Part_Size=${${(s: :)$(export LC_ALL=C ; fdisk -l ${CRYPT_PATH}/${CRYPT_FILE} 2>/dev/null)}[5]}	
			# Groesse umrechnen
			#convert_drive_size MB "$Part_Size"
			if [ -n "$Part_Size" ] ; then
				dd if=/dev/urandom of=${CRYPT_PATH}/${CRYPT_FILE} bs=1 count=${Part_Size} >/dev/null 2>$gv_LogFile &
				# Fortschrittsanzeige
				dd_gauge "dd if=/dev/urandom of=${CRYPT_PATH}/${CRYPT_FILE} bs=1 count=${Part_Size}" "$Part_Size" "$DD_MSG"
			else
				return 1
			fi
		else
			# Groesse umrechnen
			convert_drive_size "${SIZE##*[0-9]}" "${SIZE%%[a-zA-Z]*}"
			if [ -n "$SIZE_KB" ] ; then
				Size="${SIZE_KB%%.*}"
				# nochmal KB in Byte umrechnen, fuer dd_gauge
				(( Part_Size = Size * 1024 ))
				dd if=/dev/urandom of=${CRYPT_PATH}/${CRYPT_FILE} bs=1 count=${Part_Size} >/dev/null 2>$gv_LogFile &
				# Fortschrittsanzeige
				dd_gauge "dd if=/dev/urandom of=${CRYPT_PATH}/${CRYPT_FILE} bs=1 count=${Part_Size}" "$Part_Size" "$DD_MSG"
			else
				return 1
			fi
		fi
		#
		init_device
		# Fehlermeldung falls das Laufwerk nicht erstellt werden konnte.
		if [ "$?" != 0 ] ; then
			MSG=$(gettext 'Das Laufwerk ${CRYPT_PREFIX}-${CRYPT_FILE} konnte nicht erstellt werden.')
			msgbox "$gv_Attention" "$MSG"
			lo_setup -r $SRC
		else
			# Laufwerke erstellen
			if [[ $MAKESWAP == yes ]] ; then
				# Swap Laufwerk erstellen.
				cryptdisk_swap "${CRYPT_PREFIX}-${CRYPT_FILE}"
				change_crypttab
				MSG=$(gettext 'Sie koennen jetzt in die Datei /etc/fstab folgendes eintragen:
${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}	swap	swap	defaults	0	0')
				msgbox "$gv_Info" "$MSG"
				# Falls ein Loop Device benutzt wurde entfernen.
				loop_close "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}"
			elif [[ -n $TMPFS ]] ; then
				# Temporaeres Laufwerk erstellen.
				cryptdisk_tmp "${CRYPT_PREFIX}-${CRYPT_FILE}"
				change_crypttab
				MSG=$(gettext 'Sie koennen jetzt in die Datei /etc/fstab folgendes eintragen:
${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}	/tmp	$TMPFS	nodev,nosuid	0	0')
				msgbox "$gv_Info" "$MSG"
				# Falls ein Loop Device benutzt wurde entfernen.
				loop_close "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}"
			else
				# Laufwerk mit dem dementsprechenden Dateisystem formatieren.
				# Wenn die Formatierung verneint wird, wird trotzdem
				# ein Eintrag in der /etc/crypttab getaetigt.
				format "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}"
				if [ "$?" != 0 ] ; then
					change_crypttab
				else
					change_crypttab
					MSG=$(gettext 'Sie koennen jetzt in die Datei /etc/fstab folgendes eintragen:
${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}	MOUNTPUNKT	$FS	OPTIONEN	0	0')
					msgbox "$gv_Info" "$MSG"
				fi
				# 
				loop_close "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}"
			fi
		fi
		# entschluesselte Schluesseldatei schreddern
		clean_keys
		unset -- gv_Pass
	}
	## }}}
	# Funktion (manage_menu)# {{{
	#
	MANAGE_MENU=($gv_Display \"\" $gv_Create \"\"
	$gv_Change \"\" $gv_Enlarge \"\" $gv_Reduce \"\"
	$gv_Delete \"\" $gv_Back \"\")
	manage_menu() {
		if [[ ${#argv} == 1 ]] ; then
			menubox -d "$1" "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_MENU"
		else
			menubox "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_MENU"
		fi
	}
	## }}}
	manage_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help manage_help
				manage_menu
				;;
			$gv_Display)
				# Ansicht der Konfigurations Datei /etc/crypttab# {{{
				search_cryptdev
				if [ -n "$MAP_DEV" ] ; then
					view_file "$TABFILE"
				else
					no_cryptdev_msg
				fi
				## }}}
				manage_menu $gv_Display
				;;
			$gv_Create)
				# Verschluesseltes Device erstellen# {{{
				OVERWRITE_MSG=$(gettext 'Das Laufwerk $CRYPT_FILE existiert schon. Soll es ueberschrieben werden (ja/nein)?

Bei \"nein\" wird abgebrochen.')
				#
				# Funktion create_menu# {{{
				create_menu() {
					CREATE_TITLE=($gv_Create)
					CREATE_MENU=($lv_Container \"\" $lv_Partition \"\"
					$lv_Swap \"\" $gv_Back \"\")
					menubox "$CREATE_TITLE" "$gv_Menupoint" "$CREATE_MENU"
				}
				## }}}
				#
				CREATE=yes
				create_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help create_help
							create_menu
							;;
						$lv_Container)
							# Verzeichnis auswaehlen und Dateinamen eingeben.# {{{
							dselect "$VERZ"
							if [ -n "$VERZ" ] ; then
								dselect_check -c "$VERZ"
								if [ -n "$VERZ" ] ; then
									CONT_TITLE=(${gv_Create}::${lv_Container})
									CONT_MSG=$(gettext 'Geben Sie bitte einen Namen fuer den Container ein.')
									inputbox "$CONT_TITLE" "$CONT_MSG"
									if [ -n "$gv_Auswahl" ] ; then
										# Variablen fuer create_action belegen
										CRYPT_PATH="$VERZ"
										CRYPT_FILE="$gv_Auswahl"
										# existierendes Laufwerk ueberschreiben?
										if [ -f "${VERZ}/${CRYPT_FILE}" ] ; then
											yesno "$CONT_TITLE" "$OVERWRITE_MSG"
											if [ "$?" = 0 ] ; then
												# urspruengliche Groesse herrausbekommen.
												Src=${${${(s: :)${(M)"${(f)$(< $TABFILE)}"##*${VERZ}/${CRYPT_FILE}[[:space:]]*}}[2]}%% *}
												if [ -f "$Src" ] ; then
													SIZE=${${${(s: :)$(LANG=C ; LC_NUMERIC=en ; ls -lh $Src)}[5]}%.*}
												fi
												#
												CRYPT_FILE_OLD=${${(s: :)${(M)$(< $TABFILE)##*$CRYPT_FILE*}}[1]}
												cryptdisk_stop -c "${CRYPT_FILE_OLD}"
												# Standard Konfiguration einlesen.
												parse_opts "$CRYPT_FILE_OLD"
												parse_key "$CRYPT_FILE_OLD"
												kwcryptsetup_conf --cont
												if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
													create_action
												fi
											fi
										else
											# Standard Konfiguration einlesen.
											read_file kwcryptsetup_conf
											kwcryptsetup_conf --cont
											if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
												create_action
											fi
										fi
									else
										no_input_msg
									fi
								fi
							fi
							## }}}
							create_menu
							;;
						$lv_Partition)
							# Partitionen/LVM/RAID verschluesseln# {{{
							unset -- Parts
							Create_Opt="$gv_Auswahl"
							disk
							partdb
							if [ -n "${PART_E[1]}" ] ; then
								# Partitionen
								if [ -n "$PART_E" ] ; then
									Parts="$Parts $PART_E"
								fi
								# RAID Arrays finden und zur Auswahl stellen.
								raid_filter -l
								# LV's finden.
								lv
								if [ -n "${LV_E[1]}" ] ; then
									Parts="$Parts $LV_E"
								fi
								if [ -n "${R_DEVS_E[1]}" ] ; then
									Parts="$Parts $R_DEVS_E"
								fi
								# Gefundene Devices zur Auswahl anbieten.
								part_choice "$Parts"
								#
								if [ -n "$WERT" ] ; then
									# Variablen fuer create_action belegen
									CRYPT_PATH="${WERT%/*}"
									CRYPT_FILE="${WERT##*/}"
									# existierendes Laufwerk ueberschreiben?
									if [ -b "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}" ] ; then
										PART_TITLE=(${gv_Create}::${lv_Partition})
										yesno "$PART_TITLE" "$OVERWRITE_MSG"
										if [ "$?" = 0 ] ; then
											cryptdisk_stop -c "${CRYPT_FILE}"
											parse_opts "$CRYPT_FILE"
											parse_key "$CRYPT_FILE"
											kwcryptsetup_conf --part
											if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
												create_action -p
											fi
										fi
									else
										# Standard Konfiguration einlesen.
										read_file kwcryptsetup_conf
										kwcryptsetup_conf --part
										if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
											create_action -p
										fi
									fi
								else
									no_part_choice_msg
								fi
							else
								no_part_msg
							fi
							## }}}
							create_menu
							;;
						$lv_Swap)
							# Swap Partitionen/LVM/RAID verschluesseln# {{{
							unset -- Parts
							Create_Opt="$gv_Auswahl"
							disk
							partdb
							if [ -n "${PART_E[1]}" ] ; then
								# Swap Laufwerke
								if [ -n "${SWAP_DEV_E[1]}" ] ; then
									Parts="$SWAP_DEV_E"
								fi
								# RAID Arrays finden und zur Auswahl stellen.
								raid_filter -l
								# LV's finden.
								lv
								if [ -n "${LV_E[1]}" ] ; then
									Parts="$Parts $LV_E"
								fi
								if [ -n "${R_DEVS_E[1]}" ] ; then
									Parts="$Parts $R_DEVS_E"
								fi
								# Gefundene Devices zur Auswahl anbieten.
								part_choice "$Parts"
								#
								if [ -n "$WERT" ] ; then
									# Variablen fuer create_action belegen
									CRYPT_PATH="${WERT%/*}"
									CRYPT_FILE="${WERT##*/}"
									# existierendes Laufwerk ueberschreiben?
									if [ -b "${MAPPER}/${CRYPT_PREFIX}-${CRYPT_FILE}" ] ; then
										PART_TITLE=(${gv_Create}::${lv_Partition})
										yesno "$PART_TITLE" "$OVERWRITE_MSG"
										if [ "$?" = 0 ] ; then
											cryptdisk_stop -c "${CRYPT_FILE}"
											parse_opts "$CRYPT_FILE"
											parse_key "$CRYPT_FILE"
											# Swap Laufwerke creieren
											kwcryptsetup_conf --swap
											if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
												create_action -p
											fi
										fi
									else
										# Standard Konfiguration einlesen.
										read_file kwcryptsetup_conf
										# Swap Laufwerke creieren
										kwcryptsetup_conf --swap
										if [ -n "$gv_Auswahl" -a ! -z "$PARAMS" ] ; then
											create_action -p
										fi
									fi
								else
									no_part_choice_msg
								fi
							else
								no_part_msg
							fi
							## }}}
							create_menu
							;;
						$gv_Back)	break
							;;
					esac
				done
				## }}}
				manage_menu $gv_Create
				;;
			$gv_Change)
				# Verschluesseltes Laufwerk veraendern# {{{
				unset -- MOUNT_PATH
				search_cryptdev
				# zur Auswahl anbieten
				if [ -n "${MAP_DEV[1]}" ] ; then
					CHANGE_MENU=($MAP_DEV)
					CHANGE_TITLE="$gv_Change"
					CHANGE_MSG=$(gettext 'Waehlen Sie ein Laufwerk/Container zum veraendern aus.')
					menubox "$CHANGE_TITLE" "$CHANGE_MSG" "$CHANGE_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help change_help
								menubox "$CHANGE_TITLE" "$CHANGE_MSG" "$CHANGE_MENU"
								;;
							*)	# Auswahl veraendern
								DEVICE="$gv_Auswahl"
								# Wenn das Laufwerk aktiv ist, deaktivieren.
								if [ -b "${MAPPER}/${DEVICE}" ] ; then
									cryptdisk_stop -c "$DEVICE"
								fi
								# Laufwerks Optionen einlesen
								parse_opts "$DEVICE"
								parse_key "$DEVICE"
								# Bei Swap eine andere Konfiguration einlesen
								if [[ $MAKESWAP == yes ]] ; then
									kwcryptsetup_conf --swap
								else	
									kwcryptsetup_conf --change
								fi
								#
								if [ ! -z "$OPT" -a -n "$gv_Auswahl" ] ; then
									# Auswahl aus der /etc/crypttab loeschen.
									if [ -n ${${(M)"${(f)$(< $TABFILE)}"##${DEVICE}[[:space:]]*}%% *} ] ; then
										Dst=${${${(s: :)${(M)"${(f)$(< $TABFILE)}"##${DEVICE}[[:space:]]*}}[1]}%% *}
										Src=${${${(s: :)${(M)"${(f)$(< $TABFILE)}"##${DEVICE}[[:space:]]*}}[2]}%% *}
										print -l ${(R)"${(f)$(< $TABFILE)}"##${DEVICE}[[:space:]]*} >${gv_WorkDir}/crypttab
										if [ -n "$KEY_FILE" ] ; then
											>> ${gv_WorkDir}/crypttab <<< "$Dst $Src $KEY_FILE $OPT"
										else
											>> ${gv_WorkDir}/crypttab <<< "$Dst $Src none $OPT"
										fi
										mv ${gv_WorkDir}/crypttab $TABFILE
										# Laufwerk wieder starten
										cryptdisk_start "$DEVICE"
									fi
								fi
								break
								;;
						esac
					done
				else
					no_cryptdev_msg
				fi
				## }}}
				manage_menu $gv_Change
				;;
			$gv_Enlarge)
				# LUKS Partition vergroessern# {{{
				search_cryptdev -l
				if [ -n "${MAP_DEV[1]}" ] ; then
					luks_resize -e "$MAP_DEV"
				else
					no_luks_cryptdev_msg
				fi
				## }}}
				manage_menu $gv_Enlarge
				;;
			$gv_Reduce)
				# LUKS Partition verkleinern# {{{
				search_cryptdev -l
				if [ -n "${MAP_DEV[1]}" ] ; then
					luks_resize -s "$MAP_DEV"
				else
					no_luks_cryptdev_msg
				fi
				## }}}
				manage_menu $gv_Reduce
				;;
			$gv_Delete)
				# Verschluesselte Laufwerke loeschen# {{{
				search_cryptdev
				# zur Auswahl anbieten
				if [ -n "${MAP_DEV_M[1]}" ] ; then
					DEL_MENU=($MAP_DEV_M)
					DEL_TITLE="$gv_Delete"
					DEL_MSG=$(gettext 'Waehlen Sie ein oder mehrere Laufwerke/Container zum loeschen aus.')
					checklist "$DEL_TITLE" "$DEL_MSG" "$DEL_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help del_help
								checklist "$DEL_TITLE" "$DEL_MSG" "$DEL_MENU"
								;;
							*)	# Auswahl loeschen
								for L in ${=gv_Auswahl} ; {
									cryptdisk_stop -c "$L"
									# Auswahl aus der /etc/crypttab loeschen.
									if [ ! -z "`print ${(M)"${(f)$(< $TABFILE)}"##${L}[[:space:]]*}`" ] ; then
										Dst=${${(s: :)${(M)"${(f)$(< $TABFILE)}"##${L}[[:space:]]*}}[2]}
										print -l ${(R)"${(f)$(< $TABFILE)}"##${L}[[:space:]]*} >${gv_WorkDir}/crypttab
										mv ${gv_WorkDir}/crypttab $TABFILE
										if [ -f "$Dst" ] ; then
											rm -f "$Dst" &>/dev/null
										fi
									fi
								}
								break
								;;
						esac
					done
				else
					no_cryptdev_msg
				fi
				## }}}
				manage_menu $gv_Delete
				;;
			$gv_Back)	break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
