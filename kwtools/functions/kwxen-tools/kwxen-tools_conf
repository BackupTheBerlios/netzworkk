# Funktion kwxen-tools_conf{{{
#
# benoetigt die Funktionen check_memory, convert_drive_size, no_memory_msg,
# iface_*, conf_hostname, mac_address, kernel_choice und initrd_choice,
# die in bootloader_conf, sys_conf, hw_conf und in net_conf vorhanden sind.
#
# usage: kwxen-tools_conf [ -c ]
# -c - Laufwerk kreieren
#
kwxen-tools_conf() {
	local Menu_Opt
	unset -- Menu_Opt
	Menu_Opt="$1"
	# Variablen# {{{
	lv_Accounts=$(gettext 'Benutzerfaecher')
	lv_Admins=$(gettext 'Admins')
	lv_Arch=$(gettext 'Architektur')
	lv_Broadcast=$(gettext 'Broadcast')
	lv_Cache=$(gettext 'Cache')
	lv_Conffile=$(gettext 'Konfigurationsdatei')
	lv_Dhcp=$(gettext 'DHCP')
	lv_Filesystem=$(gettext 'Dateisystem')
	lv_Function=$(gettext 'Funktion')
	lv_Function_Arg=$(gettext 'Funktionsargumente')
	lv_Function_Dir=$(gettext 'Funktionsverz.')
	lv_Gateway=$(gettext 'Gateway')
	lv_General=$(gettext 'Generell')
	lv_Hooks=$(gettext 'hooks')
	lv_Host=$(gettext 'Rechnername')
	lv_Ide_Name=$(gettext 'IDE_Namen')
	lv_Image_Size=$(gettext 'Imagegroesse')
	lv_Image_Vol=$(gettext 'Image_Volume')
	lv_Image_Keep=$(gettext 'Image_aufbewahren')
	lv_Initrd=$(gettext 'Initrd')
	lv_Install=$(gettext 'Installation')
	lv_Install_No=$(gettext 'keine_Installation')
	lv_Ip=$(gettext 'IP')
	lv_Kernel=$(gettext 'Kernel')
	lv_Lvm=$(gettext 'LVM')
	lv_Mac=$(gettext 'MAC-Adresse')
	lv_Mandatory=$(gettext 'zwingend')
	lv_Netmask=$(gettext 'Netzmaske')
	lv_Network=$(gettext 'Netzwerk')
	lv_Memory=$(gettext 'Arbeitsspeicher')
	lv_Override=$(gettext 'ueberschreiben')
	lv_Password=$(gettext 'Passwort')
	lv_Size=$(gettext 'Groesse')
	lv_Start=$(gettext 'Start')
	lv_Swap_No=$(gettext 'keine_Swap')
	lv_Swap_Size=$(gettext 'Swapgroesse')
	lv_Swap_Vol=$(gettext 'Swap_Volume')
	lv_Dist=$(gettext 'Distribution')
	lv_Methode=$(gettext 'Methode')
	lv_Src=$(gettext 'Quelle')
	lv_Server=$(gettext 'Server')
	lv_Template=$(gettext 'Vorlage')
	## }}}
	# Funktion domu_dev, Auswahl eines physikalischen/logischen Volumes# {{{
	# das benutzt werden soll.
	domu_dev() {
		if [ "$#" = 1 ] ; then
			unset -- DOMU_DEV
			lv
			if [ -n "$LV_E" ] ; then
				LVM_MSG="$1"
				LVM_MENU=($VG_E)
				menubox "$gv_Configuration" "$LVM_MSG" "$LVM_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	# Hilfe
							script_help kwxen-tools_conf_help
							menubox "$gv_Configuration" "$LVM_MSG" "$LVM_MENU"
							;;
						*)
							# Wert uebernehmen und die Variable DOMU_DIR DOMU_LVM
							# loeschen.
							# freie Groesse pruefen, wird in MByte ausgegeben.
							lv_free_size "$gv_Auswahl"
							if [ -n "$LV_SIZE" ] ; then
								convert_drive_size m ${LV_SIZE}
								Kb_Is_Free="${SIZE_KB}"
								check_size_input -a
								DOMU_DEV="$gv_Auswahl"
								unset -- DOMU_DIR DOMU_LVM
							fi
							break
							;;
					esac
				done
			else
				no_lv_msg
				unset -- DOMU_DEV
			fi
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Funktion no_mandatory_conf_msg# {{{
	no_mandatory_conf_msg() {
		MSG="$(gettext 'Sie muessen erst einen der Menuepunkte "LVM" oder "$gv_Directory" mit einem Wert belegen.')"
		msgbox "$gv_Attention" "$MSG"
	}
	## }}}
	#########################################
	# beide Funktionen vereinen?
	# Funktion kwxen-tools_input_size# {{{
	#
	# usage: kwxen-tools_input_size
	#
	kwxen-tools_input_size() {
		DOMU_SIZE_MSG=$(gettext 'Geben Sie die Groesse des Gast Betriebssystem ein (Bsp.: 1G, 500M, 1024000000K). Es sind noch "$Kb_Is_Free" KByte frei.')
		number_input -D "$gv_Configuration" "$DOMU_SIZE_MSG" "$DOMU_SIZE"
		if [ -n "$NUMBER" ] ; then
			convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
			# check ob die Groesse ueberschritten wird.
			###########################################
			# SIZE_KB + evtl. SWAP_SIZE
			###########################################
			#
			if [ "$SIZE_KB" -le "$Kb_Is_Free" ] ; then
				DOMU_SIZE="$NUMBER"
			else
				no_space_fp_msg -e "$NUMBER" "$Kb_Is_Free"
			fi
		else
			DOMU_SIZE=""
		fi
	}
	## }}}
	# Funktion kwxen-tools_swap_size# {{{
	#
	# usage: kwxen-tools_swap_size
	#
	kwxen-tools_swap_size() {
		SWAP_SIZE_MSG=$(gettext 'Geben Sie die Groesse des Swap Laufwerks ein (Bsp.: 1G, 500M, 1024000000K). Es sind noch "$Kb_Is_Free" KByte frei.')
		number_input -D "$gv_Configuration" "$SWAP_SIZE_MSG" "$DOMU_SWAP_SIZE"
		if [ -n "$NUMBER" ] ; then
			convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
			# check ob die Groesse ueberschritten wird.
			###########################################
			# SIZE_KB + evtl. DOMU_SIZE
			###########################################
			if [ "$SIZE_KB" -le "$Kb_Is_Free" ] ; then
				DOMU_SWAP_SIZE="$NUMBER"
			else
				no_space_fp_msg -e "$NUMBER" "$Kb_Is_Free"
			fi
		else
			DOMU_SWAP_SIZE=""
		fi
	}
	## }}}
	#########################################
	# Funktion check_size_input# {{{
	#
	# benoetigt den Wert der Variable Kb_Is_Free
	#
	# usage: check_size_input [ -a | -d | -s ]
	# -a - Swap + Disk
	# -d - Disk
	# -s - Swap
	#
	check_size_input() {
		local Opt
		unset -- Opt
		Opt="$1"
		case "$Opt" in
			-a)
				# Swap und Diskgroesse addieren und auf freien Platz pruefen.# {{{
				if [ -n "$DOMU_SWAP_SIZE" -a "$DOMU_NO_SWAP" != no ] ; then
					convert_drive_size "${DOMU_SWAP_SIZE##*[0-9]}" "${DOMU_SWAP_SIZE%%[a-zA-Z]*}"
					Swap_Kb="$SIZE_KB"
				fi
				#
				if [ -n "$DOMU_SIZE" ] ; then
					convert_drive_size "${DOMU_SIZE##*[0-9]}" "${DOMU_SIZE%%[a-zA-Z]*}"
					Disk_Kb="$SIZE_KB"
				fi
				# zusammenrechnen
				if [ -n "$Swap_Kb" -a -n "$Disk_Kb" ] ; then
					(( Full_Size = Swap_Kb+Disk_Kb ))
				elif [ -n "$Swap_Kb" ] ; then
					Full_Size="$Disk_Kb"
				elif [ -n "$Swap_Kb" ] ; then
					Full_Size="$Swap_Kb"
				fi
				# Verfuegbaren Platz pruefen.
				if [ -z "$Kb_Is_Free" -o "$Kb_Is_Free" -lt "$Full_Size" ] ; then
					no_space_fp_msg
				fi
				## }}}
				;;
			-d)
				# normale Disk Pruefung und Eingabe der Groesse# {{{
				if [ -n "$DOMU_SWAP_SIZE" -a "$DOMU_NO_SWAP" != no ] ; then
					convert_drive_size "${DOMU_SWAP_SIZE##*[0-9]}" "${DOMU_SWAP_SIZE%%[a-zA-Z]*}"
					Swap_Kb="$SIZE_KB"
					# Ist die Variable Kb_Is_Free leer oder kleiner als
					# 314MByte , 250 MB System und 64 MB Swap (321536 KByte)
					# kommt eine Fehlermeldung ueber nicht genuegend Platz.
					(( Min_Free = 256000+Swap_Kb ))
					if [ -z "$Kb_Is_Free" -o "$Kb_Is_Free" -lt "$Min_Free" ] ; then
						no_space_fp_msg
					else
						kwxen-tools_input_size
					fi
				else
					# Ist die Variable Kb_Is_Free leer oder kleiner als
					# 250MByte (256000 KByte) kommt eine Fehlermeldung
					# ueber nicht genuegend Platz.
					if [ -z "$Kb_Is_Free" -o "$Kb_Is_Free" -lt 256000 ] ; then
						no_space_fp_msg
					else
						kwxen-tools_input_size
					fi
				fi
				## }}}
				;;
			-s)
				# Swap Pruefung und Eingabe der Groesse# {{{
				if [ -n "$DOMU_SIZE" ] ; then
					convert_drive_size "${DOMU_SIZE##*[0-9]}" "${DOMU_SIZE%%[a-zA-Z]*}"
					Disk_Kb="$SIZE_KB"
					# Ist die Variable Kb_Is_Free leer oder kleiner als
					# 314MByte , 250 MB System und 64 MB Swap (321536 KByte)
					# kommt eine Fehlermeldung ueber nicht genuegend Platz.
					(( Min_Free = 65536+Disk_Kb ))
					if [ -z "$Kb_Is_Free" -o "$Kb_Is_Free" -lt "$Min_Free" ] ; then
						no_space_fp_msg
					else
						kwxen-tools_swap_size
					fi
				else
					# Ist die Variable Kb_Is_Free leer oder kleiner als
					# 250MByte (256000 KByte) kommt eine Fehlermeldung
					# ueber nicht genuegend Platz.
					if [ -z "$Kb_Is_Free" -o "$Kb_Is_Free" -lt 65536 ] ; then
						no_space_fp_msg
					else
						kwxen-tools_swap_size
					fi
				fi
				## }}}
				;;
		esac
	}
	## }}}
	# Funktion kwxen-tools_create_menu# {{{
	kwxen-tools_create_menu() {
		if [ "$Menu_Opt" = -c ] ; then
			if [ "$DOMU_METHODE" = debootstrap ] ; then
				DRIVE_CONF_MENU=(\"---$lv_General---\" \"\" $lv_Accounts \"$DOMU_ACCOUNT\" $lv_Admins \"$DOMU_ADMIN\" $lv_Memory \"$DOMU_MEM\" $lv_Cache \"$DOMU_CACHE\" $lv_Conffile \"$DOMU_CONFIG\" $lv_Filesystem \"$DOMU_FS\" $lv_Function \"$DOMU_ROLE\" $lv_Function_Arg \"$DOMU_ROLE_ARGS\" $lv_Function_Dir \"$DOMU_ROLE_DIR\" $lv_Size \"$DOMU_SIZE\" $lv_Ide_Name \"$DOMU_IDE\" $lv_Image_Size \"$DOMU_IMAGE\" $lv_Image_Vol \"$DOMU_IMAGE_DEV\" $lv_Image_Keep \"$DOMU_KEEP\" $lv_Initrd \"$DOMU_INITRD\" $lv_Install_No \"$DOMU_NO_INSTALL\" $lv_Kernel \"$DOMU_KERNEL\" $lv_Hooks \"$DOMU_HOOKS\" $lv_Password \"$DOMU_PASSWD\" $lv_Start \"$DOMU_BOOT\" $lv_Swap_Size \"$DOMU_SWAP_SIZE\" $lv_Swap_Vol \"$DOMU_SWAP_DEV\" $lv_Swap_No \"$DOMU_NO_SWAP\" $lv_Override \"$DOMU_FORCE\" \"---$lv_Install---\" \"\" $lv_Arch \"$DOMU_ARCH\" $lv_Dist \"$DOMU_DIST\" $lv_Methode \"$DOMU_METHODE\" $lv_Src \"$DOMU_SOURCE\" $lv_Server \"$DOMU_MIRROR\" $lv_Template \"$DOMU_TEMP\" \"---$lv_Network---\" \"\" $lv_Dhcp \"$DOMU_DHCP\" $lv_Ip \"$DOMU_IP\" $lv_Broadcast \"$DOMU_BCAST\" $lv_Netmask \"$DOMU_NETMASK\" $lv_Gateway \"$DOMU_GATE\" $lv_Mac \"$DOMU_MAC\" \"---$lv_Mandatory---\" \"\" $lv_Lvm \"$DOMU_LVM\" $lv_Host \"$DOMU_HOST\" $gv_Directory \"$DOMU_DIR\" $gv_Create \"\" $gv_Back \"\")
			elif [ "$DOMU_METHODE" = rpmstrap ] ; then
				DRIVE_CONF_MENU=(\"---$lv_General---\" \"\" $lv_Accounts \"$DOMU_ACCOUNT\" $lv_Admins \"$DOMU_ADMIN\" $lv_Memory \"$DOMU_MEM\" $lv_Conffile \"$DOMU_CONFIG\" $lv_Filesystem \"$DOMU_FS\" $lv_Function \"$DOMU_ROLE\" $lv_Function_Arg \"$DOMU_ROLE_ARGS\" $lv_Function_Dir \"$DOMU_ROLE_DIR\" $lv_Size \"$DOMU_SIZE\" $lv_Ide_Name \"$DOMU_IDE\" $lv_Image_Size \"$DOMU_IMAGE\" $lv_Image_Vol \"$DOMU_IMAGE_DEV\" $lv_Image_Keep \"$DOMU_KEEP\" $lv_Initrd \"$DOMU_INITRD\" $lv_Install_No \"$DOMU_NO_INSTALL\" $lv_Kernel \"$DOMU_KERNEL\" $lv_Hooks \"$DOMU_HOOKS\" $lv_Password \"$DOMU_PASSWD\" $lv_Start \"$DOMU_BOOT\" $lv_Swap_Size \"$DOMU_SWAP_SIZE\" $lv_Swap_Vol \"$DOMU_SWAP_DEV\" $lv_Swap_No \"$DOMU_NO_SWAP\" $lv_Override \"$DOMU_FORCE\" \"---$lv_Install---\" \"\" $lv_Arch \"$DOMU_ARCH\" $lv_Dist \"$DOMU_DIST\" $lv_Methode \"$DOMU_METHODE\" $lv_Src \"$DOMU_SOURCE\" $lv_Server \"$DOMU_MIRROR\" $lv_Template \"$DOMU_TEMP\" \"---$lv_Network---\" \"\" $lv_Dhcp \"$DOMU_DHCP\" $lv_Ip \"$DOMU_IP\" $lv_Broadcast \"$DOMU_BCAST\" $lv_Netmask \"$DOMU_NETMASK\" $lv_Gateway \"$DOMU_GATE\" $lv_Mac \"$DOMU_MAC\" \"---$lv_Mandatory---\" \"\" $lv_Lvm \"$DOMU_LVM\" $lv_Host \"$DOMU_HOST\" $gv_Directory \"$DOMU_DIR\" $gv_Create \"\" $gv_Back \"\")
			else
				DRIVE_CONF_MENU=(\"---$lv_General---\" \"\" $lv_Accounts \"$DOMU_ACCOUNT\" $lv_Admins \"$DOMU_ADMIN\" $lv_Memory \"$DOMU_MEM\" $lv_Conffile \"$DOMU_CONFIG\" $lv_Filesystem \"$DOMU_FS\" $lv_Function \"$DOMU_ROLE\" $lv_Function_Arg \"$DOMU_ROLE_ARGS\" $lv_Function_Dir \"$DOMU_ROLE_DIR\" $lv_Size \"$DOMU_SIZE\" $lv_Ide_Name \"$DOMU_IDE\" $lv_Image_Size \"$DOMU_IMAGE\" $lv_Image_Vol \"$DOMU_IMAGE_DEV\" $lv_Image_Keep \"$DOMU_KEEP\" $lv_Initrd \"$DOMU_INITRD\" $lv_Install_No \"$DOMU_NO_INSTALL\" $lv_Kernel \"$DOMU_KERNEL\" $lv_Hooks \"$DOMU_HOOKS\" $lv_Password \"$DOMU_PASSWD\" $lv_Start \"$DOMU_BOOT\" $lv_Swap_Size \"$DOMU_SWAP_SIZE\" $lv_Swap_Vol \"$DOMU_SWAP_DEV\" $lv_Swap_No \"$DOMU_NO_SWAP\" $lv_Override \"$DOMU_FORCE\" \"---$lv_Install---\" \"\" $lv_Methode \"$DOMU_METHODE\" $lv_Src \"$DOMU_SOURCE\" $lv_Server \"$DOMU_MIRROR\" $lv_Template \"$DOMU_TEMP\" \"---$lv_Network---\" \"\" $lv_Dhcp \"$DOMU_DHCP\" $lv_Ip \"$DOMU_IP\" $lv_Broadcast \"$DOMU_BCAST\" $lv_Netmask \"$DOMU_NETMASK\" $lv_Gateway \"$DOMU_GATE\" $lv_Mac \"$DOMU_MAC\" \"---$lv_Mandatory---\" \"\" $lv_Lvm \"$DOMU_LVM\" $lv_Host \"$DOMU_HOST\" $gv_Directory \"$DOMU_DIR\" $gv_Create \"\" $gv_Back \"\")
			fi
		elif [ "$Menu_Opt" = -g ] ; then
			DRIVE_CONF_MENU=(\"---$lv_General---\" \"\" $lv_Accounts \"$DOMU_ACCOUNT\" $lv_Admins \"$DOMU_ADMIN\" $lv_Memory \"$DOMU_MEM\" $lv_Cache \"$DOMU_CACHE\" $lv_Conffile \"$DOMU_CONFIG\" $lv_Filesystem \"$DOMU_FS\" $lv_Function \"$DOMU_ROLE\" $lv_Function_Arg \"$DOMU_ROLE_ARGS\" $lv_Function_Dir \"$DOMU_ROLE_DIR\" $lv_Size \"$DOMU_SIZE\" $lv_Ide_Name \"$DOMU_IDE\" $lv_Image_Size \"$DOMU_IMAGE\" $lv_Image_Vol \"$DOMU_IMAGE_DEV\" $lv_Image_Keep \"$DOMU_KEEP\" $lv_Initrd \"$DOMU_INITRD\" $lv_Install_No \"$DOMU_NO_INSTALL\" $lv_Kernel \"$DOMU_KERNEL\" $lv_No_Hooks \"$DOMU_NO_HOOKS\" $lv_Password \"$DOMU_PASSWD\" $lv_Start \"$DOMU_BOOT\" $lv_Swap_Size \"$DOMU_SWAP_SIZE\" $lv_Swap_Vol \"$DOMU_SWAP_DEV\" $lv_Swap_No \"$DOMU_NO_SWAP\" $lv_Override \"$DOMU_FORCE\" \"---$lv_Install---\" $lv_Arch \"$DOMU_ARCH\" $lv_Dist \"$DOMU_DIST\" $lv_Methode \"$DOMU_METHODE\" $lv_Src \"$DOMU_SOURCE\" $lv_Server \"$DOMU_MIRROR\" $lv_Template \"$DOMU_TEMP\" \"---$lv_Network---\" $lv_Dhcp \"$gv_Dhcp\" $lv_Ip \"$gv_Ip\" $lv_Broadcast \"$gv_Broadcast\" $lv_Netmask \"$gv_Netmask\" $lv_Gateway \"$gv_Gateway\" $lv_Mac \"$gv_Mac_Address\" \"---$lv_Mandatory---\" $lv_Lvm \"$DOMU_LVM\" $lv_Host \"$gv_Hostname\" $gv_Directory \"$DOMU_DIR\" $gv_Save \"\" $gv_Back \"\")
		else
			DRIVE_CONF_MENU=(\"---$lv_General---\" \"\" $lv_Initrd \"$DOMU_INITRD\" $lv_Kernel \"$DOMU_KERNEL\" $lv_Memory \"$DOMU_MEM\" $lv_Host \"$DOMU_HOST\" Root \"$DOMU_ROOT\" nics \"$DOMU_NICS\" disk \"$DOMU_DISK\" vif \"$DOMU_IP\" \"---extra---\" \"\" Builder \"$DOMU_BUILDER\" cpu \"$DOMU_CPU\" cpus \"$DOMU_CPUS\" extra \"$DOMU_EXTRA\" nfs_server \"$DOMU_NFS_SERVER\" nfs_root \"$DOMU_NFS_ROOT\" vcpus \"$DOMU_VCPUS\" \"---$gv_Exit---\" \"\" on_shutdown \"$DOMU_SHUTDOWN\" on_reboot \"$DOMU_REBOOT\" on_crash \"$DOMU_CRASH\" $gv_Save \"\" $gv_Back \"\")
		fi
		menubox "$gv_Configuration" "$gv_Menupoint" "$DRIVE_CONF_MENU"
	}
	## }}}
	kwxen-tools_create_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)
				script_help kwxen-tools_conf_help
				kwxen-tools_create_menu
				;;
			-*-) # nur Unterteilung
				kwxen-tools_create_menu
				;;
			$lv_Accounts)
				####### generelle Options fuer xen-create-*######## {{{
				# Sollen alle nicht System Accounts auf das Gast Betriebssystem# {{{
				# kopiert werden (ja/nein)?
				ACCOUNT_MSG=$(gettext 'Sollen alle Benutzerfaecher auf das Gast Betriebssystem kopiert werden (ja/nein)?')
				yesno "$gv_Configuration" "$ACCOUNT_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_ACCOUNT=yes
				else
					DOMU_ACCOUNT=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Admins)
				# Einige Administrator fuer dieses Image erstellen,
				# benutze xen-shell (?).
				hier_ist_noch_nichts $lv_Admins
				kwxen-tools_create_menu
				;;
			$lv_Memory)
				##########################################
				# muss beim erstellen anders als beim aendern
				# der Konfiguration berechnet werden
				##########################################
				# Arbeitsspeicher fuer das Gast Betriebssystem vergeben# {{{
				Mem_Total=$(check_memory)
				# Ist der Gesamtspeicher groesser als 128Mbyte wird die
				# Differenz vom Gesamtspeicher und 64Mbyte zur Verfuegung
				# gestellt.
				if [ -n "$Mem_Total" -a "$Mem_Total" -gt 131072 ] ; then
					local Mem_Free
					integer Mem_Free
					(( Mem_Free = Mem_Total-66560 ))
					#
					MEM_MSG=$(gettext 'Geben Sie die Groesse des Arbeitsspeichers vom Gast Betriebssystem ein (Bsp.: 1G, 500M, 1024000000K). Es sind noch "${Mem_Free}Kb" frei.')
					number_input -D "$gv_Configuration" "$MEM_MSG" "$DOMU_MEM"
					if [ -n "$NUMBER" ] ; then
						convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
						if [ "$SIZE_KB" -le "$Mem_Free" ] ; then
							DOMU_MEM="$NUMBER"
						else
							MSG=$(gettext 'Die Groesse ($NUMBER) ueberschreitet den noch zu vergebenden Arbeitsspeicher (${Mem_Free}Kb).')
							msgbox "$gv_Attention" "$MSG"
						fi
					else
						DOMU_MEM=""
					fi
				else
					no_memory_msg
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Cache)
				# Sollen .deb files gecachet werden (ja/nein)?# {{{
				# --cache=no/yes
				CACHE_MSG=$(gettext 'Sollen .deb Dateien gecachet werden, falls das neue Gast Betriebssystem mit debootstrap installiert wird (ja/nein)?')
				yesno "$gv_Configuration" "$CACHE_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_CACHE=yes
				else
					DOMU_CACHE=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Filesystem)
				# Auswahl des Dateisystems# {{{
				######################################
				# Eventuell formatprogs benutzen - fuer mehr Dateisystem
				# Auswahl etc.
				######################################
				FS_MENU=(ext3 \"\" reiserfs \"\" xfs \"\")
				FS_MSG=$(gettext 'Waehlen Sie ein Dateisystem aus.')
				menubox "$gv_Configuration" "$FS_MSG" "$FS_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help kwxen-tools_conf_help
							menubox "$gv_Configuration" "$FS_MSG" "$FS_MENU"
							;;
						*)
							# Wert uebernehmen
							DOMU_FS="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Function)
				# Bestimmten Befehl ausfuehren post-install
				# DOMU_ROLE=""
				hier_ist_noch_nichts $lv_Function
				kwxen-tools_create_menu
				;;
			$lv_Function_Arg)
				# buchstaeblich den String der Funktion uebergeben
				# Bsp.: minimal
				# DOMU_ROLE_ARGS=""
				hier_ist_noch_nichts $lv_Function_Arg
				kwxen-tools_create_menu
				;;
			$lv_Function_Dir)
				# Verzeichnis auswaehlen in dem die role Scripts liegen.# {{{
				# Standard ist /etc/xen-tools/role.d)
				# DOMU_ROLE_DIR=""
				dselect "${DOMU_ROLE_DIR:-${XEN_TOOLS_CONF_PATH}/role.d}"
				if [ -n "$VERZ" ] ; then
					DOMU_ROLE_DIR="$VERZ"
				else
					DOMU_ROLE_DIR=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Size)
				############################
				# pruefen
				############################
				# Groesse fuer das Gast Betriebssystem vergeben# {{{
				# noch vorhandene Groesse herrausfinden
				if [ -n "$DOMU_DIR" ] ; then
					Kb_Is_Free=${${(s: :)${(M)${(f)"$(df $DOMU_DIR)"}##*%}%\%}[8]}
					# Imagegroesse eingeben
					check_size_input -d
				elif [ -n "$DOMU_LVM" ] ; then
					vg_free_size $DOMU_LVM
					if [ -n "$VG_SIZE" ] ; then
						convert_drive_size m "$VG_SIZE"
						Kb_Is_Free="$SIZE_KB"
						# Imagegroesse eingeben
						check_size_input -d
					fi
				else
					no_mandatory_conf_msg
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Ide_Name)
				# Sollen IDE Namen fuer die Laufwerke benutzt werden (ja/nein)?# {{{
				IDE_MSG=$(gettext 'Sollen IDE Namen fuer die virtuellen Laufwerke benutzt werden (ja/nein)?')
				yesno "$gv_Configuration" "$IDE_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_IDE=yes
				else
					DOMU_IDE=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Image_Size)
				# Auswahl, ob die ganze Disk oder nur der kleinste benoetigte# {{{
				# Platz fuer das Image belegt werden soll.
				IMAGE_SIZE_MENU=(sparse \"\" full \"\")
				menubox "$gv_Configuration" "$gv_Menupoint" "$IMAGE_SIZE_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help kwxen-tools_conf_help
							menubox "$gv_Configuration" "$gv_Menupoint" "$IMAGE_SIZE_MENU"
							;;
						*)	
							# Wert uebernehmen
							DOMU_IMAGE="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Image_Vol)
				# Auswahl eines physikalischen/logischen Volumes# {{{
				# die Variablen DOMU_DIR und DOMU_LVM werden von der Funktion
				# domu_dev geloescht
				MSG=$(gettext 'Waehlen Sie eine LV aus auf der das Gast Betriebssystem erstellt werden soll.')
				domu_dev "$MSG"
				if [ -n "$DOMU_DEV" ] ; then
					DOMU_IMAGE_DEV="$DOMU_DEV"
				else
					DOMU_IMAGE_DEV=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Image_Keep)
				# Soll das Image behalten werden falls die Installation# {{{
				# fehlschlaegt (ja/nein)?
				IMAGE_KEEP_MSG=$(gettext 'Soll das Image des Gast Betriebssystems behalten werden falls die Installation fehlschlaegt (ja/nein)?')
				yesno "$gv_Configuration" "$IMAGE_KEEP_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_KEEP=yes
				else
					DOMU_KEEP=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Initrd)
				# Initrd auswaehlen# {{{
				###############################
				# Boot Partition
				###############################
				initrd_choice
				if [ "$gv_Initrd" ] ; then
					DOMU_INITRD="$gv_Initrd"
				else
					DOMU_INITRD=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Install_No)
				# Soll keine Installation durchgefuehrt werden (ja/nein)?# {{{
				NO_INSTALL_MSG=$(gettext 'Soll keine Installation durchgefuehrt werden (ja/nein)?')
				yesno "$gv_Configuration" "$NO_INSTALL_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_NO_INSTALL=yes
				else
					DOMU_NO_INSTALL=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Kernel)
				# Kernel auswaehlen# {{{
				###############################
				# Boot Partition
				###############################
				kernel_choice
				if [ "$gv_Vmlinuz" ] ; then
					DOMU_KERNEL="$gv_Vmlinuz"
				else
					DOMU_KERNEL=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Conffile)
				# extra Konfiguration angeben zum miteinlesen.# {{{
				FORMAT="ASCII"
				file_choice "$HOME" only "$DOMU_CONFIG"
				if [ -n "$WERT" ] ; then
					DOMU_CONFIG="$WERT"
				else
					DOMU_CONFIG=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Hooks)
				# Sollen einige Einstellungen nach dem erstellen des Images# {{{
				# ausgefuehrt werden (ja/nein)?
				DOMU_HOOKS_MSG=$(gettext 'Sollen einige Einstellungen nach dem erstellen des Images ausgefuehrt werden (ja/nein)?')
				yesno "$gv_Configuration" "$DOMU_HOOKS_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_HOOKS=yes
				else
					DOMU_HOOKS=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Password)
				# Soll das root Passwort interactiv, bei der Erstellung, eingegeben werden (ja/nein)?# {{{
				PASSWD_MSG=$(gettext 'Soll das root Passwort interactiv, bei der Erstellungdes Laufwerks, eingegeben werden (ja/nein)?')
				yesno "$gv_Configuration" "$PASSWD_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_PASSWD=yes
				else
					DOMU_PASSWD=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Start)
				# Soll die neue VM nachdem erstellen gebootet werden (ja/nein)?# {{{
				BOOT_MSG=$(gettext 'Soll das neue Gast Betriebssystem nachdem erstellen gestartet werden (ja/nein)?')
				yesno "$gv_Configuration" "$BOOT_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_BOOT=yes
				else
					DOMU_BOOT=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Swap_Size)
				# Groesse fuer das Swap Laufwerk vergeben# {{{
				# noch vorhandene Groesse herrausfinden
				if [ -n "$DOMU_DIR" ] ; then
					Kb_Is_Free=${${(s: :)${(M)${(f)"$(df $DOMU_DIR)"}##*%}%\%}[8]}
					# Swapgroesse eingeben
					check_size_input -s
				elif [ -n "$DOMU_LVM" ] ; then
					vg_free_size $DOMU_LVM
					if [ -n "$VG_SIZE" ] ; then
						Kb_Is_Free="$VG_SIZE"
						# Swapgroesse eingeben
						check_size_input -s
					fi
				else
					no_mandatory_conf_msg
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Swap_Vol)
				# Auswahl eines physikalischen/logischen Volumes# {{{
				# die Variablen DOMU_DIR und DOMU_LVM werden von der Funktion
				# domu_dev geloescht
				MSG=$(gettext 'Waehlen Sie eine LV aus auf der das Gast Betriebssystem erstellt werden soll.')
				domu_dev "$MSG"
				if [ -n "$DOMU_DEV" ] ; then
					DOMU_SWAP_DEV="$DOMU_DEV"
				else
					DOMU_SWAP_DEV=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Swap_No)
				# Soll kein Swap Laufwerk benutzt werden (ja/nein)?# {{{
				SWAP_MSG=$(gettext 'Soll kein Swap Laufwerk benutzt werden (ja/nein)?')
				yesno "$gv_Configuration" "$SWAP_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_NO_SWAP=yes
					unset -- DOMU_SWAP_DEV DOMU_SWAP_SIZE
				else
					DOMU_NO_SWAP=no
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Override)
				# Sollen existierende Gast Betriebssysteme ueberschrieben werden (ja/nein)?# {{{
				FORCE_MSG=$(gettext 'Sollen existierende Gast Betriebssysteme ueberschrieben werden (ja/nein)?')
				yesno "$gv_Configuration" "$FORCE_MSG"
				if [ "$?" = 0 ] ; then
					DOMU_FORCE=yes
				else
					DOMU_FORCE=no
				fi
				## }}}
				kwxen-tools_create_menu
				## }}}
				;;
			$lv_Arch)
				##### Installations Options fuer xen-create-*####### {{{
				# Architektur auswaehlen# {{{
				###################################################
				# mehr Architekturen?
				DOMU_ARCH="`uname -m` \"\""
				###################################################
				ARCH_MENU=(amd64 \"\" i386 \"\" i686 \"\")
				ARCH_MSG=$(gettext 'Waehlen Sie die Architektur des Gast Betriebssystem aus.')
				menubox "$gv_Configuration" "$ARCH_MSG" "$ARCH_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help kwxen-tools_conf_help
							menubox "$gv_Configuration" "$ARCH_MSG" "$ARCH_MENU"
							;;
						*)
							# Wert uebernehmen
							DOMU_ARCH="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Dist)
				# Distribution auswaehlen# {{{
				# Wurde {deboot,rpm}strap ausgewaehlt werden auch nur die moeglichen
				# zur Verfuegung gestellt
				# Funktion count_scripts# {{{
				#
				count_scripts() {
					local Anz
					integer Anz
					unset -- Dist_M_Tmp
					Anz=0
					for i in ${Script_Path}/*(.N) ; {
						(( Anz++ ))
						Dist_M_Tmp[Anz]="${i}(:t) \"${DOMU_METHODE[1,3]}\""
					}
				}
				## }}}
				# Funktion select_dist# {{{
				#
				select_dist() {
					if [ -n "$Dist_M_Tmp" ] ; then
						DIST_MENU=($Dist_M_Tmp)
						DIST_MSG=$(gettext 'Waehlen Sie die Distribution aus, die als Gast Betriebssystem installiert werden soll.')
						menubox "$gv_Configuration" "$DIST_MSG" "$DIST_MENU"
						while [ -n "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)	script_help kwxen-tools_conf_help
									menubox "$gv_Configuration" "$DIST_MSG" "$DIST_MENU"
									;;
								*)
									# Wert uebernehmen
									DOMU_DIST="$gv_Auswahl"
									break
									;;
							esac
						done
					else
						MSG=$(gettext 'Es wurden keine Distributions Dateien fuer diese Installationsmethode gefunden')
						msgbox "$gv_Attention" "$MSG"
						unset -- DOMU_DIST
					fi
				}
				## }}}
				#
				if [ "$DOMU_METHODE" = debootstrap ] ; then
					Script_Path=/usr/share/debootstrap/scripts
					count_scripts
					select_dist
				elif [ "$DOMU_METHODE" = rpmstrap ] ; then
					Script_Path=/usr/lib/rpmstrap/scripts
					count_scripts
					select_dist
				else
					# Fehlernachricht
					MSG=$(gettext 'Sie muessen erst eine der Installations Methoden debootstrap oder rpmstrap auswaehlen, damit Sie eine Distribution auswaehlen koennen.')
					msgbox "$gv_Attention" "$MSG"
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Methode)
				# Installationsmethode auswaehlen# {{{
				METHODE_MENU=(debootstrap \"\" rpmstrap \"\" copy \"\" tar \"\")
				METHODE_MSG=$(gettext 'Waehlen Sie eine Installationsmethode fuer das Gast Betriebssystem aus.')
				menubox "$gv_Configuration" "$METHODE_MSG" "$METHODE_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help kwxen-tools_conf_help
							menubox "$gv_Configuration" "$DIST_MSG" "$DIST_MENU"
							;;
						*)
							# Wert uebernehmen
							DOMU_METHODE="$gv_Auswahl"
							case "$DOMU_METHODE" in
								copy|tar)
									# bei "tar" oder "copy" braucht man keine Architektur
									# und Cache angeben.
									unset -- DOMU_ARCH
									DOMU_CACHE=no
									;;
								rpmstrap)
									# Hier braucht man auch keinen Cache.
									DOMU_CACHE=no
							esac
							break
							;;
					esac
				done
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Src)
				# Quelle auswaehlen# {{{
				if [ "$DOMU_METHODE" = tar ] ; then
					FORMAT="TAR"
					SUFFIX="tar"
					file_choice "$HOME" only "$DOMU_SOURCE"
					if [ -n "$WERT" ] ; then
						DOMU_SOURCE="${VERZ}/${WERT}"
					else
						DOMU_SOURCE=""
					fi
				elif [ "$DOMU_METHODE" = copy ] ; then
					dselect "$DOMU_SOURCE"
					if [ -n "$VERZ" ] ; then
						DOMU_SOURCE="$VERZ"
					else
						DOMU_SOURCE=""
					fi
				else
					MSG=$(gettext 'Sie muessen erst den Menuepunkt Methode mit einem der Werte "copy" oder "tar" belegen.')
					msgbox "$gv_Attention" "$MSG"
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Server)
				# Spiegelserver eingeben# {{{
				MIRROR_MSG=$(gettext 'Geben Sie bitte einen Server an von dem die Pakete gezogen werden sollen (Bsp.: http://ftp2.de.debian.org/debian).')
				inputbox "$gv_Configuration" "$MIRROR_MSG" "$DOMU_MIRROR"
				if [ -n "$gv_Auswahl" ] ; then
					DOMU_MIRROR="$gv_Auswahl"
				else
					DOMU_MIRROR=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Template)
				# Welche Konfigurationsdatei soll als Vorlage benutzt werden.# {{{
				# (Bsp.: /etc/xen-tools/vm01.domain.de.cfg)
				file_choice "$XEN_CONF_PATH" only "$DOMU_TEMP"
				if [ -n "$WERT" ] ; then
					DOMU_TEMP="${XEN_CONF_PATH}/${WERT}"
				else
					DOMU_TEMP=""
				fi
				## }}}
				kwxen-tools_create_menu
				## }}}
				;;
			$lv_Dhcp)
				##### Netzwerk Options fuer xen-create-image######## {{{
				# Ip-Adresse etc. ueber dhcp beziehen (yes/no)?# {{{
				iface_dhcp "$DOMU_DHCP"
				if [ -n "$gv_Dhcp" ] ; then
					DOMU_DHCP="$gv_Dhcp"
					unset -- DOMU_IP DOMU_BCAST DOMU_NETMASK DOMU_GATE
				else
					DOMU_DHCP=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Ip)
				# Ip-adresse# {{{
				iface_ip -x "$DOMU_IP"
				if [ -n "$gv_Ip" ] ; then
					DOMU_IP="$gv_Ip"
					unset -- DOMU_DHCP
				else
					DOMU_IP=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Broadcast)
				# Broadcast # {{{
				iface_bcast "$DOMU_BCAST"
				if [ -n "$gv_Broadcast" ] ; then
					DOMU_BCAST="$gv_Broadcast"
					unset -- DOMU_DHCP
				else
					DOMU_BCAST=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Netmask)
				# Netzmaske# {{{
				iface_netmask "$DOMU_NETMASK"
				if [ -n "$gv_Netmask" ] ; then
					DOMU_NETMASK="$gv_Netmask"
					unset -- DOMU_DHCP
				else
					DOMU_NETMASK=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Gateway)
				# Gateway# {{{
				iface_gate "$gv_Gateway"
				if [ -n "$gv_Gateway" ] ; then
					DOMU_GATE="$gv_Gateway"
					unset -- DOMU_DHCP
				else
					DOMU_GATE=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Mac)
				# MAC-Adresse# {{{
				###################################################
				# oder auch wlan etc.?
				###################################################
				ETH_DEV=${(o)${(s,:,)${(M)${(f)"$(< /proc/net/dev)"}##(*eth*:)}}%:}
				if [ -n "$ETH_DEV" ] ; then
					DOMU_MAC_MSG=$(gettext 'Soll die Mac-Adresse der 1. Netzwerkkarte benutzt werden (ja/nein)')
					yesno "$gv_Configuration" "$DOMU_MAC_MSG"
					if [ "$?" = 0 ] ; then
						DOMU_MAC=${${(s, ,)${(f)"$(export LC_ALL=C ; ifconfig -a eth0)"}}[5]}
					else
						DOMU_MAC=""
					fi
				else
					MSG=$(gettext 'Es ist keine Netzwerkkarte vorhanden.')
					msgbox "$gv_Attention" "$MSG"
					DOMU_MAC=""
				fi
				## }}}
				kwxen-tools_create_menu
				## }}}
				;;
			$lv_Lvm)
				#####Mandatory Options#################### {{{
				# --evms fehlt noch
				######################################
				# zwingende Optionen fuer xen-create-image
				# Waehlen Sie hier die VG aus auf der das LV erstellt# {{{
				# werden soll (Bsp.: vg2).
				vg_display
				if [ -n "$VG_E" ] ; then
					LVM_MENU=($VG_E)
					LVM_MSG=$(gettext 'Waehlen Sie eine VG aus in der das Gast Betriebssystem erstellt werden soll.')
					menubox "$gv_Configuration" "$LVM_MSG" "$LVM_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	# Hilfe
								script_help kwxen-tools_conf_help
								menubox "$gv_Configuration" "$LVM_MSG" "$LVM_MENU"
								;;
							*)
								# Wert uebernehmen und die Variable DOMU_DIR auf "-"
								# setzen.freie Groesse pruefen
								# Die Ausgabe kommt in MByte
								vg_free_size "$gv_Auswahl"
								if [ -n "$VG_SIZE" ] ; then
									convert_drive_size m "$VG_SIZE"
									Kb_Is_Free="$SIZE_KB"
									check_size_input -a
									DOMU_LVM="$gv_Auswahl"
									DOMU_DIR=""
								fi
								break
								;;
						esac
					done
				else
					no_vg_msg
					unset -- DOMU_LVM
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$lv_Host)
				# Geben Sie hier den Rechnernamen fuer die domU ein.# {{{
				# Bsp.: vm01.domain.de (FQDN).
				conf_hostname -f "$DOMU_HOST"
				if [ -n "$gv_Hostname" ] ; then
					DOMU_HOST="$gv_Hostname"
				else
					DOMU_HOST=""
				fi
				## }}}
				kwxen-tools_create_menu
				;;
			$gv_Directory)
				# in welches Verzeichnis soll das Image erstellt werden.# {{{
				# Unterverzeichnisse wie domain/domU werden erstellt.
				dselect "$DOMU_DIR"
				if [ -n "$VERZ" ] ; then
					dselect_check -c "$VERZ"
					if [ -n "$VERZ" ] ; then
						# freie Groesse pruefen
						Kb_Is_Free=${${(s: :)${(M)${(f)"$(df $VERZ)"}##*%}%\%}[8]}
						check_size_input -a
						DOMU_DIR="$VERZ"
						DOMU_LVM=""
					else
						DOMU_DIR=""
					fi
				fi
				##}}}
				kwxen-tools_create_menu
				## }}}
				;;
			$gv_Save)
				# speichern der globalen und der ausgewaehlten DomU Konfiguration
				# Konfiguration speichern# {{{
				###################################
				# globale/Template Konfiguration speichern
				####################################
				if [ "$gv_Dhcp" = yes ] ; then
					DOMU_DHCP="$gv_Dhcp"
					unset -- DOMU_IP DOMU_BROADCAST DOMU_NETMASK
				elif [ "$gv_Ip" -a "$gv_Broadcast" -a "$gv_Netmask" ] ; then
					unset -- DOMU_DHCP
					DOMU_IP="$gv_Ip"
					DOMU_BROADCAST="$gv_Broadcast"
					DOMU_NETMASK="$gv_Netmask"
				elif [ "$gv_Ip" -a "$gv_Netmask" ] ; then
					unset -- DOMU_DHCP DOMU_BROADCAST
					DOMU_IP="$gv_Ip"
					DOMU_NETMASK="$gv_Netmask"
				elif [ "$gv_Ip" ] ; then
					unset -- DOMU_DHCP DOMU_BROADCAST DOMU_NETMASK
					DOMU_IP="$gv_Ip"
				else
					no_ip_address_msg
				fi
				#########################
				# kwxen-tools_config
				#########################
				## }}}
				break
				;;
			$gv_Create)
				# VM (DomU) erstellen# {{{
				unset -- PARAMS
				# Generelle Parameter# {{{
				if [ "$DOMU_ACCOUNT" = yes ] ; then
					PARAMS="--accounts=yes"
				fi
				if [ -n "$DOMU_ADMIN" ] ; then
					PARAMS="$PARAMS --admins=$DOMU_ADMIN"
				fi
				if [ "$DOMU_BOOT" = yes ] ; then
					PARAMS="$PARAMS --boot"
				fi
				if [ "$DOMU_CACHE" = yes ] ; then
					PARAMS="$PARAMS --cache=yes"
				fi
				if [ "$DOMU_FORCE" = yes ] ; then
					PARAMS="$PARAMS --force"
				fi
				if [ -n "$DOMU_FS" ] ; then
					PARAMS="$PARAMS --fs=$DOMU_FS"
				fi
				if [ -n "$DOMU_IMAGE" ] ; then
					if [ -z "$DOMU_LVM" ] ; then
						PARAMS="$PARAMS --image=$DOMU_IMAGE"
					fi
				fi
				if [ -n "$DOMU_IMAGE_DEV" ] ; then
					PARAMS="$PARAMS --image-dev=$DOMU_IMAGE_DEV"
				fi
				if [ -n "$DOMU_INITRD" ] ; then
					PARAMS="$PARAMS --initrd=$DOMU_INITRD"
				fi
				if [ "$DOMU_KEEP" = yes ] ; then
					PARAMS="$PARAMS --keep"
				fi
				if [ -n "$DOMU_KERNEL" ] ; then
					PARAMS="$PARAMS --kernel=$DOMU_KERNEL"
				fi
				if [ -n "$DOMU_MEM" ] ; then
					PARAMS="$PARAMS --memory=$DOMU_MEM"
				fi
				if [ "$DOMU_NO_INSTALL" = yes ] ; then
					PARAMS="$PARAMS --no-install"
					# bei keiner Installation gibts auch kein
					# Program /usr/bin/passwd
					unset -- DOMU_PASSWD
				fi
				if [ "$DOMU_HOOKS" != yes ] ; then
					PARAMS="$PARAMS --no-hooks"
				fi
				if [ "$DOMU_PASSWD" = yes ] ; then
					PARAMS="$PARAMS --passwd"
				fi
				if [ -n "$DOMU_SIZE" ] ; then
					PARAMS="$PARAMS --size=$DOMU_SIZE"
				fi
				# Wenn keine Swap benutzt werden soll, braucht man auch nicht
				# die Swap Parameter.
				if [ "$DOMU_NO_SWAP" = yes ] ; then
					PARAMS="$PARAMS --noswap"
				else
					if [ -n "$DOMU_SWAP_SIZE" ] ; then
						PARAMS="$PARAMS --swap=$DOMU_SWAP_SIZE"
					fi
					if [ -n "$DOMU_SWAP_DEV" ] ; then
						PARAMS="$PARAMS --swap-dev=$DOMU_SWAP_DEV"
					fi
				fi
				if [ "$DOMU_IDE" = yes ] ; then
					PARAMS="$PARAMS --ide"
				fi
				## }}}
				# Install Parameter# {{{
				if [ -n "$DOMU_ARCH" ] ; then
					case "$DOMU_METHODE" in
						copy|tar)
							# Bei den Optionen "copy" und "tar"
							# wird die Variable "DOMU_ARCH" geloescht.
							unset -- DOMU_ARCH
							;;
						*)
							# Wert uebernehmen
							PARAMS="$PARAMS --arch=$DOMU_ARCH"
							;;
					esac
				fi
				if [ -n "$DOMU_DIST" ] ; then
					PARAMS="$PARAMS --dist=$DOMU_DIST"
				fi
				if [ -n "$DOMU_METHODE" ] ; then
					PARAMS="$PARAMS --install-method=$DOMU_METHODE"
				fi
				if [ -n "$DOMU_SOURCE" -a "$DOMU_METHODE" = "copy" -o "$DOMU_METHODE" = "tar" ] ; then
					PARAMS="$PARAMS --install-source=$DOMU_SOURCE"
				fi
				if [ -n "$DOMU_MIRROR" ] ; then
					PARAMS="$PARAMS --mirror=$DOMU_MIRROR"
				fi
				if [ -n "$DOMU_TEMP" ] ; then
					PARAMS="$PARAMS --template=$DOMU_TEMP"
				fi
				## }}}
				# Netzwerk Parameter# {{{
				# Soll dhcp benutzt werden benoetigt man keine weiteren
				# Netzwerk Parameter. DOMU_DHCP wird aber schon als default
				# benutzt so das man nochmal DOMU_IP checken muss.
				if [ "$DOMU_DHCP" = yes -a -z "$DOMU_IP" ] ; then
					PARAMS="$PARAMS --dhcp"
				else
					if [ -n "$DOMU_IP" ] ; then
						PARAMS="$PARAMS --ip=$DOMU_IP"
					fi
					if [ -n "$DOMU_NETMASK" ] ; then
						PARAMS="$PARAMS --netmask=$DOMU_NETMASK"
					fi
					if [ -n "$DOMU_BCAST" ] ; then
						PARAMS="$PARAMS --broadcast=$DOMU_BCAST"
					fi
					if [ -n "$DOMU_GATE" ] ; then
						PARAMS="$PARAMS --gateway=$DOMU_GATE"
					fi
				fi
				if [ -n "$gv_Mac_Address" ] ; then
					PARAMS="$PARAMS --mac=$gv_Mac_Address"
				fi
				## }}}
				# Mandatory Parameter# {{{
				if [ -n "$DOMU_DIR" ] ; then
					PARAMS="$PARAMS --dir=$DOMU_DIR"
				fi
				if [ -n "$DOMU_LVM" ] ; then
					PARAMS="$PARAMS --lvm=$DOMU_LVM"
				fi
				if [ -n "$gv_Hostname" ] ; then
					PARAMS="$PARAMS --hostname=$gv_Hostname"
				fi
				## }}}
				#
				if [ -n "$DOMU_HOST" -a -n "$DOMU_SIZE" -a "$DOMU_LVM" -o "$DOMU_DIR" ] ; then
					xen-create-image ${=PARAMS}
					# VM Variable (DomU Name) loeschen
					unset -- DOMU_NAME
				else
					MSG=$(gettext 'Sie muesssen mindenstens die Menuepunkte Rechnername, die Groesse und LVM oder Verzeichnis mit Werten belegen.')
					msgbox "$gv_Attention" "$MSG"
				fi
				## }}}
				############################
				# unset der VAR. fehlt noch
				############################
				break
				;;
			$gv_Back)	break
				;;
			*)
				hier_ist_noch_nichts $gv_Auswahl
				;;
		esac
	done
}
#}}}
